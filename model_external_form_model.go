/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalFormModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalFormModel{}

// ExternalFormModel struct for ExternalFormModel
type ExternalFormModel struct {
	Fields []ExternalFormFieldModel `json:"fields"`
	PossibleValues map[string][]ExternalFormAllowedValueModel `json:"possibleValues"`
	Links []ExternalFormLinkModel `json:"links"`
}

type _ExternalFormModel ExternalFormModel

// NewExternalFormModel instantiates a new ExternalFormModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalFormModel(fields []ExternalFormFieldModel, possibleValues map[string][]ExternalFormAllowedValueModel, links []ExternalFormLinkModel) *ExternalFormModel {
	this := ExternalFormModel{}
	this.Fields = fields
	this.PossibleValues = possibleValues
	this.Links = links
	return &this
}

// NewExternalFormModelWithDefaults instantiates a new ExternalFormModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalFormModelWithDefaults() *ExternalFormModel {
	this := ExternalFormModel{}
	return &this
}

// GetFields returns the Fields field value
func (o *ExternalFormModel) GetFields() []ExternalFormFieldModel {
	if o == nil {
		var ret []ExternalFormFieldModel
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *ExternalFormModel) GetFieldsOk() ([]ExternalFormFieldModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *ExternalFormModel) SetFields(v []ExternalFormFieldModel) {
	o.Fields = v
}

// GetPossibleValues returns the PossibleValues field value
func (o *ExternalFormModel) GetPossibleValues() map[string][]ExternalFormAllowedValueModel {
	if o == nil {
		var ret map[string][]ExternalFormAllowedValueModel
		return ret
	}

	return o.PossibleValues
}

// GetPossibleValuesOk returns a tuple with the PossibleValues field value
// and a boolean to check if the value has been set.
func (o *ExternalFormModel) GetPossibleValuesOk() (*map[string][]ExternalFormAllowedValueModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PossibleValues, true
}

// SetPossibleValues sets field value
func (o *ExternalFormModel) SetPossibleValues(v map[string][]ExternalFormAllowedValueModel) {
	o.PossibleValues = v
}

// GetLinks returns the Links field value
func (o *ExternalFormModel) GetLinks() []ExternalFormLinkModel {
	if o == nil {
		var ret []ExternalFormLinkModel
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ExternalFormModel) GetLinksOk() ([]ExternalFormLinkModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ExternalFormModel) SetLinks(v []ExternalFormLinkModel) {
	o.Links = v
}

func (o ExternalFormModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalFormModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fields"] = o.Fields
	toSerialize["possibleValues"] = o.PossibleValues
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *ExternalFormModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fields",
		"possibleValues",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalFormModel := _ExternalFormModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalFormModel)

	if err != nil {
		return err
	}

	*o = ExternalFormModel(varExternalFormModel)

	return err
}

type NullableExternalFormModel struct {
	value *ExternalFormModel
	isSet bool
}

func (v NullableExternalFormModel) Get() *ExternalFormModel {
	return v.value
}

func (v *NullableExternalFormModel) Set(val *ExternalFormModel) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalFormModel) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalFormModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalFormModel(val *ExternalFormModel) *NullableExternalFormModel {
	return &NullableExternalFormModel{value: val, isSet: true}
}

func (v NullableExternalFormModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalFormModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


