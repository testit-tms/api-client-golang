/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WorkItemGroupType the model 'WorkItemGroupType'
type WorkItemGroupType string

// List of WorkItemGroupType
const (
	WORKITEMGROUPTYPE_TYPE WorkItemGroupType = "Type"
	WORKITEMGROUPTYPE_PRIORITY WorkItemGroupType = "Priority"
	WORKITEMGROUPTYPE_STATUS WorkItemGroupType = "Status"
	WORKITEMGROUPTYPE_AUTOMATION_STATUS WorkItemGroupType = "AutomationStatus"
	WORKITEMGROUPTYPE_CREATOR WorkItemGroupType = "Creator"
	WORKITEMGROUPTYPE_LAST_EDITOR WorkItemGroupType = "LastEditor"
	WORKITEMGROUPTYPE_CUSTOM_ATTRIBUTE WorkItemGroupType = "CustomAttribute"
)

// All allowed values of WorkItemGroupType enum
var AllowedWorkItemGroupTypeEnumValues = []WorkItemGroupType{
	"Type",
	"Priority",
	"Status",
	"AutomationStatus",
	"Creator",
	"LastEditor",
	"CustomAttribute",
}

func (v *WorkItemGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkItemGroupType(value)
	for _, existing := range AllowedWorkItemGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkItemGroupType", value)
}

// NewWorkItemGroupTypeFromValue returns a pointer to a valid WorkItemGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkItemGroupTypeFromValue(v string) (*WorkItemGroupType, error) {
	ev := WorkItemGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkItemGroupType: valid values are %v", v, AllowedWorkItemGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkItemGroupType) IsValid() bool {
	for _, existing := range AllowedWorkItemGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkItemGroupType value
func (v WorkItemGroupType) Ptr() *WorkItemGroupType {
	return &v
}

type NullableWorkItemGroupType struct {
	value *WorkItemGroupType
	isSet bool
}

func (v NullableWorkItemGroupType) Get() *WorkItemGroupType {
	return v.value
}

func (v *NullableWorkItemGroupType) Set(val *WorkItemGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemGroupType(val *WorkItemGroupType) *NullableWorkItemGroupType {
	return &NullableWorkItemGroupType{value: val, isSet: true}
}

func (v NullableWorkItemGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

