/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CollectionFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionFilter{}

// CollectionFilter struct for CollectionFilter
type CollectionFilter struct {
	Operator CollectionOperator `json:"operator"`
	Filter IFilter `json:"filter"`
	Field string `json:"field"`
}

type _CollectionFilter CollectionFilter

// NewCollectionFilter instantiates a new CollectionFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionFilter(operator CollectionOperator, filter IFilter, field string) *CollectionFilter {
	this := CollectionFilter{}
	this.Operator = operator
	this.Filter = filter
	this.Field = field
	return &this
}

// NewCollectionFilterWithDefaults instantiates a new CollectionFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionFilterWithDefaults() *CollectionFilter {
	this := CollectionFilter{}
	return &this
}

// GetOperator returns the Operator field value
func (o *CollectionFilter) GetOperator() CollectionOperator {
	if o == nil {
		var ret CollectionOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *CollectionFilter) GetOperatorOk() (*CollectionOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *CollectionFilter) SetOperator(v CollectionOperator) {
	o.Operator = v
}

// GetFilter returns the Filter field value
func (o *CollectionFilter) GetFilter() IFilter {
	if o == nil {
		var ret IFilter
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *CollectionFilter) GetFilterOk() (*IFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *CollectionFilter) SetFilter(v IFilter) {
	o.Filter = v
}

// GetField returns the Field field value
func (o *CollectionFilter) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *CollectionFilter) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *CollectionFilter) SetField(v string) {
	o.Field = v
}

func (o CollectionFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["filter"] = o.Filter
	toSerialize["field"] = o.Field
	return toSerialize, nil
}

func (o *CollectionFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"filter",
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCollectionFilter := _CollectionFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCollectionFilter)

	if err != nil {
		return err
	}

	*o = CollectionFilter(varCollectionFilter)

	return err
}

type NullableCollectionFilter struct {
	value *CollectionFilter
	isSet bool
}

func (v NullableCollectionFilter) Get() *CollectionFilter {
	return v.value
}

func (v *NullableCollectionFilter) Set(val *CollectionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionFilter(val *CollectionFilter) *NullableCollectionFilter {
	return &NullableCollectionFilter{value: val, isSet: true}
}

func (v NullableCollectionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


