/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkItemGroupModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkItemGroupModel{}

// WorkItemGroupModel struct for WorkItemGroupModel
type WorkItemGroupModel struct {
	Key interface{} `json:"key,omitempty"`
	Size int32 `json:"size"`
	WorkItems []WorkItemShortModel `json:"workItems"`
}

type _WorkItemGroupModel WorkItemGroupModel

// NewWorkItemGroupModel instantiates a new WorkItemGroupModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkItemGroupModel(size int32, workItems []WorkItemShortModel) *WorkItemGroupModel {
	this := WorkItemGroupModel{}
	this.Size = size
	this.WorkItems = workItems
	return &this
}

// NewWorkItemGroupModelWithDefaults instantiates a new WorkItemGroupModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkItemGroupModelWithDefaults() *WorkItemGroupModel {
	this := WorkItemGroupModel{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkItemGroupModel) GetKey() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkItemGroupModel) GetKeyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return &o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *WorkItemGroupModel) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given interface{} and assigns it to the Key field.
func (o *WorkItemGroupModel) SetKey(v interface{}) {
	o.Key = v
}

// GetSize returns the Size field value
func (o *WorkItemGroupModel) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *WorkItemGroupModel) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *WorkItemGroupModel) SetSize(v int32) {
	o.Size = v
}

// GetWorkItems returns the WorkItems field value
func (o *WorkItemGroupModel) GetWorkItems() []WorkItemShortModel {
	if o == nil {
		var ret []WorkItemShortModel
		return ret
	}

	return o.WorkItems
}

// GetWorkItemsOk returns a tuple with the WorkItems field value
// and a boolean to check if the value has been set.
func (o *WorkItemGroupModel) GetWorkItemsOk() ([]WorkItemShortModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItems, true
}

// SetWorkItems sets field value
func (o *WorkItemGroupModel) SetWorkItems(v []WorkItemShortModel) {
	o.WorkItems = v
}

func (o WorkItemGroupModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkItemGroupModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	toSerialize["size"] = o.Size
	toSerialize["workItems"] = o.WorkItems
	return toSerialize, nil
}

func (o *WorkItemGroupModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
		"workItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkItemGroupModel := _WorkItemGroupModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkItemGroupModel)

	if err != nil {
		return err
	}

	*o = WorkItemGroupModel(varWorkItemGroupModel)

	return err
}

type NullableWorkItemGroupModel struct {
	value *WorkItemGroupModel
	isSet bool
}

func (v NullableWorkItemGroupModel) Get() *WorkItemGroupModel {
	return v.value
}

func (v *NullableWorkItemGroupModel) Set(val *WorkItemGroupModel) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemGroupModel) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemGroupModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemGroupModel(val *WorkItemGroupModel) *NullableWorkItemGroupModel {
	return &NullableWorkItemGroupModel{value: val, isSet: true}
}

func (v NullableWorkItemGroupModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemGroupModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


