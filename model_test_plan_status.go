/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestPlanStatus the model 'TestPlanStatus'
type TestPlanStatus string

// List of TestPlanStatus
const (
	TESTPLANSTATUS_NEW TestPlanStatus = "New"
	TESTPLANSTATUS_IN_PROGRESS TestPlanStatus = "InProgress"
	TESTPLANSTATUS_PAUSED TestPlanStatus = "Paused"
	TESTPLANSTATUS_COMPLETED TestPlanStatus = "Completed"
)

// All allowed values of TestPlanStatus enum
var AllowedTestPlanStatusEnumValues = []TestPlanStatus{
	"New",
	"InProgress",
	"Paused",
	"Completed",
}

func (v *TestPlanStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestPlanStatus(value)
	for _, existing := range AllowedTestPlanStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestPlanStatus", value)
}

// NewTestPlanStatusFromValue returns a pointer to a valid TestPlanStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestPlanStatusFromValue(v string) (*TestPlanStatus, error) {
	ev := TestPlanStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestPlanStatus: valid values are %v", v, AllowedTestPlanStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestPlanStatus) IsValid() bool {
	for _, existing := range AllowedTestPlanStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestPlanStatus value
func (v TestPlanStatus) Ptr() *TestPlanStatus {
	return &v
}

type NullableTestPlanStatus struct {
	value *TestPlanStatus
	isSet bool
}

func (v NullableTestPlanStatus) Get() *TestPlanStatus {
	return v.value
}

func (v *NullableTestPlanStatus) Set(val *TestPlanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanStatus(val *TestPlanStatus) *NullableTestPlanStatus {
	return &NullableTestPlanStatus{value: val, isSet: true}
}

func (v NullableTestPlanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

