/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FailureCategoryGroupApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailureCategoryGroupApiResult{}

// FailureCategoryGroupApiResult struct for FailureCategoryGroupApiResult
type FailureCategoryGroupApiResult struct {
	// Group field value
	FieldValue interface{} `json:"fieldValue,omitempty"`
	// Group display field value
	DisplayFieldValue interface{} `json:"displayFieldValue,omitempty"`
	// Group entries count
	Count int32 `json:"count"`
}

type _FailureCategoryGroupApiResult FailureCategoryGroupApiResult

// NewFailureCategoryGroupApiResult instantiates a new FailureCategoryGroupApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailureCategoryGroupApiResult(count int32) *FailureCategoryGroupApiResult {
	this := FailureCategoryGroupApiResult{}
	this.Count = count
	return &this
}

// NewFailureCategoryGroupApiResultWithDefaults instantiates a new FailureCategoryGroupApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailureCategoryGroupApiResultWithDefaults() *FailureCategoryGroupApiResult {
	this := FailureCategoryGroupApiResult{}
	return &this
}

// GetFieldValue returns the FieldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailureCategoryGroupApiResult) GetFieldValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldValue
}

// GetFieldValueOk returns a tuple with the FieldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailureCategoryGroupApiResult) GetFieldValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldValue) {
		return nil, false
	}
	return &o.FieldValue, true
}

// HasFieldValue returns a boolean if a field has been set.
func (o *FailureCategoryGroupApiResult) HasFieldValue() bool {
	if o != nil && !IsNil(o.FieldValue) {
		return true
	}

	return false
}

// SetFieldValue gets a reference to the given interface{} and assigns it to the FieldValue field.
func (o *FailureCategoryGroupApiResult) SetFieldValue(v interface{}) {
	o.FieldValue = v
}

// GetDisplayFieldValue returns the DisplayFieldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailureCategoryGroupApiResult) GetDisplayFieldValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DisplayFieldValue
}

// GetDisplayFieldValueOk returns a tuple with the DisplayFieldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailureCategoryGroupApiResult) GetDisplayFieldValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DisplayFieldValue) {
		return nil, false
	}
	return &o.DisplayFieldValue, true
}

// HasDisplayFieldValue returns a boolean if a field has been set.
func (o *FailureCategoryGroupApiResult) HasDisplayFieldValue() bool {
	if o != nil && !IsNil(o.DisplayFieldValue) {
		return true
	}

	return false
}

// SetDisplayFieldValue gets a reference to the given interface{} and assigns it to the DisplayFieldValue field.
func (o *FailureCategoryGroupApiResult) SetDisplayFieldValue(v interface{}) {
	o.DisplayFieldValue = v
}

// GetCount returns the Count field value
func (o *FailureCategoryGroupApiResult) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *FailureCategoryGroupApiResult) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *FailureCategoryGroupApiResult) SetCount(v int32) {
	o.Count = v
}

func (o FailureCategoryGroupApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailureCategoryGroupApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldValue != nil {
		toSerialize["fieldValue"] = o.FieldValue
	}
	if o.DisplayFieldValue != nil {
		toSerialize["displayFieldValue"] = o.DisplayFieldValue
	}
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *FailureCategoryGroupApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFailureCategoryGroupApiResult := _FailureCategoryGroupApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFailureCategoryGroupApiResult)

	if err != nil {
		return err
	}

	*o = FailureCategoryGroupApiResult(varFailureCategoryGroupApiResult)

	return err
}

type NullableFailureCategoryGroupApiResult struct {
	value *FailureCategoryGroupApiResult
	isSet bool
}

func (v NullableFailureCategoryGroupApiResult) Get() *FailureCategoryGroupApiResult {
	return v.value
}

func (v *NullableFailureCategoryGroupApiResult) Set(val *FailureCategoryGroupApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureCategoryGroupApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureCategoryGroupApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureCategoryGroupApiResult(val *FailureCategoryGroupApiResult) *NullableFailureCategoryGroupApiResult {
	return &NullableFailureCategoryGroupApiResult{value: val, isSet: true}
}

func (v NullableFailureCategoryGroupApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureCategoryGroupApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


