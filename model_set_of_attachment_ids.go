/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the SetOfAttachmentIds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetOfAttachmentIds{}

// SetOfAttachmentIds struct for SetOfAttachmentIds
type SetOfAttachmentIds struct {
	Action ActionUpdate `json:"action"`
	AttachmentIds []string `json:"attachmentIds,omitempty"`
}

// NewSetOfAttachmentIds instantiates a new SetOfAttachmentIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetOfAttachmentIds(action ActionUpdate) *SetOfAttachmentIds {
	this := SetOfAttachmentIds{}
	this.Action = action
	return &this
}

// NewSetOfAttachmentIdsWithDefaults instantiates a new SetOfAttachmentIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetOfAttachmentIdsWithDefaults() *SetOfAttachmentIds {
	this := SetOfAttachmentIds{}
	return &this
}

// GetAction returns the Action field value
func (o *SetOfAttachmentIds) GetAction() ActionUpdate {
	if o == nil {
		var ret ActionUpdate
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SetOfAttachmentIds) GetActionOk() (*ActionUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SetOfAttachmentIds) SetAction(v ActionUpdate) {
	o.Action = v
}

// GetAttachmentIds returns the AttachmentIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetOfAttachmentIds) GetAttachmentIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AttachmentIds
}

// GetAttachmentIdsOk returns a tuple with the AttachmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetOfAttachmentIds) GetAttachmentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AttachmentIds) {
		return nil, false
	}
	return o.AttachmentIds, true
}

// HasAttachmentIds returns a boolean if a field has been set.
func (o *SetOfAttachmentIds) HasAttachmentIds() bool {
	if o != nil && IsNil(o.AttachmentIds) {
		return true
	}

	return false
}

// SetAttachmentIds gets a reference to the given []string and assigns it to the AttachmentIds field.
func (o *SetOfAttachmentIds) SetAttachmentIds(v []string) {
	o.AttachmentIds = v
}

func (o SetOfAttachmentIds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetOfAttachmentIds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if o.AttachmentIds != nil {
		toSerialize["attachmentIds"] = o.AttachmentIds
	}
	return toSerialize, nil
}

type NullableSetOfAttachmentIds struct {
	value *SetOfAttachmentIds
	isSet bool
}

func (v NullableSetOfAttachmentIds) Get() *SetOfAttachmentIds {
	return v.value
}

func (v *NullableSetOfAttachmentIds) Set(val *SetOfAttachmentIds) {
	v.value = val
	v.isSet = true
}

func (v NullableSetOfAttachmentIds) IsSet() bool {
	return v.isSet
}

func (v *NullableSetOfAttachmentIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetOfAttachmentIds(val *SetOfAttachmentIds) *NullableSetOfAttachmentIds {
	return &NullableSetOfAttachmentIds{value: val, isSet: true}
}

func (v NullableSetOfAttachmentIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetOfAttachmentIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


