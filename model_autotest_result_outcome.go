/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// AutotestResultOutcome the model 'AutotestResultOutcome'
type AutotestResultOutcome string

// List of AutotestResultOutcome
const (
	AUTOTESTRESULTOUTCOME_IN_PROGRESS AutotestResultOutcome = "InProgress"
	AUTOTESTRESULTOUTCOME_PASSED AutotestResultOutcome = "Passed"
	AUTOTESTRESULTOUTCOME_FAILED AutotestResultOutcome = "Failed"
	AUTOTESTRESULTOUTCOME_SKIPPED AutotestResultOutcome = "Skipped"
	AUTOTESTRESULTOUTCOME_BLOCKED AutotestResultOutcome = "Blocked"
)

// All allowed values of AutotestResultOutcome enum
var AllowedAutotestResultOutcomeEnumValues = []AutotestResultOutcome{
	"InProgress",
	"Passed",
	"Failed",
	"Skipped",
	"Blocked",
}

func (v *AutotestResultOutcome) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutotestResultOutcome(value)
	for _, existing := range AllowedAutotestResultOutcomeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutotestResultOutcome", value)
}

// NewAutotestResultOutcomeFromValue returns a pointer to a valid AutotestResultOutcome
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutotestResultOutcomeFromValue(v string) (*AutotestResultOutcome, error) {
	ev := AutotestResultOutcome(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutotestResultOutcome: valid values are %v", v, AllowedAutotestResultOutcomeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutotestResultOutcome) IsValid() bool {
	for _, existing := range AllowedAutotestResultOutcomeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AutotestResultOutcome value
func (v AutotestResultOutcome) Ptr() *AutotestResultOutcome {
	return &v
}

type NullableAutotestResultOutcome struct {
	value *AutotestResultOutcome
	isSet bool
}

func (v NullableAutotestResultOutcome) Get() *AutotestResultOutcome {
	return v.value
}

func (v *NullableAutotestResultOutcome) Set(val *AutotestResultOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullableAutotestResultOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullableAutotestResultOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutotestResultOutcome(val *AutotestResultOutcome) *NullableAutotestResultOutcome {
	return &NullableAutotestResultOutcome{value: val, isSet: true}
}

func (v NullableAutotestResultOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutotestResultOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

