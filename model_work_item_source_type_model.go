/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WorkItemSourceTypeModel the model 'WorkItemSourceTypeModel'
type WorkItemSourceTypeModel string

// List of WorkItemSourceTypeModel
const (
	WORKITEMSOURCETYPEMODEL_MANUAL WorkItemSourceTypeModel = "Manual"
	WORKITEMSOURCETYPEMODEL_AI WorkItemSourceTypeModel = "AI"
)

// All allowed values of WorkItemSourceTypeModel enum
var AllowedWorkItemSourceTypeModelEnumValues = []WorkItemSourceTypeModel{
	"Manual",
	"AI",
}

func (v *WorkItemSourceTypeModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkItemSourceTypeModel(value)
	for _, existing := range AllowedWorkItemSourceTypeModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkItemSourceTypeModel", value)
}

// NewWorkItemSourceTypeModelFromValue returns a pointer to a valid WorkItemSourceTypeModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkItemSourceTypeModelFromValue(v string) (*WorkItemSourceTypeModel, error) {
	ev := WorkItemSourceTypeModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkItemSourceTypeModel: valid values are %v", v, AllowedWorkItemSourceTypeModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkItemSourceTypeModel) IsValid() bool {
	for _, existing := range AllowedWorkItemSourceTypeModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkItemSourceTypeModel value
func (v WorkItemSourceTypeModel) Ptr() *WorkItemSourceTypeModel {
	return &v
}

type NullableWorkItemSourceTypeModel struct {
	value *WorkItemSourceTypeModel
	isSet bool
}

func (v NullableWorkItemSourceTypeModel) Get() *WorkItemSourceTypeModel {
	return v.value
}

func (v *NullableWorkItemSourceTypeModel) Set(val *WorkItemSourceTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemSourceTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemSourceTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemSourceTypeModel(val *WorkItemSourceTypeModel) *NullableWorkItemSourceTypeModel {
	return &NullableWorkItemSourceTypeModel{value: val, isSet: true}
}

func (v NullableWorkItemSourceTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemSourceTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

