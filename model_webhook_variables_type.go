/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WebhookVariablesType the model 'WebhookVariablesType'
type WebhookVariablesType string

// List of WebhookVariablesType
const (
	WEBHOOKVARIABLESTYPE_VARIABLES_FOR_URL WebhookVariablesType = "VariablesForUrl"
	WEBHOOKVARIABLESTYPE_VARIABLES_FOR_HEADERS WebhookVariablesType = "VariablesForHeaders"
	WEBHOOKVARIABLESTYPE_VARIABLES_FOR_BODY WebhookVariablesType = "VariablesForBody"
)

// All allowed values of WebhookVariablesType enum
var AllowedWebhookVariablesTypeEnumValues = []WebhookVariablesType{
	"VariablesForUrl",
	"VariablesForHeaders",
	"VariablesForBody",
}

func (v *WebhookVariablesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookVariablesType(value)
	for _, existing := range AllowedWebhookVariablesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookVariablesType", value)
}

// NewWebhookVariablesTypeFromValue returns a pointer to a valid WebhookVariablesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookVariablesTypeFromValue(v string) (*WebhookVariablesType, error) {
	ev := WebhookVariablesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookVariablesType: valid values are %v", v, AllowedWebhookVariablesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookVariablesType) IsValid() bool {
	for _, existing := range AllowedWebhookVariablesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookVariablesType value
func (v WebhookVariablesType) Ptr() *WebhookVariablesType {
	return &v
}

type NullableWebhookVariablesType struct {
	value *WebhookVariablesType
	isSet bool
}

func (v NullableWebhookVariablesType) Get() *WebhookVariablesType {
	return v.value
}

func (v *NullableWebhookVariablesType) Set(val *WebhookVariablesType) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookVariablesType) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookVariablesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookVariablesType(val *WebhookVariablesType) *NullableWebhookVariablesType {
	return &NullableWebhookVariablesType{value: val, isSet: true}
}

func (v NullableWebhookVariablesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookVariablesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

