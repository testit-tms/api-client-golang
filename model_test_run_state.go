/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestRunState the model 'TestRunState'
type TestRunState string

// List of TestRunState
const (
	TESTRUNSTATE_NOT_STARTED TestRunState = "NotStarted"
	TESTRUNSTATE_IN_PROGRESS TestRunState = "InProgress"
	TESTRUNSTATE_STOPPED TestRunState = "Stopped"
	TESTRUNSTATE_COMPLETED TestRunState = "Completed"
)

// All allowed values of TestRunState enum
var AllowedTestRunStateEnumValues = []TestRunState{
	"NotStarted",
	"InProgress",
	"Stopped",
	"Completed",
}

func (v *TestRunState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestRunState(value)
	for _, existing := range AllowedTestRunStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestRunState", value)
}

// NewTestRunStateFromValue returns a pointer to a valid TestRunState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestRunStateFromValue(v string) (*TestRunState, error) {
	ev := TestRunState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestRunState: valid values are %v", v, AllowedTestRunStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestRunState) IsValid() bool {
	for _, existing := range AllowedTestRunStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestRunState value
func (v TestRunState) Ptr() *TestRunState {
	return &v
}

type NullableTestRunState struct {
	value *TestRunState
	isSet bool
}

func (v NullableTestRunState) Get() *TestRunState {
	return v.value
}

func (v *NullableTestRunState) Set(val *TestRunState) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunState) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunState(val *TestRunState) *NullableTestRunState {
	return &NullableTestRunState{value: val, isSet: true}
}

func (v NullableTestRunState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

