/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestRunGroupByStatusModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunGroupByStatusModel{}

// TestRunGroupByStatusModel struct for TestRunGroupByStatusModel
type TestRunGroupByStatusModel struct {
	Status string `json:"status"`
	Value int32 `json:"value"`
}

type _TestRunGroupByStatusModel TestRunGroupByStatusModel

// NewTestRunGroupByStatusModel instantiates a new TestRunGroupByStatusModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunGroupByStatusModel(status string, value int32) *TestRunGroupByStatusModel {
	this := TestRunGroupByStatusModel{}
	this.Status = status
	this.Value = value
	return &this
}

// NewTestRunGroupByStatusModelWithDefaults instantiates a new TestRunGroupByStatusModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunGroupByStatusModelWithDefaults() *TestRunGroupByStatusModel {
	this := TestRunGroupByStatusModel{}
	return &this
}

// GetStatus returns the Status field value
func (o *TestRunGroupByStatusModel) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TestRunGroupByStatusModel) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TestRunGroupByStatusModel) SetStatus(v string) {
	o.Status = v
}

// GetValue returns the Value field value
func (o *TestRunGroupByStatusModel) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestRunGroupByStatusModel) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestRunGroupByStatusModel) SetValue(v int32) {
	o.Value = v
}

func (o TestRunGroupByStatusModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunGroupByStatusModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TestRunGroupByStatusModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestRunGroupByStatusModel := _TestRunGroupByStatusModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestRunGroupByStatusModel)

	if err != nil {
		return err
	}

	*o = TestRunGroupByStatusModel(varTestRunGroupByStatusModel)

	return err
}

type NullableTestRunGroupByStatusModel struct {
	value *TestRunGroupByStatusModel
	isSet bool
}

func (v NullableTestRunGroupByStatusModel) Get() *TestRunGroupByStatusModel {
	return v.value
}

func (v *NullableTestRunGroupByStatusModel) Set(val *TestRunGroupByStatusModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunGroupByStatusModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunGroupByStatusModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunGroupByStatusModel(val *TestRunGroupByStatusModel) *NullableTestRunGroupByStatusModel {
	return &NullableTestRunGroupByStatusModel{value: val, isSet: true}
}

func (v NullableTestRunGroupByStatusModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunGroupByStatusModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


