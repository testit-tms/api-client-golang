/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TestPlanChangeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanChangeModel{}

// TestPlanChangeModel struct for TestPlanChangeModel
type TestPlanChangeModel struct {
	Id string `json:"id"`
	TestPlanId string `json:"testPlanId"`
	TestPlanChangedFields TestPlanChangedFieldsViewModel `json:"testPlanChangedFields"`
	CreatedById string `json:"createdById"`
	CreatedDate NullableTime `json:"createdDate,omitempty"`
}

type _TestPlanChangeModel TestPlanChangeModel

// NewTestPlanChangeModel instantiates a new TestPlanChangeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanChangeModel(id string, testPlanId string, testPlanChangedFields TestPlanChangedFieldsViewModel, createdById string) *TestPlanChangeModel {
	this := TestPlanChangeModel{}
	this.Id = id
	this.TestPlanId = testPlanId
	this.TestPlanChangedFields = testPlanChangedFields
	this.CreatedById = createdById
	return &this
}

// NewTestPlanChangeModelWithDefaults instantiates a new TestPlanChangeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanChangeModelWithDefaults() *TestPlanChangeModel {
	this := TestPlanChangeModel{}
	return &this
}

// GetId returns the Id field value
func (o *TestPlanChangeModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestPlanChangeModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestPlanChangeModel) SetId(v string) {
	o.Id = v
}

// GetTestPlanId returns the TestPlanId field value
func (o *TestPlanChangeModel) GetTestPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestPlanId
}

// GetTestPlanIdOk returns a tuple with the TestPlanId field value
// and a boolean to check if the value has been set.
func (o *TestPlanChangeModel) GetTestPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestPlanId, true
}

// SetTestPlanId sets field value
func (o *TestPlanChangeModel) SetTestPlanId(v string) {
	o.TestPlanId = v
}

// GetTestPlanChangedFields returns the TestPlanChangedFields field value
func (o *TestPlanChangeModel) GetTestPlanChangedFields() TestPlanChangedFieldsViewModel {
	if o == nil {
		var ret TestPlanChangedFieldsViewModel
		return ret
	}

	return o.TestPlanChangedFields
}

// GetTestPlanChangedFieldsOk returns a tuple with the TestPlanChangedFields field value
// and a boolean to check if the value has been set.
func (o *TestPlanChangeModel) GetTestPlanChangedFieldsOk() (*TestPlanChangedFieldsViewModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestPlanChangedFields, true
}

// SetTestPlanChangedFields sets field value
func (o *TestPlanChangeModel) SetTestPlanChangedFields(v TestPlanChangedFieldsViewModel) {
	o.TestPlanChangedFields = v
}

// GetCreatedById returns the CreatedById field value
func (o *TestPlanChangeModel) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *TestPlanChangeModel) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *TestPlanChangeModel) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanChangeModel) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate.Get()
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanChangeModel) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedDate.Get(), o.CreatedDate.IsSet()
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *TestPlanChangeModel) HasCreatedDate() bool {
	if o != nil && o.CreatedDate.IsSet() {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given NullableTime and assigns it to the CreatedDate field.
func (o *TestPlanChangeModel) SetCreatedDate(v time.Time) {
	o.CreatedDate.Set(&v)
}
// SetCreatedDateNil sets the value for CreatedDate to be an explicit nil
func (o *TestPlanChangeModel) SetCreatedDateNil() {
	o.CreatedDate.Set(nil)
}

// UnsetCreatedDate ensures that no value is present for CreatedDate, not even an explicit nil
func (o *TestPlanChangeModel) UnsetCreatedDate() {
	o.CreatedDate.Unset()
}

func (o TestPlanChangeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanChangeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["testPlanId"] = o.TestPlanId
	toSerialize["testPlanChangedFields"] = o.TestPlanChangedFields
	toSerialize["createdById"] = o.CreatedById
	if o.CreatedDate.IsSet() {
		toSerialize["createdDate"] = o.CreatedDate.Get()
	}
	return toSerialize, nil
}

func (o *TestPlanChangeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"testPlanId",
		"testPlanChangedFields",
		"createdById",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestPlanChangeModel := _TestPlanChangeModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestPlanChangeModel)

	if err != nil {
		return err
	}

	*o = TestPlanChangeModel(varTestPlanChangeModel)

	return err
}

type NullableTestPlanChangeModel struct {
	value *TestPlanChangeModel
	isSet bool
}

func (v NullableTestPlanChangeModel) Get() *TestPlanChangeModel {
	return v.value
}

func (v *NullableTestPlanChangeModel) Set(val *TestPlanChangeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanChangeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanChangeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanChangeModel(val *TestPlanChangeModel) *NullableTestPlanChangeModel {
	return &NullableTestPlanChangeModel{value: val, isSet: true}
}

func (v NullableTestPlanChangeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanChangeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


