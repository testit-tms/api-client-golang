/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestRunGroupByStatusTypeApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunGroupByStatusTypeApiResult{}

// TestRunGroupByStatusTypeApiResult struct for TestRunGroupByStatusTypeApiResult
type TestRunGroupByStatusTypeApiResult struct {
	Type string `json:"type"`
	Value int32 `json:"value"`
}

type _TestRunGroupByStatusTypeApiResult TestRunGroupByStatusTypeApiResult

// NewTestRunGroupByStatusTypeApiResult instantiates a new TestRunGroupByStatusTypeApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunGroupByStatusTypeApiResult(type_ string, value int32) *TestRunGroupByStatusTypeApiResult {
	this := TestRunGroupByStatusTypeApiResult{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewTestRunGroupByStatusTypeApiResultWithDefaults instantiates a new TestRunGroupByStatusTypeApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunGroupByStatusTypeApiResultWithDefaults() *TestRunGroupByStatusTypeApiResult {
	this := TestRunGroupByStatusTypeApiResult{}
	return &this
}

// GetType returns the Type field value
func (o *TestRunGroupByStatusTypeApiResult) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TestRunGroupByStatusTypeApiResult) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TestRunGroupByStatusTypeApiResult) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *TestRunGroupByStatusTypeApiResult) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestRunGroupByStatusTypeApiResult) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestRunGroupByStatusTypeApiResult) SetValue(v int32) {
	o.Value = v
}

func (o TestRunGroupByStatusTypeApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunGroupByStatusTypeApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TestRunGroupByStatusTypeApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestRunGroupByStatusTypeApiResult := _TestRunGroupByStatusTypeApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestRunGroupByStatusTypeApiResult)

	if err != nil {
		return err
	}

	*o = TestRunGroupByStatusTypeApiResult(varTestRunGroupByStatusTypeApiResult)

	return err
}

type NullableTestRunGroupByStatusTypeApiResult struct {
	value *TestRunGroupByStatusTypeApiResult
	isSet bool
}

func (v NullableTestRunGroupByStatusTypeApiResult) Get() *TestRunGroupByStatusTypeApiResult {
	return v.value
}

func (v *NullableTestRunGroupByStatusTypeApiResult) Set(val *TestRunGroupByStatusTypeApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunGroupByStatusTypeApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunGroupByStatusTypeApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunGroupByStatusTypeApiResult(val *TestRunGroupByStatusTypeApiResult) *NullableTestRunGroupByStatusTypeApiResult {
	return &NullableTestRunGroupByStatusTypeApiResult{value: val, isSet: true}
}

func (v NullableTestRunGroupByStatusTypeApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunGroupByStatusTypeApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


