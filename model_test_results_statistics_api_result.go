/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestResultsStatisticsApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultsStatisticsApiResult{}

// TestResultsStatisticsApiResult struct for TestResultsStatisticsApiResult
type TestResultsStatisticsApiResult struct {
	// Test results counts aggregated by outcome
	Statuses TestResultsStatisticsStatusesApiResult `json:"statuses"`
	// Test results counts aggregated by result failure categories
	FailureCategories TestResultsStatisticsFailureCategoriesApiResult `json:"failureCategories"`
}

type _TestResultsStatisticsApiResult TestResultsStatisticsApiResult

// NewTestResultsStatisticsApiResult instantiates a new TestResultsStatisticsApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultsStatisticsApiResult(statuses TestResultsStatisticsStatusesApiResult, failureCategories TestResultsStatisticsFailureCategoriesApiResult) *TestResultsStatisticsApiResult {
	this := TestResultsStatisticsApiResult{}
	this.Statuses = statuses
	this.FailureCategories = failureCategories
	return &this
}

// NewTestResultsStatisticsApiResultWithDefaults instantiates a new TestResultsStatisticsApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultsStatisticsApiResultWithDefaults() *TestResultsStatisticsApiResult {
	this := TestResultsStatisticsApiResult{}
	return &this
}

// GetStatuses returns the Statuses field value
func (o *TestResultsStatisticsApiResult) GetStatuses() TestResultsStatisticsStatusesApiResult {
	if o == nil {
		var ret TestResultsStatisticsStatusesApiResult
		return ret
	}

	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value
// and a boolean to check if the value has been set.
func (o *TestResultsStatisticsApiResult) GetStatusesOk() (*TestResultsStatisticsStatusesApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statuses, true
}

// SetStatuses sets field value
func (o *TestResultsStatisticsApiResult) SetStatuses(v TestResultsStatisticsStatusesApiResult) {
	o.Statuses = v
}

// GetFailureCategories returns the FailureCategories field value
func (o *TestResultsStatisticsApiResult) GetFailureCategories() TestResultsStatisticsFailureCategoriesApiResult {
	if o == nil {
		var ret TestResultsStatisticsFailureCategoriesApiResult
		return ret
	}

	return o.FailureCategories
}

// GetFailureCategoriesOk returns a tuple with the FailureCategories field value
// and a boolean to check if the value has been set.
func (o *TestResultsStatisticsApiResult) GetFailureCategoriesOk() (*TestResultsStatisticsFailureCategoriesApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureCategories, true
}

// SetFailureCategories sets field value
func (o *TestResultsStatisticsApiResult) SetFailureCategories(v TestResultsStatisticsFailureCategoriesApiResult) {
	o.FailureCategories = v
}

func (o TestResultsStatisticsApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultsStatisticsApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statuses"] = o.Statuses
	toSerialize["failureCategories"] = o.FailureCategories
	return toSerialize, nil
}

func (o *TestResultsStatisticsApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statuses",
		"failureCategories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestResultsStatisticsApiResult := _TestResultsStatisticsApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestResultsStatisticsApiResult)

	if err != nil {
		return err
	}

	*o = TestResultsStatisticsApiResult(varTestResultsStatisticsApiResult)

	return err
}

type NullableTestResultsStatisticsApiResult struct {
	value *TestResultsStatisticsApiResult
	isSet bool
}

func (v NullableTestResultsStatisticsApiResult) Get() *TestResultsStatisticsApiResult {
	return v.value
}

func (v *NullableTestResultsStatisticsApiResult) Set(val *TestResultsStatisticsApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultsStatisticsApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultsStatisticsApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultsStatisticsApiResult(val *TestResultsStatisticsApiResult) *NullableTestResultsStatisticsApiResult {
	return &NullableTestResultsStatisticsApiResult{value: val, isSet: true}
}

func (v NullableTestResultsStatisticsApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultsStatisticsApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


