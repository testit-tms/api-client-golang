/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestStatusApiType Collection of possible status types
type TestStatusApiType string

// List of TestStatusApiType
const (
	TESTSTATUSAPITYPE_PENDING TestStatusApiType = "Pending"
	TESTSTATUSAPITYPE_IN_PROGRESS TestStatusApiType = "InProgress"
	TESTSTATUSAPITYPE_SUCCEEDED TestStatusApiType = "Succeeded"
	TESTSTATUSAPITYPE_FAILED TestStatusApiType = "Failed"
	TESTSTATUSAPITYPE_INCOMPLETE TestStatusApiType = "Incomplete"
)

// All allowed values of TestStatusApiType enum
var AllowedTestStatusApiTypeEnumValues = []TestStatusApiType{
	"Pending",
	"InProgress",
	"Succeeded",
	"Failed",
	"Incomplete",
}

func (v *TestStatusApiType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestStatusApiType(value)
	for _, existing := range AllowedTestStatusApiTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestStatusApiType", value)
}

// NewTestStatusApiTypeFromValue returns a pointer to a valid TestStatusApiType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestStatusApiTypeFromValue(v string) (*TestStatusApiType, error) {
	ev := TestStatusApiType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestStatusApiType: valid values are %v", v, AllowedTestStatusApiTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestStatusApiType) IsValid() bool {
	for _, existing := range AllowedTestStatusApiTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestStatusApiType value
func (v TestStatusApiType) Ptr() *TestStatusApiType {
	return &v
}

type NullableTestStatusApiType struct {
	value *TestStatusApiType
	isSet bool
}

func (v NullableTestStatusApiType) Get() *TestStatusApiType {
	return v.value
}

func (v *NullableTestStatusApiType) Set(val *TestStatusApiType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestStatusApiType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestStatusApiType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestStatusApiType(val *TestStatusApiType) *NullableTestStatusApiType {
	return &NullableTestStatusApiType{value: val, isSet: true}
}

func (v NullableTestStatusApiType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestStatusApiType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

