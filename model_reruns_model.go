/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RerunsModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RerunsModel{}

// RerunsModel struct for RerunsModel
type RerunsModel struct {
	RerunCount int32 `json:"rerunCount"`
	RerunTestResults []RerunTestResultModel `json:"rerunTestResults"`
}

type _RerunsModel RerunsModel

// NewRerunsModel instantiates a new RerunsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRerunsModel(rerunCount int32, rerunTestResults []RerunTestResultModel) *RerunsModel {
	this := RerunsModel{}
	this.RerunCount = rerunCount
	this.RerunTestResults = rerunTestResults
	return &this
}

// NewRerunsModelWithDefaults instantiates a new RerunsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRerunsModelWithDefaults() *RerunsModel {
	this := RerunsModel{}
	return &this
}

// GetRerunCount returns the RerunCount field value
func (o *RerunsModel) GetRerunCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RerunCount
}

// GetRerunCountOk returns a tuple with the RerunCount field value
// and a boolean to check if the value has been set.
func (o *RerunsModel) GetRerunCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RerunCount, true
}

// SetRerunCount sets field value
func (o *RerunsModel) SetRerunCount(v int32) {
	o.RerunCount = v
}

// GetRerunTestResults returns the RerunTestResults field value
func (o *RerunsModel) GetRerunTestResults() []RerunTestResultModel {
	if o == nil {
		var ret []RerunTestResultModel
		return ret
	}

	return o.RerunTestResults
}

// GetRerunTestResultsOk returns a tuple with the RerunTestResults field value
// and a boolean to check if the value has been set.
func (o *RerunsModel) GetRerunTestResultsOk() ([]RerunTestResultModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.RerunTestResults, true
}

// SetRerunTestResults sets field value
func (o *RerunsModel) SetRerunTestResults(v []RerunTestResultModel) {
	o.RerunTestResults = v
}

func (o RerunsModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RerunsModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rerunCount"] = o.RerunCount
	toSerialize["rerunTestResults"] = o.RerunTestResults
	return toSerialize, nil
}

func (o *RerunsModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rerunCount",
		"rerunTestResults",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRerunsModel := _RerunsModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRerunsModel)

	if err != nil {
		return err
	}

	*o = RerunsModel(varRerunsModel)

	return err
}

type NullableRerunsModel struct {
	value *RerunsModel
	isSet bool
}

func (v NullableRerunsModel) Get() *RerunsModel {
	return v.value
}

func (v *NullableRerunsModel) Set(val *RerunsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRerunsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRerunsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRerunsModel(val *RerunsModel) *NullableRerunsModel {
	return &NullableRerunsModel{value: val, isSet: true}
}

func (v NullableRerunsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRerunsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


