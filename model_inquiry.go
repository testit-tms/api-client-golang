/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Inquiry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Inquiry{}

// Inquiry struct for Inquiry
type Inquiry struct {
	Filter NullableCompositeFilter `json:"filter,omitempty"`
	Order []Order `json:"order"`
	Page NullablePage `json:"page,omitempty"`
}

type _Inquiry Inquiry

// NewInquiry instantiates a new Inquiry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInquiry(order []Order) *Inquiry {
	this := Inquiry{}
	this.Order = order
	return &this
}

// NewInquiryWithDefaults instantiates a new Inquiry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInquiryWithDefaults() *Inquiry {
	this := Inquiry{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Inquiry) GetFilter() CompositeFilter {
	if o == nil || IsNil(o.Filter.Get()) {
		var ret CompositeFilter
		return ret
	}
	return *o.Filter.Get()
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Inquiry) GetFilterOk() (*CompositeFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filter.Get(), o.Filter.IsSet()
}

// HasFilter returns a boolean if a field has been set.
func (o *Inquiry) HasFilter() bool {
	if o != nil && o.Filter.IsSet() {
		return true
	}

	return false
}

// SetFilter gets a reference to the given NullableCompositeFilter and assigns it to the Filter field.
func (o *Inquiry) SetFilter(v CompositeFilter) {
	o.Filter.Set(&v)
}
// SetFilterNil sets the value for Filter to be an explicit nil
func (o *Inquiry) SetFilterNil() {
	o.Filter.Set(nil)
}

// UnsetFilter ensures that no value is present for Filter, not even an explicit nil
func (o *Inquiry) UnsetFilter() {
	o.Filter.Unset()
}

// GetOrder returns the Order field value
func (o *Inquiry) GetOrder() []Order {
	if o == nil {
		var ret []Order
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *Inquiry) GetOrderOk() ([]Order, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order, true
}

// SetOrder sets field value
func (o *Inquiry) SetOrder(v []Order) {
	o.Order = v
}

// GetPage returns the Page field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Inquiry) GetPage() Page {
	if o == nil || IsNil(o.Page.Get()) {
		var ret Page
		return ret
	}
	return *o.Page.Get()
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Inquiry) GetPageOk() (*Page, bool) {
	if o == nil {
		return nil, false
	}
	return o.Page.Get(), o.Page.IsSet()
}

// HasPage returns a boolean if a field has been set.
func (o *Inquiry) HasPage() bool {
	if o != nil && o.Page.IsSet() {
		return true
	}

	return false
}

// SetPage gets a reference to the given NullablePage and assigns it to the Page field.
func (o *Inquiry) SetPage(v Page) {
	o.Page.Set(&v)
}
// SetPageNil sets the value for Page to be an explicit nil
func (o *Inquiry) SetPageNil() {
	o.Page.Set(nil)
}

// UnsetPage ensures that no value is present for Page, not even an explicit nil
func (o *Inquiry) UnsetPage() {
	o.Page.Unset()
}

func (o Inquiry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Inquiry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter.IsSet() {
		toSerialize["filter"] = o.Filter.Get()
	}
	toSerialize["order"] = o.Order
	if o.Page.IsSet() {
		toSerialize["page"] = o.Page.Get()
	}
	return toSerialize, nil
}

func (o *Inquiry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInquiry := _Inquiry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInquiry)

	if err != nil {
		return err
	}

	*o = Inquiry(varInquiry)

	return err
}

type NullableInquiry struct {
	value *Inquiry
	isSet bool
}

func (v NullableInquiry) Get() *Inquiry {
	return v.value
}

func (v *NullableInquiry) Set(val *Inquiry) {
	v.value = val
	v.isSet = true
}

func (v NullableInquiry) IsSet() bool {
	return v.isSet
}

func (v *NullableInquiry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInquiry(val *Inquiry) *NullableInquiry {
	return &NullableInquiry{value: val, isSet: true}
}

func (v NullableInquiry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInquiry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


