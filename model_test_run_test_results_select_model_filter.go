/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the TestRunTestResultsSelectModelFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunTestResultsSelectModelFilter{}

// TestRunTestResultsSelectModelFilter Collection of filters to apply to search
type TestRunTestResultsSelectModelFilter struct {
	// Specifies a test result configuration IDs to search for
	ConfigurationIds []string `json:"configurationIds,omitempty"`
	// Specifies a test result outcomes to search for
	Outcomes []TestResultOutcome `json:"outcomes,omitempty"`
	// Specifies a test result failure categories to search for
	FailureCategories []FailureCategoryModel `json:"failureCategories,omitempty"`
	// Specifies a test result namespace to search for
	Namespace NullableString `json:"namespace,omitempty"`
	// Specifies a test result class name to search for
	ClassName NullableString `json:"className,omitempty"`
}

// NewTestRunTestResultsSelectModelFilter instantiates a new TestRunTestResultsSelectModelFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunTestResultsSelectModelFilter() *TestRunTestResultsSelectModelFilter {
	this := TestRunTestResultsSelectModelFilter{}
	return &this
}

// NewTestRunTestResultsSelectModelFilterWithDefaults instantiates a new TestRunTestResultsSelectModelFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunTestResultsSelectModelFilterWithDefaults() *TestRunTestResultsSelectModelFilter {
	this := TestRunTestResultsSelectModelFilter{}
	return &this
}

// GetConfigurationIds returns the ConfigurationIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunTestResultsSelectModelFilter) GetConfigurationIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ConfigurationIds
}

// GetConfigurationIdsOk returns a tuple with the ConfigurationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunTestResultsSelectModelFilter) GetConfigurationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ConfigurationIds) {
		return nil, false
	}
	return o.ConfigurationIds, true
}

// HasConfigurationIds returns a boolean if a field has been set.
func (o *TestRunTestResultsSelectModelFilter) HasConfigurationIds() bool {
	if o != nil && IsNil(o.ConfigurationIds) {
		return true
	}

	return false
}

// SetConfigurationIds gets a reference to the given []string and assigns it to the ConfigurationIds field.
func (o *TestRunTestResultsSelectModelFilter) SetConfigurationIds(v []string) {
	o.ConfigurationIds = v
}

// GetOutcomes returns the Outcomes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunTestResultsSelectModelFilter) GetOutcomes() []TestResultOutcome {
	if o == nil {
		var ret []TestResultOutcome
		return ret
	}
	return o.Outcomes
}

// GetOutcomesOk returns a tuple with the Outcomes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunTestResultsSelectModelFilter) GetOutcomesOk() ([]TestResultOutcome, bool) {
	if o == nil || IsNil(o.Outcomes) {
		return nil, false
	}
	return o.Outcomes, true
}

// HasOutcomes returns a boolean if a field has been set.
func (o *TestRunTestResultsSelectModelFilter) HasOutcomes() bool {
	if o != nil && IsNil(o.Outcomes) {
		return true
	}

	return false
}

// SetOutcomes gets a reference to the given []TestResultOutcome and assigns it to the Outcomes field.
func (o *TestRunTestResultsSelectModelFilter) SetOutcomes(v []TestResultOutcome) {
	o.Outcomes = v
}

// GetFailureCategories returns the FailureCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunTestResultsSelectModelFilter) GetFailureCategories() []FailureCategoryModel {
	if o == nil {
		var ret []FailureCategoryModel
		return ret
	}
	return o.FailureCategories
}

// GetFailureCategoriesOk returns a tuple with the FailureCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunTestResultsSelectModelFilter) GetFailureCategoriesOk() ([]FailureCategoryModel, bool) {
	if o == nil || IsNil(o.FailureCategories) {
		return nil, false
	}
	return o.FailureCategories, true
}

// HasFailureCategories returns a boolean if a field has been set.
func (o *TestRunTestResultsSelectModelFilter) HasFailureCategories() bool {
	if o != nil && IsNil(o.FailureCategories) {
		return true
	}

	return false
}

// SetFailureCategories gets a reference to the given []FailureCategoryModel and assigns it to the FailureCategories field.
func (o *TestRunTestResultsSelectModelFilter) SetFailureCategories(v []FailureCategoryModel) {
	o.FailureCategories = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunTestResultsSelectModelFilter) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunTestResultsSelectModelFilter) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *TestRunTestResultsSelectModelFilter) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *TestRunTestResultsSelectModelFilter) SetNamespace(v string) {
	o.Namespace.Set(&v)
}
// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *TestRunTestResultsSelectModelFilter) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *TestRunTestResultsSelectModelFilter) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetClassName returns the ClassName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunTestResultsSelectModelFilter) GetClassName() string {
	if o == nil || IsNil(o.ClassName.Get()) {
		var ret string
		return ret
	}
	return *o.ClassName.Get()
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunTestResultsSelectModelFilter) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClassName.Get(), o.ClassName.IsSet()
}

// HasClassName returns a boolean if a field has been set.
func (o *TestRunTestResultsSelectModelFilter) HasClassName() bool {
	if o != nil && o.ClassName.IsSet() {
		return true
	}

	return false
}

// SetClassName gets a reference to the given NullableString and assigns it to the ClassName field.
func (o *TestRunTestResultsSelectModelFilter) SetClassName(v string) {
	o.ClassName.Set(&v)
}
// SetClassNameNil sets the value for ClassName to be an explicit nil
func (o *TestRunTestResultsSelectModelFilter) SetClassNameNil() {
	o.ClassName.Set(nil)
}

// UnsetClassName ensures that no value is present for ClassName, not even an explicit nil
func (o *TestRunTestResultsSelectModelFilter) UnsetClassName() {
	o.ClassName.Unset()
}

func (o TestRunTestResultsSelectModelFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunTestResultsSelectModelFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigurationIds != nil {
		toSerialize["configurationIds"] = o.ConfigurationIds
	}
	if o.Outcomes != nil {
		toSerialize["outcomes"] = o.Outcomes
	}
	if o.FailureCategories != nil {
		toSerialize["failureCategories"] = o.FailureCategories
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if o.ClassName.IsSet() {
		toSerialize["className"] = o.ClassName.Get()
	}
	return toSerialize, nil
}

type NullableTestRunTestResultsSelectModelFilter struct {
	value *TestRunTestResultsSelectModelFilter
	isSet bool
}

func (v NullableTestRunTestResultsSelectModelFilter) Get() *TestRunTestResultsSelectModelFilter {
	return v.value
}

func (v *NullableTestRunTestResultsSelectModelFilter) Set(val *TestRunTestResultsSelectModelFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunTestResultsSelectModelFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunTestResultsSelectModelFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunTestResultsSelectModelFilter(val *TestRunTestResultsSelectModelFilter) *NullableTestRunTestResultsSelectModelFilter {
	return &NullableTestRunTestResultsSelectModelFilter{value: val, isSet: true}
}

func (v NullableTestRunTestResultsSelectModelFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunTestResultsSelectModelFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


