/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigurationByParametersModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationByParametersModel{}

// ConfigurationByParametersModel struct for ConfigurationByParametersModel
type ConfigurationByParametersModel struct {
	// This property is used to link configuration with project
	ProjectId string `json:"projectId"`
	ParameterIds []string `json:"parameterIds"`
}

type _ConfigurationByParametersModel ConfigurationByParametersModel

// NewConfigurationByParametersModel instantiates a new ConfigurationByParametersModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationByParametersModel(projectId string, parameterIds []string) *ConfigurationByParametersModel {
	this := ConfigurationByParametersModel{}
	this.ProjectId = projectId
	this.ParameterIds = parameterIds
	return &this
}

// NewConfigurationByParametersModelWithDefaults instantiates a new ConfigurationByParametersModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationByParametersModelWithDefaults() *ConfigurationByParametersModel {
	this := ConfigurationByParametersModel{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *ConfigurationByParametersModel) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ConfigurationByParametersModel) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ConfigurationByParametersModel) SetProjectId(v string) {
	o.ProjectId = v
}

// GetParameterIds returns the ParameterIds field value
func (o *ConfigurationByParametersModel) GetParameterIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ParameterIds
}

// GetParameterIdsOk returns a tuple with the ParameterIds field value
// and a boolean to check if the value has been set.
func (o *ConfigurationByParametersModel) GetParameterIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParameterIds, true
}

// SetParameterIds sets field value
func (o *ConfigurationByParametersModel) SetParameterIds(v []string) {
	o.ParameterIds = v
}

func (o ConfigurationByParametersModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationByParametersModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["parameterIds"] = o.ParameterIds
	return toSerialize, nil
}

func (o *ConfigurationByParametersModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"parameterIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigurationByParametersModel := _ConfigurationByParametersModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigurationByParametersModel)

	if err != nil {
		return err
	}

	*o = ConfigurationByParametersModel(varConfigurationByParametersModel)

	return err
}

type NullableConfigurationByParametersModel struct {
	value *ConfigurationByParametersModel
	isSet bool
}

func (v NullableConfigurationByParametersModel) Get() *ConfigurationByParametersModel {
	return v.value
}

func (v *NullableConfigurationByParametersModel) Set(val *ConfigurationByParametersModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationByParametersModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationByParametersModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationByParametersModel(val *ConfigurationByParametersModel) *NullableConfigurationByParametersModel {
	return &NullableConfigurationByParametersModel{value: val, isSet: true}
}

func (v NullableConfigurationByParametersModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationByParametersModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


