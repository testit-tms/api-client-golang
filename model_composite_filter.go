/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompositeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeFilter{}

// CompositeFilter struct for CompositeFilter
type CompositeFilter struct {
	Filters []map[string]interface{} `json:"filters"`
	Operator LogicalOperator `json:"operator"`
}

type _CompositeFilter CompositeFilter

// NewCompositeFilter instantiates a new CompositeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeFilter(filters []map[string]interface{}, operator LogicalOperator) *CompositeFilter {
	this := CompositeFilter{}
	this.Filters = filters
	this.Operator = operator
	return &this
}

// NewCompositeFilterWithDefaults instantiates a new CompositeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeFilterWithDefaults() *CompositeFilter {
	this := CompositeFilter{}
	return &this
}

// GetFilters returns the Filters field value
func (o *CompositeFilter) GetFilters() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *CompositeFilter) GetFiltersOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *CompositeFilter) SetFilters(v []map[string]interface{}) {
	o.Filters = v
}

// GetOperator returns the Operator field value
func (o *CompositeFilter) GetOperator() LogicalOperator {
	if o == nil {
		var ret LogicalOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *CompositeFilter) GetOperatorOk() (*LogicalOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *CompositeFilter) SetOperator(v LogicalOperator) {
	o.Operator = v
}

func (o CompositeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filters"] = o.Filters
	toSerialize["operator"] = o.Operator
	return toSerialize, nil
}

func (o *CompositeFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filters",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompositeFilter := _CompositeFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompositeFilter)

	if err != nil {
		return err
	}

	*o = CompositeFilter(varCompositeFilter)

	return err
}

type NullableCompositeFilter struct {
	value *CompositeFilter
	isSet bool
}

func (v NullableCompositeFilter) Get() *CompositeFilter {
	return v.value
}

func (v *NullableCompositeFilter) Set(val *CompositeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeFilter(val *CompositeFilter) *NullableCompositeFilter {
	return &NullableCompositeFilter{value: val, isSet: true}
}

func (v NullableCompositeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


