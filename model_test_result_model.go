/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
)

// checks if the TestResultModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultModel{}

// TestResultModel struct for TestResultModel
type TestResultModel struct {
	AutoTestId NullableString `json:"autoTestId,omitempty"`
	ConfigurationId *string `json:"configurationId,omitempty"`
	StartedOn NullableTime `json:"startedOn,omitempty"`
	CompletedOn NullableTime `json:"completedOn,omitempty"`
	DurationInMs NullableInt64 `json:"durationInMs,omitempty"`
	Traces NullableString `json:"traces,omitempty"`
	FailureType NullableString `json:"failureType,omitempty"`
	Message NullableString `json:"message,omitempty"`
	RunByUserId NullableString `json:"runByUserId,omitempty"`
	StoppedByUserId NullableString `json:"stoppedByUserId,omitempty"`
	TestPointId *string `json:"testPointId,omitempty"`
	TestRunId *string `json:"testRunId,omitempty"`
	TestPoint *TestPointPutModel `json:"testPoint,omitempty"`
	AutoTest *AutoTestModel `json:"autoTest,omitempty"`
	AutoTestStepResults []AttachmentModelAutoTestStepResultsModel `json:"autoTestStepResults,omitempty"`
	SetupResults []AttachmentModelAutoTestStepResultsModel `json:"setupResults,omitempty"`
	TeardownResults []AttachmentModelAutoTestStepResultsModel `json:"teardownResults,omitempty"`
	WorkItemVersionId *string `json:"workItemVersionId,omitempty"`
	WorkItemVersionNumber NullableInt32 `json:"workItemVersionNumber,omitempty"`
	Parameters map[string]string `json:"parameters,omitempty"`
	Properties map[string]string `json:"properties,omitempty"`
	Id *string `json:"id,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	ModifiedDate NullableTime `json:"modifiedDate,omitempty"`
	CreatedById *string `json:"createdById,omitempty"`
	ModifiedById NullableString `json:"modifiedById,omitempty"`
	StepComments []StepCommentModel `json:"stepComments,omitempty"`
	FailureClassIds []string `json:"failureClassIds,omitempty"`
	Outcome NullableString `json:"outcome,omitempty"`
	Comment NullableString `json:"comment,omitempty"`
	Links []LinkModel `json:"links,omitempty"`
	StepResults []StepResultModel `json:"stepResults,omitempty"`
	Attachments []AttachmentModel `json:"attachments,omitempty"`
}

// NewTestResultModel instantiates a new TestResultModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultModel() *TestResultModel {
	this := TestResultModel{}
	return &this
}

// NewTestResultModelWithDefaults instantiates a new TestResultModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultModelWithDefaults() *TestResultModel {
	this := TestResultModel{}
	return &this
}

// GetAutoTestId returns the AutoTestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetAutoTestId() string {
	if o == nil || IsNil(o.AutoTestId.Get()) {
		var ret string
		return ret
	}
	return *o.AutoTestId.Get()
}

// GetAutoTestIdOk returns a tuple with the AutoTestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetAutoTestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoTestId.Get(), o.AutoTestId.IsSet()
}

// HasAutoTestId returns a boolean if a field has been set.
func (o *TestResultModel) HasAutoTestId() bool {
	if o != nil && o.AutoTestId.IsSet() {
		return true
	}

	return false
}

// SetAutoTestId gets a reference to the given NullableString and assigns it to the AutoTestId field.
func (o *TestResultModel) SetAutoTestId(v string) {
	o.AutoTestId.Set(&v)
}
// SetAutoTestIdNil sets the value for AutoTestId to be an explicit nil
func (o *TestResultModel) SetAutoTestIdNil() {
	o.AutoTestId.Set(nil)
}

// UnsetAutoTestId ensures that no value is present for AutoTestId, not even an explicit nil
func (o *TestResultModel) UnsetAutoTestId() {
	o.AutoTestId.Unset()
}

// GetConfigurationId returns the ConfigurationId field value if set, zero value otherwise.
func (o *TestResultModel) GetConfigurationId() string {
	if o == nil || IsNil(o.ConfigurationId) {
		var ret string
		return ret
	}
	return *o.ConfigurationId
}

// GetConfigurationIdOk returns a tuple with the ConfigurationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetConfigurationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationId) {
		return nil, false
	}
	return o.ConfigurationId, true
}

// HasConfigurationId returns a boolean if a field has been set.
func (o *TestResultModel) HasConfigurationId() bool {
	if o != nil && !IsNil(o.ConfigurationId) {
		return true
	}

	return false
}

// SetConfigurationId gets a reference to the given string and assigns it to the ConfigurationId field.
func (o *TestResultModel) SetConfigurationId(v string) {
	o.ConfigurationId = &v
}

// GetStartedOn returns the StartedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetStartedOn() time.Time {
	if o == nil || IsNil(o.StartedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedOn.Get()
}

// GetStartedOnOk returns a tuple with the StartedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetStartedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedOn.Get(), o.StartedOn.IsSet()
}

// HasStartedOn returns a boolean if a field has been set.
func (o *TestResultModel) HasStartedOn() bool {
	if o != nil && o.StartedOn.IsSet() {
		return true
	}

	return false
}

// SetStartedOn gets a reference to the given NullableTime and assigns it to the StartedOn field.
func (o *TestResultModel) SetStartedOn(v time.Time) {
	o.StartedOn.Set(&v)
}
// SetStartedOnNil sets the value for StartedOn to be an explicit nil
func (o *TestResultModel) SetStartedOnNil() {
	o.StartedOn.Set(nil)
}

// UnsetStartedOn ensures that no value is present for StartedOn, not even an explicit nil
func (o *TestResultModel) UnsetStartedOn() {
	o.StartedOn.Unset()
}

// GetCompletedOn returns the CompletedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetCompletedOn() time.Time {
	if o == nil || IsNil(o.CompletedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedOn.Get()
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetCompletedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedOn.Get(), o.CompletedOn.IsSet()
}

// HasCompletedOn returns a boolean if a field has been set.
func (o *TestResultModel) HasCompletedOn() bool {
	if o != nil && o.CompletedOn.IsSet() {
		return true
	}

	return false
}

// SetCompletedOn gets a reference to the given NullableTime and assigns it to the CompletedOn field.
func (o *TestResultModel) SetCompletedOn(v time.Time) {
	o.CompletedOn.Set(&v)
}
// SetCompletedOnNil sets the value for CompletedOn to be an explicit nil
func (o *TestResultModel) SetCompletedOnNil() {
	o.CompletedOn.Set(nil)
}

// UnsetCompletedOn ensures that no value is present for CompletedOn, not even an explicit nil
func (o *TestResultModel) UnsetCompletedOn() {
	o.CompletedOn.Unset()
}

// GetDurationInMs returns the DurationInMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetDurationInMs() int64 {
	if o == nil || IsNil(o.DurationInMs.Get()) {
		var ret int64
		return ret
	}
	return *o.DurationInMs.Get()
}

// GetDurationInMsOk returns a tuple with the DurationInMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetDurationInMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationInMs.Get(), o.DurationInMs.IsSet()
}

// HasDurationInMs returns a boolean if a field has been set.
func (o *TestResultModel) HasDurationInMs() bool {
	if o != nil && o.DurationInMs.IsSet() {
		return true
	}

	return false
}

// SetDurationInMs gets a reference to the given NullableInt64 and assigns it to the DurationInMs field.
func (o *TestResultModel) SetDurationInMs(v int64) {
	o.DurationInMs.Set(&v)
}
// SetDurationInMsNil sets the value for DurationInMs to be an explicit nil
func (o *TestResultModel) SetDurationInMsNil() {
	o.DurationInMs.Set(nil)
}

// UnsetDurationInMs ensures that no value is present for DurationInMs, not even an explicit nil
func (o *TestResultModel) UnsetDurationInMs() {
	o.DurationInMs.Unset()
}

// GetTraces returns the Traces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetTraces() string {
	if o == nil || IsNil(o.Traces.Get()) {
		var ret string
		return ret
	}
	return *o.Traces.Get()
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetTracesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traces.Get(), o.Traces.IsSet()
}

// HasTraces returns a boolean if a field has been set.
func (o *TestResultModel) HasTraces() bool {
	if o != nil && o.Traces.IsSet() {
		return true
	}

	return false
}

// SetTraces gets a reference to the given NullableString and assigns it to the Traces field.
func (o *TestResultModel) SetTraces(v string) {
	o.Traces.Set(&v)
}
// SetTracesNil sets the value for Traces to be an explicit nil
func (o *TestResultModel) SetTracesNil() {
	o.Traces.Set(nil)
}

// UnsetTraces ensures that no value is present for Traces, not even an explicit nil
func (o *TestResultModel) UnsetTraces() {
	o.Traces.Unset()
}

// GetFailureType returns the FailureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetFailureType() string {
	if o == nil || IsNil(o.FailureType.Get()) {
		var ret string
		return ret
	}
	return *o.FailureType.Get()
}

// GetFailureTypeOk returns a tuple with the FailureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetFailureTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureType.Get(), o.FailureType.IsSet()
}

// HasFailureType returns a boolean if a field has been set.
func (o *TestResultModel) HasFailureType() bool {
	if o != nil && o.FailureType.IsSet() {
		return true
	}

	return false
}

// SetFailureType gets a reference to the given NullableString and assigns it to the FailureType field.
func (o *TestResultModel) SetFailureType(v string) {
	o.FailureType.Set(&v)
}
// SetFailureTypeNil sets the value for FailureType to be an explicit nil
func (o *TestResultModel) SetFailureTypeNil() {
	o.FailureType.Set(nil)
}

// UnsetFailureType ensures that no value is present for FailureType, not even an explicit nil
func (o *TestResultModel) UnsetFailureType() {
	o.FailureType.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *TestResultModel) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *TestResultModel) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *TestResultModel) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *TestResultModel) UnsetMessage() {
	o.Message.Unset()
}

// GetRunByUserId returns the RunByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetRunByUserId() string {
	if o == nil || IsNil(o.RunByUserId.Get()) {
		var ret string
		return ret
	}
	return *o.RunByUserId.Get()
}

// GetRunByUserIdOk returns a tuple with the RunByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetRunByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunByUserId.Get(), o.RunByUserId.IsSet()
}

// HasRunByUserId returns a boolean if a field has been set.
func (o *TestResultModel) HasRunByUserId() bool {
	if o != nil && o.RunByUserId.IsSet() {
		return true
	}

	return false
}

// SetRunByUserId gets a reference to the given NullableString and assigns it to the RunByUserId field.
func (o *TestResultModel) SetRunByUserId(v string) {
	o.RunByUserId.Set(&v)
}
// SetRunByUserIdNil sets the value for RunByUserId to be an explicit nil
func (o *TestResultModel) SetRunByUserIdNil() {
	o.RunByUserId.Set(nil)
}

// UnsetRunByUserId ensures that no value is present for RunByUserId, not even an explicit nil
func (o *TestResultModel) UnsetRunByUserId() {
	o.RunByUserId.Unset()
}

// GetStoppedByUserId returns the StoppedByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetStoppedByUserId() string {
	if o == nil || IsNil(o.StoppedByUserId.Get()) {
		var ret string
		return ret
	}
	return *o.StoppedByUserId.Get()
}

// GetStoppedByUserIdOk returns a tuple with the StoppedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetStoppedByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoppedByUserId.Get(), o.StoppedByUserId.IsSet()
}

// HasStoppedByUserId returns a boolean if a field has been set.
func (o *TestResultModel) HasStoppedByUserId() bool {
	if o != nil && o.StoppedByUserId.IsSet() {
		return true
	}

	return false
}

// SetStoppedByUserId gets a reference to the given NullableString and assigns it to the StoppedByUserId field.
func (o *TestResultModel) SetStoppedByUserId(v string) {
	o.StoppedByUserId.Set(&v)
}
// SetStoppedByUserIdNil sets the value for StoppedByUserId to be an explicit nil
func (o *TestResultModel) SetStoppedByUserIdNil() {
	o.StoppedByUserId.Set(nil)
}

// UnsetStoppedByUserId ensures that no value is present for StoppedByUserId, not even an explicit nil
func (o *TestResultModel) UnsetStoppedByUserId() {
	o.StoppedByUserId.Unset()
}

// GetTestPointId returns the TestPointId field value if set, zero value otherwise.
func (o *TestResultModel) GetTestPointId() string {
	if o == nil || IsNil(o.TestPointId) {
		var ret string
		return ret
	}
	return *o.TestPointId
}

// GetTestPointIdOk returns a tuple with the TestPointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetTestPointIdOk() (*string, bool) {
	if o == nil || IsNil(o.TestPointId) {
		return nil, false
	}
	return o.TestPointId, true
}

// HasTestPointId returns a boolean if a field has been set.
func (o *TestResultModel) HasTestPointId() bool {
	if o != nil && !IsNil(o.TestPointId) {
		return true
	}

	return false
}

// SetTestPointId gets a reference to the given string and assigns it to the TestPointId field.
func (o *TestResultModel) SetTestPointId(v string) {
	o.TestPointId = &v
}

// GetTestRunId returns the TestRunId field value if set, zero value otherwise.
func (o *TestResultModel) GetTestRunId() string {
	if o == nil || IsNil(o.TestRunId) {
		var ret string
		return ret
	}
	return *o.TestRunId
}

// GetTestRunIdOk returns a tuple with the TestRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetTestRunIdOk() (*string, bool) {
	if o == nil || IsNil(o.TestRunId) {
		return nil, false
	}
	return o.TestRunId, true
}

// HasTestRunId returns a boolean if a field has been set.
func (o *TestResultModel) HasTestRunId() bool {
	if o != nil && !IsNil(o.TestRunId) {
		return true
	}

	return false
}

// SetTestRunId gets a reference to the given string and assigns it to the TestRunId field.
func (o *TestResultModel) SetTestRunId(v string) {
	o.TestRunId = &v
}

// GetTestPoint returns the TestPoint field value if set, zero value otherwise.
func (o *TestResultModel) GetTestPoint() TestPointPutModel {
	if o == nil || IsNil(o.TestPoint) {
		var ret TestPointPutModel
		return ret
	}
	return *o.TestPoint
}

// GetTestPointOk returns a tuple with the TestPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetTestPointOk() (*TestPointPutModel, bool) {
	if o == nil || IsNil(o.TestPoint) {
		return nil, false
	}
	return o.TestPoint, true
}

// HasTestPoint returns a boolean if a field has been set.
func (o *TestResultModel) HasTestPoint() bool {
	if o != nil && !IsNil(o.TestPoint) {
		return true
	}

	return false
}

// SetTestPoint gets a reference to the given TestPointPutModel and assigns it to the TestPoint field.
func (o *TestResultModel) SetTestPoint(v TestPointPutModel) {
	o.TestPoint = &v
}

// GetAutoTest returns the AutoTest field value if set, zero value otherwise.
func (o *TestResultModel) GetAutoTest() AutoTestModel {
	if o == nil || IsNil(o.AutoTest) {
		var ret AutoTestModel
		return ret
	}
	return *o.AutoTest
}

// GetAutoTestOk returns a tuple with the AutoTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetAutoTestOk() (*AutoTestModel, bool) {
	if o == nil || IsNil(o.AutoTest) {
		return nil, false
	}
	return o.AutoTest, true
}

// HasAutoTest returns a boolean if a field has been set.
func (o *TestResultModel) HasAutoTest() bool {
	if o != nil && !IsNil(o.AutoTest) {
		return true
	}

	return false
}

// SetAutoTest gets a reference to the given AutoTestModel and assigns it to the AutoTest field.
func (o *TestResultModel) SetAutoTest(v AutoTestModel) {
	o.AutoTest = &v
}

// GetAutoTestStepResults returns the AutoTestStepResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetAutoTestStepResults() []AttachmentModelAutoTestStepResultsModel {
	if o == nil {
		var ret []AttachmentModelAutoTestStepResultsModel
		return ret
	}
	return o.AutoTestStepResults
}

// GetAutoTestStepResultsOk returns a tuple with the AutoTestStepResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetAutoTestStepResultsOk() ([]AttachmentModelAutoTestStepResultsModel, bool) {
	if o == nil || IsNil(o.AutoTestStepResults) {
		return nil, false
	}
	return o.AutoTestStepResults, true
}

// HasAutoTestStepResults returns a boolean if a field has been set.
func (o *TestResultModel) HasAutoTestStepResults() bool {
	if o != nil && IsNil(o.AutoTestStepResults) {
		return true
	}

	return false
}

// SetAutoTestStepResults gets a reference to the given []AttachmentModelAutoTestStepResultsModel and assigns it to the AutoTestStepResults field.
func (o *TestResultModel) SetAutoTestStepResults(v []AttachmentModelAutoTestStepResultsModel) {
	o.AutoTestStepResults = v
}

// GetSetupResults returns the SetupResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetSetupResults() []AttachmentModelAutoTestStepResultsModel {
	if o == nil {
		var ret []AttachmentModelAutoTestStepResultsModel
		return ret
	}
	return o.SetupResults
}

// GetSetupResultsOk returns a tuple with the SetupResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetSetupResultsOk() ([]AttachmentModelAutoTestStepResultsModel, bool) {
	if o == nil || IsNil(o.SetupResults) {
		return nil, false
	}
	return o.SetupResults, true
}

// HasSetupResults returns a boolean if a field has been set.
func (o *TestResultModel) HasSetupResults() bool {
	if o != nil && IsNil(o.SetupResults) {
		return true
	}

	return false
}

// SetSetupResults gets a reference to the given []AttachmentModelAutoTestStepResultsModel and assigns it to the SetupResults field.
func (o *TestResultModel) SetSetupResults(v []AttachmentModelAutoTestStepResultsModel) {
	o.SetupResults = v
}

// GetTeardownResults returns the TeardownResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetTeardownResults() []AttachmentModelAutoTestStepResultsModel {
	if o == nil {
		var ret []AttachmentModelAutoTestStepResultsModel
		return ret
	}
	return o.TeardownResults
}

// GetTeardownResultsOk returns a tuple with the TeardownResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetTeardownResultsOk() ([]AttachmentModelAutoTestStepResultsModel, bool) {
	if o == nil || IsNil(o.TeardownResults) {
		return nil, false
	}
	return o.TeardownResults, true
}

// HasTeardownResults returns a boolean if a field has been set.
func (o *TestResultModel) HasTeardownResults() bool {
	if o != nil && IsNil(o.TeardownResults) {
		return true
	}

	return false
}

// SetTeardownResults gets a reference to the given []AttachmentModelAutoTestStepResultsModel and assigns it to the TeardownResults field.
func (o *TestResultModel) SetTeardownResults(v []AttachmentModelAutoTestStepResultsModel) {
	o.TeardownResults = v
}

// GetWorkItemVersionId returns the WorkItemVersionId field value if set, zero value otherwise.
func (o *TestResultModel) GetWorkItemVersionId() string {
	if o == nil || IsNil(o.WorkItemVersionId) {
		var ret string
		return ret
	}
	return *o.WorkItemVersionId
}

// GetWorkItemVersionIdOk returns a tuple with the WorkItemVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetWorkItemVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkItemVersionId) {
		return nil, false
	}
	return o.WorkItemVersionId, true
}

// HasWorkItemVersionId returns a boolean if a field has been set.
func (o *TestResultModel) HasWorkItemVersionId() bool {
	if o != nil && !IsNil(o.WorkItemVersionId) {
		return true
	}

	return false
}

// SetWorkItemVersionId gets a reference to the given string and assigns it to the WorkItemVersionId field.
func (o *TestResultModel) SetWorkItemVersionId(v string) {
	o.WorkItemVersionId = &v
}

// GetWorkItemVersionNumber returns the WorkItemVersionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetWorkItemVersionNumber() int32 {
	if o == nil || IsNil(o.WorkItemVersionNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.WorkItemVersionNumber.Get()
}

// GetWorkItemVersionNumberOk returns a tuple with the WorkItemVersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetWorkItemVersionNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemVersionNumber.Get(), o.WorkItemVersionNumber.IsSet()
}

// HasWorkItemVersionNumber returns a boolean if a field has been set.
func (o *TestResultModel) HasWorkItemVersionNumber() bool {
	if o != nil && o.WorkItemVersionNumber.IsSet() {
		return true
	}

	return false
}

// SetWorkItemVersionNumber gets a reference to the given NullableInt32 and assigns it to the WorkItemVersionNumber field.
func (o *TestResultModel) SetWorkItemVersionNumber(v int32) {
	o.WorkItemVersionNumber.Set(&v)
}
// SetWorkItemVersionNumberNil sets the value for WorkItemVersionNumber to be an explicit nil
func (o *TestResultModel) SetWorkItemVersionNumberNil() {
	o.WorkItemVersionNumber.Set(nil)
}

// UnsetWorkItemVersionNumber ensures that no value is present for WorkItemVersionNumber, not even an explicit nil
func (o *TestResultModel) UnsetWorkItemVersionNumber() {
	o.WorkItemVersionNumber.Unset()
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetParameters() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return &o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *TestResultModel) HasParameters() bool {
	if o != nil && IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *TestResultModel) SetParameters(v map[string]string) {
	o.Parameters = v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return &o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TestResultModel) HasProperties() bool {
	if o != nil && IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *TestResultModel) SetProperties(v map[string]string) {
	o.Properties = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestResultModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestResultModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TestResultModel) SetId(v string) {
	o.Id = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *TestResultModel) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *TestResultModel) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *TestResultModel) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetModifiedDate() time.Time {
	if o == nil || IsNil(o.ModifiedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate.Get()
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedDate.Get(), o.ModifiedDate.IsSet()
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *TestResultModel) HasModifiedDate() bool {
	if o != nil && o.ModifiedDate.IsSet() {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given NullableTime and assigns it to the ModifiedDate field.
func (o *TestResultModel) SetModifiedDate(v time.Time) {
	o.ModifiedDate.Set(&v)
}
// SetModifiedDateNil sets the value for ModifiedDate to be an explicit nil
func (o *TestResultModel) SetModifiedDateNil() {
	o.ModifiedDate.Set(nil)
}

// UnsetModifiedDate ensures that no value is present for ModifiedDate, not even an explicit nil
func (o *TestResultModel) UnsetModifiedDate() {
	o.ModifiedDate.Unset()
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise.
func (o *TestResultModel) GetCreatedById() string {
	if o == nil || IsNil(o.CreatedById) {
		var ret string
		return ret
	}
	return *o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultModel) GetCreatedByIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedById) {
		return nil, false
	}
	return o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *TestResultModel) HasCreatedById() bool {
	if o != nil && !IsNil(o.CreatedById) {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given string and assigns it to the CreatedById field.
func (o *TestResultModel) SetCreatedById(v string) {
	o.CreatedById = &v
}

// GetModifiedById returns the ModifiedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetModifiedById() string {
	if o == nil || IsNil(o.ModifiedById.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedById.Get()
}

// GetModifiedByIdOk returns a tuple with the ModifiedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetModifiedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedById.Get(), o.ModifiedById.IsSet()
}

// HasModifiedById returns a boolean if a field has been set.
func (o *TestResultModel) HasModifiedById() bool {
	if o != nil && o.ModifiedById.IsSet() {
		return true
	}

	return false
}

// SetModifiedById gets a reference to the given NullableString and assigns it to the ModifiedById field.
func (o *TestResultModel) SetModifiedById(v string) {
	o.ModifiedById.Set(&v)
}
// SetModifiedByIdNil sets the value for ModifiedById to be an explicit nil
func (o *TestResultModel) SetModifiedByIdNil() {
	o.ModifiedById.Set(nil)
}

// UnsetModifiedById ensures that no value is present for ModifiedById, not even an explicit nil
func (o *TestResultModel) UnsetModifiedById() {
	o.ModifiedById.Unset()
}

// GetStepComments returns the StepComments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetStepComments() []StepCommentModel {
	if o == nil {
		var ret []StepCommentModel
		return ret
	}
	return o.StepComments
}

// GetStepCommentsOk returns a tuple with the StepComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetStepCommentsOk() ([]StepCommentModel, bool) {
	if o == nil || IsNil(o.StepComments) {
		return nil, false
	}
	return o.StepComments, true
}

// HasStepComments returns a boolean if a field has been set.
func (o *TestResultModel) HasStepComments() bool {
	if o != nil && IsNil(o.StepComments) {
		return true
	}

	return false
}

// SetStepComments gets a reference to the given []StepCommentModel and assigns it to the StepComments field.
func (o *TestResultModel) SetStepComments(v []StepCommentModel) {
	o.StepComments = v
}

// GetFailureClassIds returns the FailureClassIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetFailureClassIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.FailureClassIds
}

// GetFailureClassIdsOk returns a tuple with the FailureClassIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetFailureClassIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FailureClassIds) {
		return nil, false
	}
	return o.FailureClassIds, true
}

// HasFailureClassIds returns a boolean if a field has been set.
func (o *TestResultModel) HasFailureClassIds() bool {
	if o != nil && IsNil(o.FailureClassIds) {
		return true
	}

	return false
}

// SetFailureClassIds gets a reference to the given []string and assigns it to the FailureClassIds field.
func (o *TestResultModel) SetFailureClassIds(v []string) {
	o.FailureClassIds = v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetOutcome() string {
	if o == nil || IsNil(o.Outcome.Get()) {
		var ret string
		return ret
	}
	return *o.Outcome.Get()
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetOutcomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outcome.Get(), o.Outcome.IsSet()
}

// HasOutcome returns a boolean if a field has been set.
func (o *TestResultModel) HasOutcome() bool {
	if o != nil && o.Outcome.IsSet() {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given NullableString and assigns it to the Outcome field.
func (o *TestResultModel) SetOutcome(v string) {
	o.Outcome.Set(&v)
}
// SetOutcomeNil sets the value for Outcome to be an explicit nil
func (o *TestResultModel) SetOutcomeNil() {
	o.Outcome.Set(nil)
}

// UnsetOutcome ensures that no value is present for Outcome, not even an explicit nil
func (o *TestResultModel) UnsetOutcome() {
	o.Outcome.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *TestResultModel) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *TestResultModel) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *TestResultModel) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *TestResultModel) UnsetComment() {
	o.Comment.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetLinks() []LinkModel {
	if o == nil {
		var ret []LinkModel
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetLinksOk() ([]LinkModel, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TestResultModel) HasLinks() bool {
	if o != nil && IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkModel and assigns it to the Links field.
func (o *TestResultModel) SetLinks(v []LinkModel) {
	o.Links = v
}

// GetStepResults returns the StepResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetStepResults() []StepResultModel {
	if o == nil {
		var ret []StepResultModel
		return ret
	}
	return o.StepResults
}

// GetStepResultsOk returns a tuple with the StepResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetStepResultsOk() ([]StepResultModel, bool) {
	if o == nil || IsNil(o.StepResults) {
		return nil, false
	}
	return o.StepResults, true
}

// HasStepResults returns a boolean if a field has been set.
func (o *TestResultModel) HasStepResults() bool {
	if o != nil && IsNil(o.StepResults) {
		return true
	}

	return false
}

// SetStepResults gets a reference to the given []StepResultModel and assigns it to the StepResults field.
func (o *TestResultModel) SetStepResults(v []StepResultModel) {
	o.StepResults = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultModel) GetAttachments() []AttachmentModel {
	if o == nil {
		var ret []AttachmentModel
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultModel) GetAttachmentsOk() ([]AttachmentModel, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TestResultModel) HasAttachments() bool {
	if o != nil && IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []AttachmentModel and assigns it to the Attachments field.
func (o *TestResultModel) SetAttachments(v []AttachmentModel) {
	o.Attachments = v
}

func (o TestResultModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoTestId.IsSet() {
		toSerialize["autoTestId"] = o.AutoTestId.Get()
	}
	if !IsNil(o.ConfigurationId) {
		toSerialize["configurationId"] = o.ConfigurationId
	}
	if o.StartedOn.IsSet() {
		toSerialize["startedOn"] = o.StartedOn.Get()
	}
	if o.CompletedOn.IsSet() {
		toSerialize["completedOn"] = o.CompletedOn.Get()
	}
	if o.DurationInMs.IsSet() {
		toSerialize["durationInMs"] = o.DurationInMs.Get()
	}
	if o.Traces.IsSet() {
		toSerialize["traces"] = o.Traces.Get()
	}
	if o.FailureType.IsSet() {
		toSerialize["failureType"] = o.FailureType.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.RunByUserId.IsSet() {
		toSerialize["runByUserId"] = o.RunByUserId.Get()
	}
	if o.StoppedByUserId.IsSet() {
		toSerialize["stoppedByUserId"] = o.StoppedByUserId.Get()
	}
	if !IsNil(o.TestPointId) {
		toSerialize["testPointId"] = o.TestPointId
	}
	if !IsNil(o.TestRunId) {
		toSerialize["testRunId"] = o.TestRunId
	}
	if !IsNil(o.TestPoint) {
		toSerialize["testPoint"] = o.TestPoint
	}
	if !IsNil(o.AutoTest) {
		toSerialize["autoTest"] = o.AutoTest
	}
	if o.AutoTestStepResults != nil {
		toSerialize["autoTestStepResults"] = o.AutoTestStepResults
	}
	if o.SetupResults != nil {
		toSerialize["setupResults"] = o.SetupResults
	}
	if o.TeardownResults != nil {
		toSerialize["teardownResults"] = o.TeardownResults
	}
	if !IsNil(o.WorkItemVersionId) {
		toSerialize["workItemVersionId"] = o.WorkItemVersionId
	}
	if o.WorkItemVersionNumber.IsSet() {
		toSerialize["workItemVersionNumber"] = o.WorkItemVersionNumber.Get()
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if o.ModifiedDate.IsSet() {
		toSerialize["modifiedDate"] = o.ModifiedDate.Get()
	}
	if !IsNil(o.CreatedById) {
		toSerialize["createdById"] = o.CreatedById
	}
	if o.ModifiedById.IsSet() {
		toSerialize["modifiedById"] = o.ModifiedById.Get()
	}
	if o.StepComments != nil {
		toSerialize["stepComments"] = o.StepComments
	}
	if o.FailureClassIds != nil {
		toSerialize["failureClassIds"] = o.FailureClassIds
	}
	if o.Outcome.IsSet() {
		toSerialize["outcome"] = o.Outcome.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.StepResults != nil {
		toSerialize["stepResults"] = o.StepResults
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	return toSerialize, nil
}

type NullableTestResultModel struct {
	value *TestResultModel
	isSet bool
}

func (v NullableTestResultModel) Get() *TestResultModel {
	return v.value
}

func (v *NullableTestResultModel) Set(val *TestResultModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultModel(val *TestResultModel) *NullableTestResultModel {
	return &NullableTestResultModel{value: val, isSet: true}
}

func (v NullableTestResultModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


