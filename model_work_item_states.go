/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WorkItemStates the model 'WorkItemStates'
type WorkItemStates string

// List of WorkItemStates
const (
	WORKITEMSTATES_NEEDS_WORK WorkItemStates = "NeedsWork"
	WORKITEMSTATES_NOT_READY WorkItemStates = "NotReady"
	WORKITEMSTATES_READY WorkItemStates = "Ready"
)

// All allowed values of WorkItemStates enum
var AllowedWorkItemStatesEnumValues = []WorkItemStates{
	"NeedsWork",
	"NotReady",
	"Ready",
}

func (v *WorkItemStates) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkItemStates(value)
	for _, existing := range AllowedWorkItemStatesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkItemStates", value)
}

// NewWorkItemStatesFromValue returns a pointer to a valid WorkItemStates
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkItemStatesFromValue(v string) (*WorkItemStates, error) {
	ev := WorkItemStates(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkItemStates: valid values are %v", v, AllowedWorkItemStatesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkItemStates) IsValid() bool {
	for _, existing := range AllowedWorkItemStatesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkItemStates value
func (v WorkItemStates) Ptr() *WorkItemStates {
	return &v
}

type NullableWorkItemStates struct {
	value *WorkItemStates
	isSet bool
}

func (v NullableWorkItemStates) Get() *WorkItemStates {
	return v.value
}

func (v *NullableWorkItemStates) Set(val *WorkItemStates) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemStates) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemStates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemStates(val *WorkItemStates) *NullableWorkItemStates {
	return &NullableWorkItemStates{value: val, isSet: true}
}

func (v NullableWorkItemStates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemStates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

