/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestStatusType the model 'TestStatusType'
type TestStatusType string

// List of TestStatusType
const (
	TESTSTATUSTYPE_FAILED TestStatusType = "Failed"
	TESTSTATUSTYPE_IN_PROGRESS TestStatusType = "InProgress"
	TESTSTATUSTYPE_INCOMPLETE TestStatusType = "Incomplete"
	TESTSTATUSTYPE_SUCCEEDED TestStatusType = "Succeeded"
	TESTSTATUSTYPE_PENDING TestStatusType = "Pending"
)

// All allowed values of TestStatusType enum
var AllowedTestStatusTypeEnumValues = []TestStatusType{
	"Failed",
	"InProgress",
	"Incomplete",
	"Succeeded",
	"Pending",
}

func (v *TestStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestStatusType(value)
	for _, existing := range AllowedTestStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestStatusType", value)
}

// NewTestStatusTypeFromValue returns a pointer to a valid TestStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestStatusTypeFromValue(v string) (*TestStatusType, error) {
	ev := TestStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestStatusType: valid values are %v", v, AllowedTestStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestStatusType) IsValid() bool {
	for _, existing := range AllowedTestStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestStatusType value
func (v TestStatusType) Ptr() *TestStatusType {
	return &v
}

type NullableTestStatusType struct {
	value *TestStatusType
	isSet bool
}

func (v NullableTestStatusType) Get() *TestStatusType {
	return v.value
}

func (v *NullableTestStatusType) Set(val *TestStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestStatusType(val *TestStatusType) *NullableTestStatusType {
	return &NullableTestStatusType{value: val, isSet: true}
}

func (v NullableTestStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

