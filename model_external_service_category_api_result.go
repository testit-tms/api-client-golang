/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// ExternalServiceCategoryApiResult the model 'ExternalServiceCategoryApiResult'
type ExternalServiceCategoryApiResult string

// List of ExternalServiceCategoryApiResult
const (
	EXTERNALSERVICECATEGORYAPIRESULT_AI ExternalServiceCategoryApiResult = "AI"
	EXTERNALSERVICECATEGORYAPIRESULT_ISSUE_TRACKER ExternalServiceCategoryApiResult = "IssueTracker"
)

// All allowed values of ExternalServiceCategoryApiResult enum
var AllowedExternalServiceCategoryApiResultEnumValues = []ExternalServiceCategoryApiResult{
	"AI",
	"IssueTracker",
}

func (v *ExternalServiceCategoryApiResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalServiceCategoryApiResult(value)
	for _, existing := range AllowedExternalServiceCategoryApiResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalServiceCategoryApiResult", value)
}

// NewExternalServiceCategoryApiResultFromValue returns a pointer to a valid ExternalServiceCategoryApiResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalServiceCategoryApiResultFromValue(v string) (*ExternalServiceCategoryApiResult, error) {
	ev := ExternalServiceCategoryApiResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalServiceCategoryApiResult: valid values are %v", v, AllowedExternalServiceCategoryApiResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalServiceCategoryApiResult) IsValid() bool {
	for _, existing := range AllowedExternalServiceCategoryApiResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExternalServiceCategoryApiResult value
func (v ExternalServiceCategoryApiResult) Ptr() *ExternalServiceCategoryApiResult {
	return &v
}

type NullableExternalServiceCategoryApiResult struct {
	value *ExternalServiceCategoryApiResult
	isSet bool
}

func (v NullableExternalServiceCategoryApiResult) Get() *ExternalServiceCategoryApiResult {
	return v.value
}

func (v *NullableExternalServiceCategoryApiResult) Set(val *ExternalServiceCategoryApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalServiceCategoryApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalServiceCategoryApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalServiceCategoryApiResult(val *ExternalServiceCategoryApiResult) *NullableExternalServiceCategoryApiResult {
	return &NullableExternalServiceCategoryApiResult{value: val, isSet: true}
}

func (v NullableExternalServiceCategoryApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalServiceCategoryApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

