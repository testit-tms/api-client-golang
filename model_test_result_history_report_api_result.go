/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TestResultHistoryReportApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultHistoryReportApiResult{}

// TestResultHistoryReportApiResult struct for TestResultHistoryReportApiResult
type TestResultHistoryReportApiResult struct {
	// Internal test result identifier
	Id string `json:"id"`
	// Test result creation date
	CreatedDate time.Time `json:"createdDate"`
	// Test result last modification date
	ModifiedDate NullableTime `json:"modifiedDate,omitempty"`
	// Internal identifier of user who stopped test run related to the test result or user who created the test result              If test run was stopped, this property equals identifier of user who stopped it. Otherwise, the property equals identifier of user who created the test result
	UserId string `json:"userId"`
	// Identifier of test run related to the test result
	TestRunId NullableString `json:"testRunId,omitempty"`
	// Name of test run related to the test result
	TestRunName NullableString `json:"testRunName,omitempty"`
	// Username of user who created test run
	CreatedByUserName NullableString `json:"createdByUserName,omitempty"`
	// Internal identifier of test plan related to the test result's test run
	TestPlanId NullableString `json:"testPlanId,omitempty"`
	// Global identifier of test plan related to the test result's test run
	TestPlanGlobalId NullableInt64 `json:"testPlanGlobalId,omitempty"`
	// Name of test plan related to the test result's test run
	TestPlanName NullableString `json:"testPlanName,omitempty"`
	// Configuration name of test point related to the test result or from test result itself              If test point related to the test result has configuration, this property will be equal to the test point configuration name. Otherwise, this property will be equal to the test result configuration name
	ConfigurationName NullableString `json:"configurationName,omitempty"`
	// Boolean flag defines if test point related to the test result is automated or not
	IsAutomated bool `json:"isAutomated"`
	// Outcome from test result with max modified date or from first created test result              Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped.              If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equals to the worst outcome of the last modified test result. Otherwise, the outcome equals to the outcome of first created test result in the test run.
	Outcome NullableString `json:"outcome,omitempty"`
	// Status from test result with max modified date or from first created test result
	Status TestStatusApiResult `json:"status"`
	// Test result comment              If any test result related to the test run is linked with autotest, comment will have default value. Otherwise, the comment equals to the comment of first created test result in the test run
	Comment NullableString `json:"comment,omitempty"`
	// Test result links              If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result. Otherwise, the links equals to the links of first created test result in the test run.
	Links []LinkApiResult `json:"links,omitempty"`
	// Start date time from test result or from test run (if test run new state is Running or Completed state)
	StartedOn NullableTime `json:"startedOn,omitempty"`
	// End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)
	CompletedOn NullableTime `json:"completedOn,omitempty"`
	// Duration of first created test result in the test run
	Duration NullableInt64 `json:"duration,omitempty"`
	// Unique identifier of user who created first test result in the test run
	CreatedById string `json:"createdById"`
	// Unique identifier of user who applied last modification of first test result in the test run
	ModifiedById NullableString `json:"modifiedById,omitempty"`
	// Attachments related to the test result              If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified test result. Otherwise, the attachments equals to the attachments of first created test result in the test run.
	Attachments []AttachmentApiResult `json:"attachments,omitempty"`
	// Unique identifier of workitem version related to the first test result in the test run
	WorkItemVersionId NullableString `json:"workItemVersionId,omitempty"`
	// Number of workitem version related to the first test result in the test run
	WorkItemVersionNumber NullableInt32 `json:"workItemVersionNumber,omitempty"`
	LaunchSource NullableString `json:"launchSource,omitempty"`
	// Unique identifier of failure classes related to the first test result in the test run
	FailureClassIds []string `json:"failureClassIds"`
	// Parameters of test result
	Parameters map[string]string `json:"parameters,omitempty"`
}

type _TestResultHistoryReportApiResult TestResultHistoryReportApiResult

// NewTestResultHistoryReportApiResult instantiates a new TestResultHistoryReportApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultHistoryReportApiResult(id string, createdDate time.Time, userId string, isAutomated bool, status TestStatusApiResult, createdById string, failureClassIds []string) *TestResultHistoryReportApiResult {
	this := TestResultHistoryReportApiResult{}
	this.Id = id
	this.CreatedDate = createdDate
	this.UserId = userId
	this.IsAutomated = isAutomated
	this.Status = status
	this.CreatedById = createdById
	this.FailureClassIds = failureClassIds
	return &this
}

// NewTestResultHistoryReportApiResultWithDefaults instantiates a new TestResultHistoryReportApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultHistoryReportApiResultWithDefaults() *TestResultHistoryReportApiResult {
	this := TestResultHistoryReportApiResult{}
	return &this
}

// GetId returns the Id field value
func (o *TestResultHistoryReportApiResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestResultHistoryReportApiResult) SetId(v string) {
	o.Id = v
}

// GetCreatedDate returns the CreatedDate field value
func (o *TestResultHistoryReportApiResult) GetCreatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *TestResultHistoryReportApiResult) SetCreatedDate(v time.Time) {
	o.CreatedDate = v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetModifiedDate() time.Time {
	if o == nil || IsNil(o.ModifiedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate.Get()
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedDate.Get(), o.ModifiedDate.IsSet()
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasModifiedDate() bool {
	if o != nil && o.ModifiedDate.IsSet() {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given NullableTime and assigns it to the ModifiedDate field.
func (o *TestResultHistoryReportApiResult) SetModifiedDate(v time.Time) {
	o.ModifiedDate.Set(&v)
}
// SetModifiedDateNil sets the value for ModifiedDate to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetModifiedDateNil() {
	o.ModifiedDate.Set(nil)
}

// UnsetModifiedDate ensures that no value is present for ModifiedDate, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetModifiedDate() {
	o.ModifiedDate.Unset()
}

// GetUserId returns the UserId field value
func (o *TestResultHistoryReportApiResult) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *TestResultHistoryReportApiResult) SetUserId(v string) {
	o.UserId = v
}

// GetTestRunId returns the TestRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetTestRunId() string {
	if o == nil || IsNil(o.TestRunId.Get()) {
		var ret string
		return ret
	}
	return *o.TestRunId.Get()
}

// GetTestRunIdOk returns a tuple with the TestRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetTestRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestRunId.Get(), o.TestRunId.IsSet()
}

// HasTestRunId returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasTestRunId() bool {
	if o != nil && o.TestRunId.IsSet() {
		return true
	}

	return false
}

// SetTestRunId gets a reference to the given NullableString and assigns it to the TestRunId field.
func (o *TestResultHistoryReportApiResult) SetTestRunId(v string) {
	o.TestRunId.Set(&v)
}
// SetTestRunIdNil sets the value for TestRunId to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetTestRunIdNil() {
	o.TestRunId.Set(nil)
}

// UnsetTestRunId ensures that no value is present for TestRunId, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetTestRunId() {
	o.TestRunId.Unset()
}

// GetTestRunName returns the TestRunName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetTestRunName() string {
	if o == nil || IsNil(o.TestRunName.Get()) {
		var ret string
		return ret
	}
	return *o.TestRunName.Get()
}

// GetTestRunNameOk returns a tuple with the TestRunName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetTestRunNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestRunName.Get(), o.TestRunName.IsSet()
}

// HasTestRunName returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasTestRunName() bool {
	if o != nil && o.TestRunName.IsSet() {
		return true
	}

	return false
}

// SetTestRunName gets a reference to the given NullableString and assigns it to the TestRunName field.
func (o *TestResultHistoryReportApiResult) SetTestRunName(v string) {
	o.TestRunName.Set(&v)
}
// SetTestRunNameNil sets the value for TestRunName to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetTestRunNameNil() {
	o.TestRunName.Set(nil)
}

// UnsetTestRunName ensures that no value is present for TestRunName, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetTestRunName() {
	o.TestRunName.Unset()
}

// GetCreatedByUserName returns the CreatedByUserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetCreatedByUserName() string {
	if o == nil || IsNil(o.CreatedByUserName.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedByUserName.Get()
}

// GetCreatedByUserNameOk returns a tuple with the CreatedByUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetCreatedByUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedByUserName.Get(), o.CreatedByUserName.IsSet()
}

// HasCreatedByUserName returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasCreatedByUserName() bool {
	if o != nil && o.CreatedByUserName.IsSet() {
		return true
	}

	return false
}

// SetCreatedByUserName gets a reference to the given NullableString and assigns it to the CreatedByUserName field.
func (o *TestResultHistoryReportApiResult) SetCreatedByUserName(v string) {
	o.CreatedByUserName.Set(&v)
}
// SetCreatedByUserNameNil sets the value for CreatedByUserName to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetCreatedByUserNameNil() {
	o.CreatedByUserName.Set(nil)
}

// UnsetCreatedByUserName ensures that no value is present for CreatedByUserName, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetCreatedByUserName() {
	o.CreatedByUserName.Unset()
}

// GetTestPlanId returns the TestPlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetTestPlanId() string {
	if o == nil || IsNil(o.TestPlanId.Get()) {
		var ret string
		return ret
	}
	return *o.TestPlanId.Get()
}

// GetTestPlanIdOk returns a tuple with the TestPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetTestPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPlanId.Get(), o.TestPlanId.IsSet()
}

// HasTestPlanId returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasTestPlanId() bool {
	if o != nil && o.TestPlanId.IsSet() {
		return true
	}

	return false
}

// SetTestPlanId gets a reference to the given NullableString and assigns it to the TestPlanId field.
func (o *TestResultHistoryReportApiResult) SetTestPlanId(v string) {
	o.TestPlanId.Set(&v)
}
// SetTestPlanIdNil sets the value for TestPlanId to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetTestPlanIdNil() {
	o.TestPlanId.Set(nil)
}

// UnsetTestPlanId ensures that no value is present for TestPlanId, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetTestPlanId() {
	o.TestPlanId.Unset()
}

// GetTestPlanGlobalId returns the TestPlanGlobalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetTestPlanGlobalId() int64 {
	if o == nil || IsNil(o.TestPlanGlobalId.Get()) {
		var ret int64
		return ret
	}
	return *o.TestPlanGlobalId.Get()
}

// GetTestPlanGlobalIdOk returns a tuple with the TestPlanGlobalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetTestPlanGlobalIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPlanGlobalId.Get(), o.TestPlanGlobalId.IsSet()
}

// HasTestPlanGlobalId returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasTestPlanGlobalId() bool {
	if o != nil && o.TestPlanGlobalId.IsSet() {
		return true
	}

	return false
}

// SetTestPlanGlobalId gets a reference to the given NullableInt64 and assigns it to the TestPlanGlobalId field.
func (o *TestResultHistoryReportApiResult) SetTestPlanGlobalId(v int64) {
	o.TestPlanGlobalId.Set(&v)
}
// SetTestPlanGlobalIdNil sets the value for TestPlanGlobalId to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetTestPlanGlobalIdNil() {
	o.TestPlanGlobalId.Set(nil)
}

// UnsetTestPlanGlobalId ensures that no value is present for TestPlanGlobalId, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetTestPlanGlobalId() {
	o.TestPlanGlobalId.Unset()
}

// GetTestPlanName returns the TestPlanName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetTestPlanName() string {
	if o == nil || IsNil(o.TestPlanName.Get()) {
		var ret string
		return ret
	}
	return *o.TestPlanName.Get()
}

// GetTestPlanNameOk returns a tuple with the TestPlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetTestPlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPlanName.Get(), o.TestPlanName.IsSet()
}

// HasTestPlanName returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasTestPlanName() bool {
	if o != nil && o.TestPlanName.IsSet() {
		return true
	}

	return false
}

// SetTestPlanName gets a reference to the given NullableString and assigns it to the TestPlanName field.
func (o *TestResultHistoryReportApiResult) SetTestPlanName(v string) {
	o.TestPlanName.Set(&v)
}
// SetTestPlanNameNil sets the value for TestPlanName to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetTestPlanNameNil() {
	o.TestPlanName.Set(nil)
}

// UnsetTestPlanName ensures that no value is present for TestPlanName, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetTestPlanName() {
	o.TestPlanName.Unset()
}

// GetConfigurationName returns the ConfigurationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetConfigurationName() string {
	if o == nil || IsNil(o.ConfigurationName.Get()) {
		var ret string
		return ret
	}
	return *o.ConfigurationName.Get()
}

// GetConfigurationNameOk returns a tuple with the ConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetConfigurationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationName.Get(), o.ConfigurationName.IsSet()
}

// HasConfigurationName returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasConfigurationName() bool {
	if o != nil && o.ConfigurationName.IsSet() {
		return true
	}

	return false
}

// SetConfigurationName gets a reference to the given NullableString and assigns it to the ConfigurationName field.
func (o *TestResultHistoryReportApiResult) SetConfigurationName(v string) {
	o.ConfigurationName.Set(&v)
}
// SetConfigurationNameNil sets the value for ConfigurationName to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetConfigurationNameNil() {
	o.ConfigurationName.Set(nil)
}

// UnsetConfigurationName ensures that no value is present for ConfigurationName, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetConfigurationName() {
	o.ConfigurationName.Unset()
}

// GetIsAutomated returns the IsAutomated field value
func (o *TestResultHistoryReportApiResult) GetIsAutomated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAutomated
}

// GetIsAutomatedOk returns a tuple with the IsAutomated field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetIsAutomatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAutomated, true
}

// SetIsAutomated sets field value
func (o *TestResultHistoryReportApiResult) SetIsAutomated(v bool) {
	o.IsAutomated = v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetOutcome() string {
	if o == nil || IsNil(o.Outcome.Get()) {
		var ret string
		return ret
	}
	return *o.Outcome.Get()
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetOutcomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outcome.Get(), o.Outcome.IsSet()
}

// HasOutcome returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasOutcome() bool {
	if o != nil && o.Outcome.IsSet() {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given NullableString and assigns it to the Outcome field.
func (o *TestResultHistoryReportApiResult) SetOutcome(v string) {
	o.Outcome.Set(&v)
}
// SetOutcomeNil sets the value for Outcome to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetOutcomeNil() {
	o.Outcome.Set(nil)
}

// UnsetOutcome ensures that no value is present for Outcome, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetOutcome() {
	o.Outcome.Unset()
}

// GetStatus returns the Status field value
func (o *TestResultHistoryReportApiResult) GetStatus() TestStatusApiResult {
	if o == nil {
		var ret TestStatusApiResult
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetStatusOk() (*TestStatusApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TestResultHistoryReportApiResult) SetStatus(v TestStatusApiResult) {
	o.Status = v
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *TestResultHistoryReportApiResult) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetComment() {
	o.Comment.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetLinks() []LinkApiResult {
	if o == nil {
		var ret []LinkApiResult
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetLinksOk() ([]LinkApiResult, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinkApiResult and assigns it to the Links field.
func (o *TestResultHistoryReportApiResult) SetLinks(v []LinkApiResult) {
	o.Links = v
}

// GetStartedOn returns the StartedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetStartedOn() time.Time {
	if o == nil || IsNil(o.StartedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedOn.Get()
}

// GetStartedOnOk returns a tuple with the StartedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetStartedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedOn.Get(), o.StartedOn.IsSet()
}

// HasStartedOn returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasStartedOn() bool {
	if o != nil && o.StartedOn.IsSet() {
		return true
	}

	return false
}

// SetStartedOn gets a reference to the given NullableTime and assigns it to the StartedOn field.
func (o *TestResultHistoryReportApiResult) SetStartedOn(v time.Time) {
	o.StartedOn.Set(&v)
}
// SetStartedOnNil sets the value for StartedOn to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetStartedOnNil() {
	o.StartedOn.Set(nil)
}

// UnsetStartedOn ensures that no value is present for StartedOn, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetStartedOn() {
	o.StartedOn.Unset()
}

// GetCompletedOn returns the CompletedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetCompletedOn() time.Time {
	if o == nil || IsNil(o.CompletedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedOn.Get()
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetCompletedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedOn.Get(), o.CompletedOn.IsSet()
}

// HasCompletedOn returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasCompletedOn() bool {
	if o != nil && o.CompletedOn.IsSet() {
		return true
	}

	return false
}

// SetCompletedOn gets a reference to the given NullableTime and assigns it to the CompletedOn field.
func (o *TestResultHistoryReportApiResult) SetCompletedOn(v time.Time) {
	o.CompletedOn.Set(&v)
}
// SetCompletedOnNil sets the value for CompletedOn to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetCompletedOnNil() {
	o.CompletedOn.Set(nil)
}

// UnsetCompletedOn ensures that no value is present for CompletedOn, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetCompletedOn() {
	o.CompletedOn.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetDuration() int64 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int64
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt64 and assigns it to the Duration field.
func (o *TestResultHistoryReportApiResult) SetDuration(v int64) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetDuration() {
	o.Duration.Unset()
}

// GetCreatedById returns the CreatedById field value
func (o *TestResultHistoryReportApiResult) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *TestResultHistoryReportApiResult) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetModifiedById returns the ModifiedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetModifiedById() string {
	if o == nil || IsNil(o.ModifiedById.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedById.Get()
}

// GetModifiedByIdOk returns a tuple with the ModifiedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetModifiedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedById.Get(), o.ModifiedById.IsSet()
}

// HasModifiedById returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasModifiedById() bool {
	if o != nil && o.ModifiedById.IsSet() {
		return true
	}

	return false
}

// SetModifiedById gets a reference to the given NullableString and assigns it to the ModifiedById field.
func (o *TestResultHistoryReportApiResult) SetModifiedById(v string) {
	o.ModifiedById.Set(&v)
}
// SetModifiedByIdNil sets the value for ModifiedById to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetModifiedByIdNil() {
	o.ModifiedById.Set(nil)
}

// UnsetModifiedById ensures that no value is present for ModifiedById, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetModifiedById() {
	o.ModifiedById.Unset()
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetAttachments() []AttachmentApiResult {
	if o == nil {
		var ret []AttachmentApiResult
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetAttachmentsOk() ([]AttachmentApiResult, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []AttachmentApiResult and assigns it to the Attachments field.
func (o *TestResultHistoryReportApiResult) SetAttachments(v []AttachmentApiResult) {
	o.Attachments = v
}

// GetWorkItemVersionId returns the WorkItemVersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetWorkItemVersionId() string {
	if o == nil || IsNil(o.WorkItemVersionId.Get()) {
		var ret string
		return ret
	}
	return *o.WorkItemVersionId.Get()
}

// GetWorkItemVersionIdOk returns a tuple with the WorkItemVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetWorkItemVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemVersionId.Get(), o.WorkItemVersionId.IsSet()
}

// HasWorkItemVersionId returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasWorkItemVersionId() bool {
	if o != nil && o.WorkItemVersionId.IsSet() {
		return true
	}

	return false
}

// SetWorkItemVersionId gets a reference to the given NullableString and assigns it to the WorkItemVersionId field.
func (o *TestResultHistoryReportApiResult) SetWorkItemVersionId(v string) {
	o.WorkItemVersionId.Set(&v)
}
// SetWorkItemVersionIdNil sets the value for WorkItemVersionId to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetWorkItemVersionIdNil() {
	o.WorkItemVersionId.Set(nil)
}

// UnsetWorkItemVersionId ensures that no value is present for WorkItemVersionId, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetWorkItemVersionId() {
	o.WorkItemVersionId.Unset()
}

// GetWorkItemVersionNumber returns the WorkItemVersionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetWorkItemVersionNumber() int32 {
	if o == nil || IsNil(o.WorkItemVersionNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.WorkItemVersionNumber.Get()
}

// GetWorkItemVersionNumberOk returns a tuple with the WorkItemVersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetWorkItemVersionNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemVersionNumber.Get(), o.WorkItemVersionNumber.IsSet()
}

// HasWorkItemVersionNumber returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasWorkItemVersionNumber() bool {
	if o != nil && o.WorkItemVersionNumber.IsSet() {
		return true
	}

	return false
}

// SetWorkItemVersionNumber gets a reference to the given NullableInt32 and assigns it to the WorkItemVersionNumber field.
func (o *TestResultHistoryReportApiResult) SetWorkItemVersionNumber(v int32) {
	o.WorkItemVersionNumber.Set(&v)
}
// SetWorkItemVersionNumberNil sets the value for WorkItemVersionNumber to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetWorkItemVersionNumberNil() {
	o.WorkItemVersionNumber.Set(nil)
}

// UnsetWorkItemVersionNumber ensures that no value is present for WorkItemVersionNumber, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetWorkItemVersionNumber() {
	o.WorkItemVersionNumber.Unset()
}

// GetLaunchSource returns the LaunchSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetLaunchSource() string {
	if o == nil || IsNil(o.LaunchSource.Get()) {
		var ret string
		return ret
	}
	return *o.LaunchSource.Get()
}

// GetLaunchSourceOk returns a tuple with the LaunchSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetLaunchSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LaunchSource.Get(), o.LaunchSource.IsSet()
}

// HasLaunchSource returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasLaunchSource() bool {
	if o != nil && o.LaunchSource.IsSet() {
		return true
	}

	return false
}

// SetLaunchSource gets a reference to the given NullableString and assigns it to the LaunchSource field.
func (o *TestResultHistoryReportApiResult) SetLaunchSource(v string) {
	o.LaunchSource.Set(&v)
}
// SetLaunchSourceNil sets the value for LaunchSource to be an explicit nil
func (o *TestResultHistoryReportApiResult) SetLaunchSourceNil() {
	o.LaunchSource.Set(nil)
}

// UnsetLaunchSource ensures that no value is present for LaunchSource, not even an explicit nil
func (o *TestResultHistoryReportApiResult) UnsetLaunchSource() {
	o.LaunchSource.Unset()
}

// GetFailureClassIds returns the FailureClassIds field value
func (o *TestResultHistoryReportApiResult) GetFailureClassIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FailureClassIds
}

// GetFailureClassIdsOk returns a tuple with the FailureClassIds field value
// and a boolean to check if the value has been set.
func (o *TestResultHistoryReportApiResult) GetFailureClassIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureClassIds, true
}

// SetFailureClassIds sets field value
func (o *TestResultHistoryReportApiResult) SetFailureClassIds(v []string) {
	o.FailureClassIds = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultHistoryReportApiResult) GetParameters() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultHistoryReportApiResult) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return &o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *TestResultHistoryReportApiResult) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *TestResultHistoryReportApiResult) SetParameters(v map[string]string) {
	o.Parameters = v
}

func (o TestResultHistoryReportApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultHistoryReportApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdDate"] = o.CreatedDate
	if o.ModifiedDate.IsSet() {
		toSerialize["modifiedDate"] = o.ModifiedDate.Get()
	}
	toSerialize["userId"] = o.UserId
	if o.TestRunId.IsSet() {
		toSerialize["testRunId"] = o.TestRunId.Get()
	}
	if o.TestRunName.IsSet() {
		toSerialize["testRunName"] = o.TestRunName.Get()
	}
	if o.CreatedByUserName.IsSet() {
		toSerialize["createdByUserName"] = o.CreatedByUserName.Get()
	}
	if o.TestPlanId.IsSet() {
		toSerialize["testPlanId"] = o.TestPlanId.Get()
	}
	if o.TestPlanGlobalId.IsSet() {
		toSerialize["testPlanGlobalId"] = o.TestPlanGlobalId.Get()
	}
	if o.TestPlanName.IsSet() {
		toSerialize["testPlanName"] = o.TestPlanName.Get()
	}
	if o.ConfigurationName.IsSet() {
		toSerialize["configurationName"] = o.ConfigurationName.Get()
	}
	toSerialize["isAutomated"] = o.IsAutomated
	if o.Outcome.IsSet() {
		toSerialize["outcome"] = o.Outcome.Get()
	}
	toSerialize["status"] = o.Status
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.StartedOn.IsSet() {
		toSerialize["startedOn"] = o.StartedOn.Get()
	}
	if o.CompletedOn.IsSet() {
		toSerialize["completedOn"] = o.CompletedOn.Get()
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	toSerialize["createdById"] = o.CreatedById
	if o.ModifiedById.IsSet() {
		toSerialize["modifiedById"] = o.ModifiedById.Get()
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.WorkItemVersionId.IsSet() {
		toSerialize["workItemVersionId"] = o.WorkItemVersionId.Get()
	}
	if o.WorkItemVersionNumber.IsSet() {
		toSerialize["workItemVersionNumber"] = o.WorkItemVersionNumber.Get()
	}
	if o.LaunchSource.IsSet() {
		toSerialize["launchSource"] = o.LaunchSource.Get()
	}
	toSerialize["failureClassIds"] = o.FailureClassIds
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *TestResultHistoryReportApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdDate",
		"userId",
		"isAutomated",
		"status",
		"createdById",
		"failureClassIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestResultHistoryReportApiResult := _TestResultHistoryReportApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestResultHistoryReportApiResult)

	if err != nil {
		return err
	}

	*o = TestResultHistoryReportApiResult(varTestResultHistoryReportApiResult)

	return err
}

type NullableTestResultHistoryReportApiResult struct {
	value *TestResultHistoryReportApiResult
	isSet bool
}

func (v NullableTestResultHistoryReportApiResult) Get() *TestResultHistoryReportApiResult {
	return v.value
}

func (v *NullableTestResultHistoryReportApiResult) Set(val *TestResultHistoryReportApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultHistoryReportApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultHistoryReportApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultHistoryReportApiResult(val *TestResultHistoryReportApiResult) *NullableTestResultHistoryReportApiResult {
	return &NullableTestResultHistoryReportApiResult{value: val, isSet: true}
}

func (v NullableTestResultHistoryReportApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultHistoryReportApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


