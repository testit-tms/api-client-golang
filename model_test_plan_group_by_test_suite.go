/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestPlanGroupByTestSuite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanGroupByTestSuite{}

// TestPlanGroupByTestSuite struct for TestPlanGroupByTestSuite
type TestPlanGroupByTestSuite struct {
	TestSuiteId string `json:"testSuiteId"`
	TestSuiteName string `json:"testSuiteName"`
	Value int64 `json:"value"`
}

type _TestPlanGroupByTestSuite TestPlanGroupByTestSuite

// NewTestPlanGroupByTestSuite instantiates a new TestPlanGroupByTestSuite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanGroupByTestSuite(testSuiteId string, testSuiteName string, value int64) *TestPlanGroupByTestSuite {
	this := TestPlanGroupByTestSuite{}
	this.TestSuiteId = testSuiteId
	this.TestSuiteName = testSuiteName
	this.Value = value
	return &this
}

// NewTestPlanGroupByTestSuiteWithDefaults instantiates a new TestPlanGroupByTestSuite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanGroupByTestSuiteWithDefaults() *TestPlanGroupByTestSuite {
	this := TestPlanGroupByTestSuite{}
	return &this
}

// GetTestSuiteId returns the TestSuiteId field value
func (o *TestPlanGroupByTestSuite) GetTestSuiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestSuiteId
}

// GetTestSuiteIdOk returns a tuple with the TestSuiteId field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByTestSuite) GetTestSuiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestSuiteId, true
}

// SetTestSuiteId sets field value
func (o *TestPlanGroupByTestSuite) SetTestSuiteId(v string) {
	o.TestSuiteId = v
}

// GetTestSuiteName returns the TestSuiteName field value
func (o *TestPlanGroupByTestSuite) GetTestSuiteName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestSuiteName
}

// GetTestSuiteNameOk returns a tuple with the TestSuiteName field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByTestSuite) GetTestSuiteNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestSuiteName, true
}

// SetTestSuiteName sets field value
func (o *TestPlanGroupByTestSuite) SetTestSuiteName(v string) {
	o.TestSuiteName = v
}

// GetValue returns the Value field value
func (o *TestPlanGroupByTestSuite) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByTestSuite) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestPlanGroupByTestSuite) SetValue(v int64) {
	o.Value = v
}

func (o TestPlanGroupByTestSuite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanGroupByTestSuite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["testSuiteId"] = o.TestSuiteId
	toSerialize["testSuiteName"] = o.TestSuiteName
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TestPlanGroupByTestSuite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testSuiteId",
		"testSuiteName",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestPlanGroupByTestSuite := _TestPlanGroupByTestSuite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestPlanGroupByTestSuite)

	if err != nil {
		return err
	}

	*o = TestPlanGroupByTestSuite(varTestPlanGroupByTestSuite)

	return err
}

type NullableTestPlanGroupByTestSuite struct {
	value *TestPlanGroupByTestSuite
	isSet bool
}

func (v NullableTestPlanGroupByTestSuite) Get() *TestPlanGroupByTestSuite {
	return v.value
}

func (v *NullableTestPlanGroupByTestSuite) Set(val *TestPlanGroupByTestSuite) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanGroupByTestSuite) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanGroupByTestSuite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanGroupByTestSuite(val *TestPlanGroupByTestSuite) *NullableTestPlanGroupByTestSuite {
	return &NullableTestPlanGroupByTestSuite{value: val, isSet: true}
}

func (v NullableTestPlanGroupByTestSuite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanGroupByTestSuite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


