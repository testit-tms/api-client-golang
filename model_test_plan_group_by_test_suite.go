/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the TestPlanGroupByTestSuite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanGroupByTestSuite{}

// TestPlanGroupByTestSuite struct for TestPlanGroupByTestSuite
type TestPlanGroupByTestSuite struct {
	TestSuiteId string `json:"testSuiteId"`
	TestSuiteName NullableString `json:"testSuiteName,omitempty"`
	Value int64 `json:"value"`
}

// NewTestPlanGroupByTestSuite instantiates a new TestPlanGroupByTestSuite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanGroupByTestSuite(testSuiteId string, value int64) *TestPlanGroupByTestSuite {
	this := TestPlanGroupByTestSuite{}
	this.TestSuiteId = testSuiteId
	this.Value = value
	return &this
}

// NewTestPlanGroupByTestSuiteWithDefaults instantiates a new TestPlanGroupByTestSuite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanGroupByTestSuiteWithDefaults() *TestPlanGroupByTestSuite {
	this := TestPlanGroupByTestSuite{}
	return &this
}

// GetTestSuiteId returns the TestSuiteId field value
func (o *TestPlanGroupByTestSuite) GetTestSuiteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestSuiteId
}

// GetTestSuiteIdOk returns a tuple with the TestSuiteId field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByTestSuite) GetTestSuiteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestSuiteId, true
}

// SetTestSuiteId sets field value
func (o *TestPlanGroupByTestSuite) SetTestSuiteId(v string) {
	o.TestSuiteId = v
}

// GetTestSuiteName returns the TestSuiteName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanGroupByTestSuite) GetTestSuiteName() string {
	if o == nil || IsNil(o.TestSuiteName.Get()) {
		var ret string
		return ret
	}
	return *o.TestSuiteName.Get()
}

// GetTestSuiteNameOk returns a tuple with the TestSuiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanGroupByTestSuite) GetTestSuiteNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestSuiteName.Get(), o.TestSuiteName.IsSet()
}

// HasTestSuiteName returns a boolean if a field has been set.
func (o *TestPlanGroupByTestSuite) HasTestSuiteName() bool {
	if o != nil && o.TestSuiteName.IsSet() {
		return true
	}

	return false
}

// SetTestSuiteName gets a reference to the given NullableString and assigns it to the TestSuiteName field.
func (o *TestPlanGroupByTestSuite) SetTestSuiteName(v string) {
	o.TestSuiteName.Set(&v)
}
// SetTestSuiteNameNil sets the value for TestSuiteName to be an explicit nil
func (o *TestPlanGroupByTestSuite) SetTestSuiteNameNil() {
	o.TestSuiteName.Set(nil)
}

// UnsetTestSuiteName ensures that no value is present for TestSuiteName, not even an explicit nil
func (o *TestPlanGroupByTestSuite) UnsetTestSuiteName() {
	o.TestSuiteName.Unset()
}

// GetValue returns the Value field value
func (o *TestPlanGroupByTestSuite) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByTestSuite) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestPlanGroupByTestSuite) SetValue(v int64) {
	o.Value = v
}

func (o TestPlanGroupByTestSuite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanGroupByTestSuite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["testSuiteId"] = o.TestSuiteId
	if o.TestSuiteName.IsSet() {
		toSerialize["testSuiteName"] = o.TestSuiteName.Get()
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableTestPlanGroupByTestSuite struct {
	value *TestPlanGroupByTestSuite
	isSet bool
}

func (v NullableTestPlanGroupByTestSuite) Get() *TestPlanGroupByTestSuite {
	return v.value
}

func (v *NullableTestPlanGroupByTestSuite) Set(val *TestPlanGroupByTestSuite) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanGroupByTestSuite) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanGroupByTestSuite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanGroupByTestSuite(val *TestPlanGroupByTestSuite) *NullableTestPlanGroupByTestSuite {
	return &NullableTestPlanGroupByTestSuite{value: val, isSet: true}
}

func (v NullableTestPlanGroupByTestSuite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanGroupByTestSuite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


