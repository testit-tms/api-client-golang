/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestRunGroupByFailureClassApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunGroupByFailureClassApiResult{}

// TestRunGroupByFailureClassApiResult struct for TestRunGroupByFailureClassApiResult
type TestRunGroupByFailureClassApiResult struct {
	FailureCategory string `json:"failureCategory"`
	Value int32 `json:"value"`
}

type _TestRunGroupByFailureClassApiResult TestRunGroupByFailureClassApiResult

// NewTestRunGroupByFailureClassApiResult instantiates a new TestRunGroupByFailureClassApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunGroupByFailureClassApiResult(failureCategory string, value int32) *TestRunGroupByFailureClassApiResult {
	this := TestRunGroupByFailureClassApiResult{}
	this.FailureCategory = failureCategory
	this.Value = value
	return &this
}

// NewTestRunGroupByFailureClassApiResultWithDefaults instantiates a new TestRunGroupByFailureClassApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunGroupByFailureClassApiResultWithDefaults() *TestRunGroupByFailureClassApiResult {
	this := TestRunGroupByFailureClassApiResult{}
	return &this
}

// GetFailureCategory returns the FailureCategory field value
func (o *TestRunGroupByFailureClassApiResult) GetFailureCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailureCategory
}

// GetFailureCategoryOk returns a tuple with the FailureCategory field value
// and a boolean to check if the value has been set.
func (o *TestRunGroupByFailureClassApiResult) GetFailureCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureCategory, true
}

// SetFailureCategory sets field value
func (o *TestRunGroupByFailureClassApiResult) SetFailureCategory(v string) {
	o.FailureCategory = v
}

// GetValue returns the Value field value
func (o *TestRunGroupByFailureClassApiResult) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestRunGroupByFailureClassApiResult) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestRunGroupByFailureClassApiResult) SetValue(v int32) {
	o.Value = v
}

func (o TestRunGroupByFailureClassApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunGroupByFailureClassApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["failureCategory"] = o.FailureCategory
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TestRunGroupByFailureClassApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"failureCategory",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestRunGroupByFailureClassApiResult := _TestRunGroupByFailureClassApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestRunGroupByFailureClassApiResult)

	if err != nil {
		return err
	}

	*o = TestRunGroupByFailureClassApiResult(varTestRunGroupByFailureClassApiResult)

	return err
}

type NullableTestRunGroupByFailureClassApiResult struct {
	value *TestRunGroupByFailureClassApiResult
	isSet bool
}

func (v NullableTestRunGroupByFailureClassApiResult) Get() *TestRunGroupByFailureClassApiResult {
	return v.value
}

func (v *NullableTestRunGroupByFailureClassApiResult) Set(val *TestRunGroupByFailureClassApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunGroupByFailureClassApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunGroupByFailureClassApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunGroupByFailureClassApiResult(val *TestRunGroupByFailureClassApiResult) *NullableTestRunGroupByFailureClassApiResult {
	return &NullableTestRunGroupByFailureClassApiResult{value: val, isSet: true}
}

func (v NullableTestRunGroupByFailureClassApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunGroupByFailureClassApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


