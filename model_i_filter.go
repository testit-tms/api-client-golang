/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// IFilter - struct for IFilter
type IFilter struct {
	CollectionFilter *CollectionFilter
	CompositeFilter *CompositeFilter
	Filter *Filter
}

// CollectionFilterAsIFilter is a convenience function that returns CollectionFilter wrapped in IFilter
func CollectionFilterAsIFilter(v *CollectionFilter) IFilter {
	return IFilter{
		CollectionFilter: v,
	}
}

// CompositeFilterAsIFilter is a convenience function that returns CompositeFilter wrapped in IFilter
func CompositeFilterAsIFilter(v *CompositeFilter) IFilter {
	return IFilter{
		CompositeFilter: v,
	}
}

// FilterAsIFilter is a convenience function that returns Filter wrapped in IFilter
func FilterAsIFilter(v *Filter) IFilter {
	return IFilter{
		Filter: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CollectionFilter
	err = newStrictDecoder(data).Decode(&dst.CollectionFilter)
	if err == nil {
		jsonCollectionFilter, _ := json.Marshal(dst.CollectionFilter)
		if string(jsonCollectionFilter) == "{}" { // empty struct
			dst.CollectionFilter = nil
		} else {
			if err = validator.Validate(dst.CollectionFilter); err != nil {
				dst.CollectionFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.CollectionFilter = nil
	}

	// try to unmarshal data into CompositeFilter
	err = newStrictDecoder(data).Decode(&dst.CompositeFilter)
	if err == nil {
		jsonCompositeFilter, _ := json.Marshal(dst.CompositeFilter)
		if string(jsonCompositeFilter) == "{}" { // empty struct
			dst.CompositeFilter = nil
		} else {
			if err = validator.Validate(dst.CompositeFilter); err != nil {
				dst.CompositeFilter = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompositeFilter = nil
	}

	// try to unmarshal data into Filter
	err = newStrictDecoder(data).Decode(&dst.Filter)
	if err == nil {
		jsonFilter, _ := json.Marshal(dst.Filter)
		if string(jsonFilter) == "{}" { // empty struct
			dst.Filter = nil
		} else {
			if err = validator.Validate(dst.Filter); err != nil {
				dst.Filter = nil
			} else {
				match++
			}
		}
	} else {
		dst.Filter = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CollectionFilter = nil
		dst.CompositeFilter = nil
		dst.Filter = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IFilter) MarshalJSON() ([]byte, error) {
	if src.CollectionFilter != nil {
		return json.Marshal(&src.CollectionFilter)
	}

	if src.CompositeFilter != nil {
		return json.Marshal(&src.CompositeFilter)
	}

	if src.Filter != nil {
		return json.Marshal(&src.Filter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IFilter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CollectionFilter != nil {
		return obj.CollectionFilter
	}

	if obj.CompositeFilter != nil {
		return obj.CompositeFilter
	}

	if obj.Filter != nil {
		return obj.Filter
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj IFilter) GetActualInstanceValue() (interface{}) {
	if obj.CollectionFilter != nil {
		return *obj.CollectionFilter
	}

	if obj.CompositeFilter != nil {
		return *obj.CompositeFilter
	}

	if obj.Filter != nil {
		return *obj.Filter
	}

	// all schemas are nil
	return nil
}

type NullableIFilter struct {
	value *IFilter
	isSet bool
}

func (v NullableIFilter) Get() *IFilter {
	return v.value
}

func (v *NullableIFilter) Set(val *IFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIFilter(val *IFilter) *NullableIFilter {
	return &NullableIFilter{value: val, isSet: true}
}

func (v NullableIFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


