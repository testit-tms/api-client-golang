/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// CollectionOperator the model 'CollectionOperator'
type CollectionOperator string

// List of CollectionOperator
const (
	COLLECTIONOPERATOR_ANY CollectionOperator = "Any"
	COLLECTIONOPERATOR_ALL CollectionOperator = "All"
)

// All allowed values of CollectionOperator enum
var AllowedCollectionOperatorEnumValues = []CollectionOperator{
	"Any",
	"All",
}

func (v *CollectionOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CollectionOperator(value)
	for _, existing := range AllowedCollectionOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CollectionOperator", value)
}

// NewCollectionOperatorFromValue returns a pointer to a valid CollectionOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCollectionOperatorFromValue(v string) (*CollectionOperator, error) {
	ev := CollectionOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CollectionOperator: valid values are %v", v, AllowedCollectionOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CollectionOperator) IsValid() bool {
	for _, existing := range AllowedCollectionOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectionOperator value
func (v CollectionOperator) Ptr() *CollectionOperator {
	return &v
}

type NullableCollectionOperator struct {
	value *CollectionOperator
	isSet bool
}

func (v NullableCollectionOperator) Get() *CollectionOperator {
	return v.value
}

func (v *NullableCollectionOperator) Set(val *CollectionOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionOperator(val *CollectionOperator) *NullableCollectionOperator {
	return &NullableCollectionOperator{value: val, isSet: true}
}

func (v NullableCollectionOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

