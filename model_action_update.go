/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// ActionUpdate the model 'ActionUpdate'
type ActionUpdate string

// List of ActionUpdate
const (
	ACTIONUPDATE_ADD ActionUpdate = "Add"
	ACTIONUPDATE_REPLACE ActionUpdate = "Replace"
	ACTIONUPDATE_TO_REMOVE ActionUpdate = "ToRemove"
	ACTIONUPDATE_CLEAR_ALL ActionUpdate = "ClearAll"
)

// All allowed values of ActionUpdate enum
var AllowedActionUpdateEnumValues = []ActionUpdate{
	"Add",
	"Replace",
	"ToRemove",
	"ClearAll",
}

func (v *ActionUpdate) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionUpdate(value)
	for _, existing := range AllowedActionUpdateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionUpdate", value)
}

// NewActionUpdateFromValue returns a pointer to a valid ActionUpdate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionUpdateFromValue(v string) (*ActionUpdate, error) {
	ev := ActionUpdate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionUpdate: valid values are %v", v, AllowedActionUpdateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionUpdate) IsValid() bool {
	for _, existing := range AllowedActionUpdateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionUpdate value
func (v ActionUpdate) Ptr() *ActionUpdate {
	return &v
}

type NullableActionUpdate struct {
	value *ActionUpdate
	isSet bool
}

func (v NullableActionUpdate) Get() *ActionUpdate {
	return v.value
}

func (v *NullableActionUpdate) Set(val *ActionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableActionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableActionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionUpdate(val *ActionUpdate) *NullableActionUpdate {
	return &NullableActionUpdate{value: val, isSet: true}
}

func (v NullableActionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

