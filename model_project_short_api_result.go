/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectShortApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectShortApiResult{}

// ProjectShortApiResult struct for ProjectShortApiResult
type ProjectShortApiResult struct {
	// Unique ID of project
	Id string `json:"id"`
	// Indicates whether the project is deleted
	IsDeleted bool `json:"isDeleted"`
	// Global ID of project
	GlobalId int64 `json:"globalId"`
	// Name of project
	Name string `json:"name"`
	// Type of the project
	Type ProjectType `json:"type"`
	// Indicates if the project is marked as favorite
	IsFavorite bool `json:"isFavorite"`
}

type _ProjectShortApiResult ProjectShortApiResult

// NewProjectShortApiResult instantiates a new ProjectShortApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectShortApiResult(id string, isDeleted bool, globalId int64, name string, type_ ProjectType, isFavorite bool) *ProjectShortApiResult {
	this := ProjectShortApiResult{}
	this.Id = id
	this.IsDeleted = isDeleted
	this.GlobalId = globalId
	this.Name = name
	this.Type = type_
	this.IsFavorite = isFavorite
	return &this
}

// NewProjectShortApiResultWithDefaults instantiates a new ProjectShortApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectShortApiResultWithDefaults() *ProjectShortApiResult {
	this := ProjectShortApiResult{}
	return &this
}

// GetId returns the Id field value
func (o *ProjectShortApiResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectShortApiResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectShortApiResult) SetId(v string) {
	o.Id = v
}

// GetIsDeleted returns the IsDeleted field value
func (o *ProjectShortApiResult) GetIsDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value
// and a boolean to check if the value has been set.
func (o *ProjectShortApiResult) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeleted, true
}

// SetIsDeleted sets field value
func (o *ProjectShortApiResult) SetIsDeleted(v bool) {
	o.IsDeleted = v
}

// GetGlobalId returns the GlobalId field value
func (o *ProjectShortApiResult) GetGlobalId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.GlobalId
}

// GetGlobalIdOk returns a tuple with the GlobalId field value
// and a boolean to check if the value has been set.
func (o *ProjectShortApiResult) GetGlobalIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlobalId, true
}

// SetGlobalId sets field value
func (o *ProjectShortApiResult) SetGlobalId(v int64) {
	o.GlobalId = v
}

// GetName returns the Name field value
func (o *ProjectShortApiResult) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectShortApiResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectShortApiResult) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ProjectShortApiResult) GetType() ProjectType {
	if o == nil {
		var ret ProjectType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProjectShortApiResult) GetTypeOk() (*ProjectType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProjectShortApiResult) SetType(v ProjectType) {
	o.Type = v
}

// GetIsFavorite returns the IsFavorite field value
func (o *ProjectShortApiResult) GetIsFavorite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value
// and a boolean to check if the value has been set.
func (o *ProjectShortApiResult) GetIsFavoriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFavorite, true
}

// SetIsFavorite sets field value
func (o *ProjectShortApiResult) SetIsFavorite(v bool) {
	o.IsFavorite = v
}

func (o ProjectShortApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectShortApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["isDeleted"] = o.IsDeleted
	toSerialize["globalId"] = o.GlobalId
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["isFavorite"] = o.IsFavorite
	return toSerialize, nil
}

func (o *ProjectShortApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"isDeleted",
		"globalId",
		"name",
		"type",
		"isFavorite",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectShortApiResult := _ProjectShortApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectShortApiResult)

	if err != nil {
		return err
	}

	*o = ProjectShortApiResult(varProjectShortApiResult)

	return err
}

type NullableProjectShortApiResult struct {
	value *ProjectShortApiResult
	isSet bool
}

func (v NullableProjectShortApiResult) Get() *ProjectShortApiResult {
	return v.value
}

func (v *NullableProjectShortApiResult) Set(val *ProjectShortApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectShortApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectShortApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectShortApiResult(val *ProjectShortApiResult) *NullableProjectShortApiResult {
	return &NullableProjectShortApiResult{value: val, isSet: true}
}

func (v NullableProjectShortApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectShortApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


