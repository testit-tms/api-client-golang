/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateMultipleAttachmentsApiModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMultipleAttachmentsApiModel{}

// UpdateMultipleAttachmentsApiModel struct for UpdateMultipleAttachmentsApiModel
type UpdateMultipleAttachmentsApiModel struct {
	Action ActionUpdate `json:"action"`
	AttachmentIds []string `json:"attachmentIds,omitempty"`
}

type _UpdateMultipleAttachmentsApiModel UpdateMultipleAttachmentsApiModel

// NewUpdateMultipleAttachmentsApiModel instantiates a new UpdateMultipleAttachmentsApiModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMultipleAttachmentsApiModel(action ActionUpdate) *UpdateMultipleAttachmentsApiModel {
	this := UpdateMultipleAttachmentsApiModel{}
	this.Action = action
	return &this
}

// NewUpdateMultipleAttachmentsApiModelWithDefaults instantiates a new UpdateMultipleAttachmentsApiModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMultipleAttachmentsApiModelWithDefaults() *UpdateMultipleAttachmentsApiModel {
	this := UpdateMultipleAttachmentsApiModel{}
	return &this
}

// GetAction returns the Action field value
func (o *UpdateMultipleAttachmentsApiModel) GetAction() ActionUpdate {
	if o == nil {
		var ret ActionUpdate
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *UpdateMultipleAttachmentsApiModel) GetActionOk() (*ActionUpdate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *UpdateMultipleAttachmentsApiModel) SetAction(v ActionUpdate) {
	o.Action = v
}

// GetAttachmentIds returns the AttachmentIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateMultipleAttachmentsApiModel) GetAttachmentIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AttachmentIds
}

// GetAttachmentIdsOk returns a tuple with the AttachmentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateMultipleAttachmentsApiModel) GetAttachmentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AttachmentIds) {
		return nil, false
	}
	return o.AttachmentIds, true
}

// HasAttachmentIds returns a boolean if a field has been set.
func (o *UpdateMultipleAttachmentsApiModel) HasAttachmentIds() bool {
	if o != nil && !IsNil(o.AttachmentIds) {
		return true
	}

	return false
}

// SetAttachmentIds gets a reference to the given []string and assigns it to the AttachmentIds field.
func (o *UpdateMultipleAttachmentsApiModel) SetAttachmentIds(v []string) {
	o.AttachmentIds = v
}

func (o UpdateMultipleAttachmentsApiModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMultipleAttachmentsApiModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if o.AttachmentIds != nil {
		toSerialize["attachmentIds"] = o.AttachmentIds
	}
	return toSerialize, nil
}

func (o *UpdateMultipleAttachmentsApiModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMultipleAttachmentsApiModel := _UpdateMultipleAttachmentsApiModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMultipleAttachmentsApiModel)

	if err != nil {
		return err
	}

	*o = UpdateMultipleAttachmentsApiModel(varUpdateMultipleAttachmentsApiModel)

	return err
}

type NullableUpdateMultipleAttachmentsApiModel struct {
	value *UpdateMultipleAttachmentsApiModel
	isSet bool
}

func (v NullableUpdateMultipleAttachmentsApiModel) Get() *UpdateMultipleAttachmentsApiModel {
	return v.value
}

func (v *NullableUpdateMultipleAttachmentsApiModel) Set(val *UpdateMultipleAttachmentsApiModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMultipleAttachmentsApiModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMultipleAttachmentsApiModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMultipleAttachmentsApiModel(val *UpdateMultipleAttachmentsApiModel) *NullableUpdateMultipleAttachmentsApiModel {
	return &NullableUpdateMultipleAttachmentsApiModel{value: val, isSet: true}
}

func (v NullableUpdateMultipleAttachmentsApiModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMultipleAttachmentsApiModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


