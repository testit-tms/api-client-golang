/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SectionPostModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SectionPostModel{}

// SectionPostModel struct for SectionPostModel
type SectionPostModel struct {
	Name string `json:"name"`
	ProjectId string `json:"projectId"`
	ParentId NullableString `json:"parentId,omitempty"`
	PreconditionSteps []StepPostModel `json:"preconditionSteps,omitempty"`
	PostconditionSteps []StepPostModel `json:"postconditionSteps,omitempty"`
	Attachments []AttachmentPutModel `json:"attachments"`
}

type _SectionPostModel SectionPostModel

// NewSectionPostModel instantiates a new SectionPostModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionPostModel(name string, projectId string, attachments []AttachmentPutModel) *SectionPostModel {
	this := SectionPostModel{}
	this.Name = name
	this.ProjectId = projectId
	this.Attachments = attachments
	return &this
}

// NewSectionPostModelWithDefaults instantiates a new SectionPostModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionPostModelWithDefaults() *SectionPostModel {
	this := SectionPostModel{}
	return &this
}

// GetName returns the Name field value
func (o *SectionPostModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SectionPostModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SectionPostModel) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *SectionPostModel) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *SectionPostModel) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *SectionPostModel) SetProjectId(v string) {
	o.ProjectId = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionPostModel) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionPostModel) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *SectionPostModel) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *SectionPostModel) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *SectionPostModel) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *SectionPostModel) UnsetParentId() {
	o.ParentId.Unset()
}

// GetPreconditionSteps returns the PreconditionSteps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionPostModel) GetPreconditionSteps() []StepPostModel {
	if o == nil {
		var ret []StepPostModel
		return ret
	}
	return o.PreconditionSteps
}

// GetPreconditionStepsOk returns a tuple with the PreconditionSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionPostModel) GetPreconditionStepsOk() ([]StepPostModel, bool) {
	if o == nil || IsNil(o.PreconditionSteps) {
		return nil, false
	}
	return o.PreconditionSteps, true
}

// HasPreconditionSteps returns a boolean if a field has been set.
func (o *SectionPostModel) HasPreconditionSteps() bool {
	if o != nil && !IsNil(o.PreconditionSteps) {
		return true
	}

	return false
}

// SetPreconditionSteps gets a reference to the given []StepPostModel and assigns it to the PreconditionSteps field.
func (o *SectionPostModel) SetPreconditionSteps(v []StepPostModel) {
	o.PreconditionSteps = v
}

// GetPostconditionSteps returns the PostconditionSteps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionPostModel) GetPostconditionSteps() []StepPostModel {
	if o == nil {
		var ret []StepPostModel
		return ret
	}
	return o.PostconditionSteps
}

// GetPostconditionStepsOk returns a tuple with the PostconditionSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionPostModel) GetPostconditionStepsOk() ([]StepPostModel, bool) {
	if o == nil || IsNil(o.PostconditionSteps) {
		return nil, false
	}
	return o.PostconditionSteps, true
}

// HasPostconditionSteps returns a boolean if a field has been set.
func (o *SectionPostModel) HasPostconditionSteps() bool {
	if o != nil && !IsNil(o.PostconditionSteps) {
		return true
	}

	return false
}

// SetPostconditionSteps gets a reference to the given []StepPostModel and assigns it to the PostconditionSteps field.
func (o *SectionPostModel) SetPostconditionSteps(v []StepPostModel) {
	o.PostconditionSteps = v
}

// GetAttachments returns the Attachments field value
func (o *SectionPostModel) GetAttachments() []AttachmentPutModel {
	if o == nil {
		var ret []AttachmentPutModel
		return ret
	}

	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value
// and a boolean to check if the value has been set.
func (o *SectionPostModel) GetAttachmentsOk() ([]AttachmentPutModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments, true
}

// SetAttachments sets field value
func (o *SectionPostModel) SetAttachments(v []AttachmentPutModel) {
	o.Attachments = v
}

func (o SectionPostModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionPostModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["projectId"] = o.ProjectId
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	if o.PreconditionSteps != nil {
		toSerialize["preconditionSteps"] = o.PreconditionSteps
	}
	if o.PostconditionSteps != nil {
		toSerialize["postconditionSteps"] = o.PostconditionSteps
	}
	toSerialize["attachments"] = o.Attachments
	return toSerialize, nil
}

func (o *SectionPostModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"projectId",
		"attachments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSectionPostModel := _SectionPostModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSectionPostModel)

	if err != nil {
		return err
	}

	*o = SectionPostModel(varSectionPostModel)

	return err
}

type NullableSectionPostModel struct {
	value *SectionPostModel
	isSet bool
}

func (v NullableSectionPostModel) Get() *SectionPostModel {
	return v.value
}

func (v *NullableSectionPostModel) Set(val *SectionPostModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionPostModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionPostModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionPostModel(val *SectionPostModel) *NullableSectionPostModel {
	return &NullableSectionPostModel{value: val, isSet: true}
}

func (v NullableSectionPostModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionPostModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


