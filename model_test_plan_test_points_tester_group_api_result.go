/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestPlanTestPointsTesterGroupApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanTestPointsTesterGroupApiResult{}

// TestPlanTestPointsTesterGroupApiResult struct for TestPlanTestPointsTesterGroupApiResult
type TestPlanTestPointsTesterGroupApiResult struct {
	UserId NullableString `json:"userId"`
	Value int64 `json:"value"`
}

type _TestPlanTestPointsTesterGroupApiResult TestPlanTestPointsTesterGroupApiResult

// NewTestPlanTestPointsTesterGroupApiResult instantiates a new TestPlanTestPointsTesterGroupApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanTestPointsTesterGroupApiResult(userId NullableString, value int64) *TestPlanTestPointsTesterGroupApiResult {
	this := TestPlanTestPointsTesterGroupApiResult{}
	this.UserId = userId
	this.Value = value
	return &this
}

// NewTestPlanTestPointsTesterGroupApiResultWithDefaults instantiates a new TestPlanTestPointsTesterGroupApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanTestPointsTesterGroupApiResultWithDefaults() *TestPlanTestPointsTesterGroupApiResult {
	this := TestPlanTestPointsTesterGroupApiResult{}
	return &this
}

// GetUserId returns the UserId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TestPlanTestPointsTesterGroupApiResult) GetUserId() string {
	if o == nil || o.UserId.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanTestPointsTesterGroupApiResult) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// SetUserId sets field value
func (o *TestPlanTestPointsTesterGroupApiResult) SetUserId(v string) {
	o.UserId.Set(&v)
}

// GetValue returns the Value field value
func (o *TestPlanTestPointsTesterGroupApiResult) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestPlanTestPointsTesterGroupApiResult) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestPlanTestPointsTesterGroupApiResult) SetValue(v int64) {
	o.Value = v
}

func (o TestPlanTestPointsTesterGroupApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanTestPointsTesterGroupApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId.Get()
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TestPlanTestPointsTesterGroupApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestPlanTestPointsTesterGroupApiResult := _TestPlanTestPointsTesterGroupApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestPlanTestPointsTesterGroupApiResult)

	if err != nil {
		return err
	}

	*o = TestPlanTestPointsTesterGroupApiResult(varTestPlanTestPointsTesterGroupApiResult)

	return err
}

type NullableTestPlanTestPointsTesterGroupApiResult struct {
	value *TestPlanTestPointsTesterGroupApiResult
	isSet bool
}

func (v NullableTestPlanTestPointsTesterGroupApiResult) Get() *TestPlanTestPointsTesterGroupApiResult {
	return v.value
}

func (v *NullableTestPlanTestPointsTesterGroupApiResult) Set(val *TestPlanTestPointsTesterGroupApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanTestPointsTesterGroupApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanTestPointsTesterGroupApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanTestPointsTesterGroupApiResult(val *TestPlanTestPointsTesterGroupApiResult) *NullableTestPlanTestPointsTesterGroupApiResult {
	return &NullableTestPlanTestPointsTesterGroupApiResult{value: val, isSet: true}
}

func (v NullableTestPlanTestPointsTesterGroupApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanTestPointsTesterGroupApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


