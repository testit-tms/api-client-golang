/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GlobalSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalSearchResponse{}

// GlobalSearchResponse struct for GlobalSearchResponse
type GlobalSearchResponse struct {
	Results []GlobalSearchItemResult `json:"results"`
	MoreResultsAvailable bool `json:"moreResultsAvailable"`
	AvailableResourceTypes []string `json:"availableResourceTypes"`
}

type _GlobalSearchResponse GlobalSearchResponse

// NewGlobalSearchResponse instantiates a new GlobalSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalSearchResponse(results []GlobalSearchItemResult, moreResultsAvailable bool, availableResourceTypes []string) *GlobalSearchResponse {
	this := GlobalSearchResponse{}
	this.Results = results
	this.MoreResultsAvailable = moreResultsAvailable
	this.AvailableResourceTypes = availableResourceTypes
	return &this
}

// NewGlobalSearchResponseWithDefaults instantiates a new GlobalSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalSearchResponseWithDefaults() *GlobalSearchResponse {
	this := GlobalSearchResponse{}
	return &this
}

// GetResults returns the Results field value
func (o *GlobalSearchResponse) GetResults() []GlobalSearchItemResult {
	if o == nil {
		var ret []GlobalSearchItemResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *GlobalSearchResponse) GetResultsOk() ([]GlobalSearchItemResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *GlobalSearchResponse) SetResults(v []GlobalSearchItemResult) {
	o.Results = v
}

// GetMoreResultsAvailable returns the MoreResultsAvailable field value
func (o *GlobalSearchResponse) GetMoreResultsAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MoreResultsAvailable
}

// GetMoreResultsAvailableOk returns a tuple with the MoreResultsAvailable field value
// and a boolean to check if the value has been set.
func (o *GlobalSearchResponse) GetMoreResultsAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MoreResultsAvailable, true
}

// SetMoreResultsAvailable sets field value
func (o *GlobalSearchResponse) SetMoreResultsAvailable(v bool) {
	o.MoreResultsAvailable = v
}

// GetAvailableResourceTypes returns the AvailableResourceTypes field value
func (o *GlobalSearchResponse) GetAvailableResourceTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AvailableResourceTypes
}

// GetAvailableResourceTypesOk returns a tuple with the AvailableResourceTypes field value
// and a boolean to check if the value has been set.
func (o *GlobalSearchResponse) GetAvailableResourceTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableResourceTypes, true
}

// SetAvailableResourceTypes sets field value
func (o *GlobalSearchResponse) SetAvailableResourceTypes(v []string) {
	o.AvailableResourceTypes = v
}

func (o GlobalSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["results"] = o.Results
	toSerialize["moreResultsAvailable"] = o.MoreResultsAvailable
	toSerialize["availableResourceTypes"] = o.AvailableResourceTypes
	return toSerialize, nil
}

func (o *GlobalSearchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
		"moreResultsAvailable",
		"availableResourceTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalSearchResponse := _GlobalSearchResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGlobalSearchResponse)

	if err != nil {
		return err
	}

	*o = GlobalSearchResponse(varGlobalSearchResponse)

	return err
}

type NullableGlobalSearchResponse struct {
	value *GlobalSearchResponse
	isSet bool
}

func (v NullableGlobalSearchResponse) Get() *GlobalSearchResponse {
	return v.value
}

func (v *NullableGlobalSearchResponse) Set(val *GlobalSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalSearchResponse(val *GlobalSearchResponse) *NullableGlobalSearchResponse {
	return &NullableGlobalSearchResponse{value: val, isSet: true}
}

func (v NullableGlobalSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


