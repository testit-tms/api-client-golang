/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// AvailableTestResultOutcome the model 'AvailableTestResultOutcome'
type AvailableTestResultOutcome string

// List of AvailableTestResultOutcome
const (
	AVAILABLETESTRESULTOUTCOME_PASSED AvailableTestResultOutcome = "Passed"
	AVAILABLETESTRESULTOUTCOME_FAILED AvailableTestResultOutcome = "Failed"
	AVAILABLETESTRESULTOUTCOME_BLOCKED AvailableTestResultOutcome = "Blocked"
	AVAILABLETESTRESULTOUTCOME_SKIPPED AvailableTestResultOutcome = "Skipped"
)

// All allowed values of AvailableTestResultOutcome enum
var AllowedAvailableTestResultOutcomeEnumValues = []AvailableTestResultOutcome{
	"Passed",
	"Failed",
	"Blocked",
	"Skipped",
}

func (v *AvailableTestResultOutcome) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailableTestResultOutcome(value)
	for _, existing := range AllowedAvailableTestResultOutcomeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailableTestResultOutcome", value)
}

// NewAvailableTestResultOutcomeFromValue returns a pointer to a valid AvailableTestResultOutcome
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailableTestResultOutcomeFromValue(v string) (*AvailableTestResultOutcome, error) {
	ev := AvailableTestResultOutcome(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailableTestResultOutcome: valid values are %v", v, AllowedAvailableTestResultOutcomeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailableTestResultOutcome) IsValid() bool {
	for _, existing := range AllowedAvailableTestResultOutcomeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailableTestResultOutcome value
func (v AvailableTestResultOutcome) Ptr() *AvailableTestResultOutcome {
	return &v
}

type NullableAvailableTestResultOutcome struct {
	value *AvailableTestResultOutcome
	isSet bool
}

func (v NullableAvailableTestResultOutcome) Get() *AvailableTestResultOutcome {
	return v.value
}

func (v *NullableAvailableTestResultOutcome) Set(val *AvailableTestResultOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableTestResultOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableTestResultOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableTestResultOutcome(val *AvailableTestResultOutcome) *NullableAvailableTestResultOutcome {
	return &NullableAvailableTestResultOutcome{value: val, isSet: true}
}

func (v NullableAvailableTestResultOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableTestResultOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

