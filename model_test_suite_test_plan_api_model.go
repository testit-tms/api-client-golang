/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestSuiteTestPlanApiModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteTestPlanApiModel{}

// TestSuiteTestPlanApiModel struct for TestSuiteTestPlanApiModel
type TestSuiteTestPlanApiModel struct {
	// Test suite nane
	Name string `json:"name"`
	// Configuration identifiers. Empty configurations means using default configurations
	ConfigurationIds []string `json:"configurationIds,omitempty"`
	// Type of the test suite
	Type NullableTestSuiteType `json:"type,omitempty"`
	// Indicates if the test suite retains section tree structure
	SaveStructure NullableBool `json:"saveStructure,omitempty"`
	// Model containing options to filter work items
	WorkItemsSelector WorkItemSelectModel `json:"workItemsSelector"`
}

type _TestSuiteTestPlanApiModel TestSuiteTestPlanApiModel

// NewTestSuiteTestPlanApiModel instantiates a new TestSuiteTestPlanApiModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteTestPlanApiModel(name string, workItemsSelector WorkItemSelectModel) *TestSuiteTestPlanApiModel {
	this := TestSuiteTestPlanApiModel{}
	this.Name = name
	this.WorkItemsSelector = workItemsSelector
	return &this
}

// NewTestSuiteTestPlanApiModelWithDefaults instantiates a new TestSuiteTestPlanApiModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteTestPlanApiModelWithDefaults() *TestSuiteTestPlanApiModel {
	this := TestSuiteTestPlanApiModel{}
	return &this
}

// GetName returns the Name field value
func (o *TestSuiteTestPlanApiModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TestSuiteTestPlanApiModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TestSuiteTestPlanApiModel) SetName(v string) {
	o.Name = v
}

// GetConfigurationIds returns the ConfigurationIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteTestPlanApiModel) GetConfigurationIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ConfigurationIds
}

// GetConfigurationIdsOk returns a tuple with the ConfigurationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteTestPlanApiModel) GetConfigurationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ConfigurationIds) {
		return nil, false
	}
	return o.ConfigurationIds, true
}

// HasConfigurationIds returns a boolean if a field has been set.
func (o *TestSuiteTestPlanApiModel) HasConfigurationIds() bool {
	if o != nil && !IsNil(o.ConfigurationIds) {
		return true
	}

	return false
}

// SetConfigurationIds gets a reference to the given []string and assigns it to the ConfigurationIds field.
func (o *TestSuiteTestPlanApiModel) SetConfigurationIds(v []string) {
	o.ConfigurationIds = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteTestPlanApiModel) GetType() TestSuiteType {
	if o == nil || IsNil(o.Type.Get()) {
		var ret TestSuiteType
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteTestPlanApiModel) GetTypeOk() (*TestSuiteType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *TestSuiteTestPlanApiModel) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableTestSuiteType and assigns it to the Type field.
func (o *TestSuiteTestPlanApiModel) SetType(v TestSuiteType) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *TestSuiteTestPlanApiModel) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *TestSuiteTestPlanApiModel) UnsetType() {
	o.Type.Unset()
}

// GetSaveStructure returns the SaveStructure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteTestPlanApiModel) GetSaveStructure() bool {
	if o == nil || IsNil(o.SaveStructure.Get()) {
		var ret bool
		return ret
	}
	return *o.SaveStructure.Get()
}

// GetSaveStructureOk returns a tuple with the SaveStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteTestPlanApiModel) GetSaveStructureOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaveStructure.Get(), o.SaveStructure.IsSet()
}

// HasSaveStructure returns a boolean if a field has been set.
func (o *TestSuiteTestPlanApiModel) HasSaveStructure() bool {
	if o != nil && o.SaveStructure.IsSet() {
		return true
	}

	return false
}

// SetSaveStructure gets a reference to the given NullableBool and assigns it to the SaveStructure field.
func (o *TestSuiteTestPlanApiModel) SetSaveStructure(v bool) {
	o.SaveStructure.Set(&v)
}
// SetSaveStructureNil sets the value for SaveStructure to be an explicit nil
func (o *TestSuiteTestPlanApiModel) SetSaveStructureNil() {
	o.SaveStructure.Set(nil)
}

// UnsetSaveStructure ensures that no value is present for SaveStructure, not even an explicit nil
func (o *TestSuiteTestPlanApiModel) UnsetSaveStructure() {
	o.SaveStructure.Unset()
}

// GetWorkItemsSelector returns the WorkItemsSelector field value
func (o *TestSuiteTestPlanApiModel) GetWorkItemsSelector() WorkItemSelectModel {
	if o == nil {
		var ret WorkItemSelectModel
		return ret
	}

	return o.WorkItemsSelector
}

// GetWorkItemsSelectorOk returns a tuple with the WorkItemsSelector field value
// and a boolean to check if the value has been set.
func (o *TestSuiteTestPlanApiModel) GetWorkItemsSelectorOk() (*WorkItemSelectModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkItemsSelector, true
}

// SetWorkItemsSelector sets field value
func (o *TestSuiteTestPlanApiModel) SetWorkItemsSelector(v WorkItemSelectModel) {
	o.WorkItemsSelector = v
}

func (o TestSuiteTestPlanApiModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteTestPlanApiModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.ConfigurationIds != nil {
		toSerialize["configurationIds"] = o.ConfigurationIds
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.SaveStructure.IsSet() {
		toSerialize["saveStructure"] = o.SaveStructure.Get()
	}
	toSerialize["workItemsSelector"] = o.WorkItemsSelector
	return toSerialize, nil
}

func (o *TestSuiteTestPlanApiModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"workItemsSelector",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuiteTestPlanApiModel := _TestSuiteTestPlanApiModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestSuiteTestPlanApiModel)

	if err != nil {
		return err
	}

	*o = TestSuiteTestPlanApiModel(varTestSuiteTestPlanApiModel)

	return err
}

type NullableTestSuiteTestPlanApiModel struct {
	value *TestSuiteTestPlanApiModel
	isSet bool
}

func (v NullableTestSuiteTestPlanApiModel) Get() *TestSuiteTestPlanApiModel {
	return v.value
}

func (v *NullableTestSuiteTestPlanApiModel) Set(val *TestSuiteTestPlanApiModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteTestPlanApiModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteTestPlanApiModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteTestPlanApiModel(val *TestSuiteTestPlanApiModel) *NullableTestSuiteTestPlanApiModel {
	return &NullableTestSuiteTestPlanApiModel{value: val, isSet: true}
}

func (v NullableTestSuiteTestPlanApiModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteTestPlanApiModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


