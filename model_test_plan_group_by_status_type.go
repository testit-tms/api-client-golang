/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestPlanGroupByStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanGroupByStatusType{}

// TestPlanGroupByStatusType struct for TestPlanGroupByStatusType
type TestPlanGroupByStatusType struct {
	StatusType TestStatusType `json:"statusType"`
	Value int64 `json:"value"`
}

type _TestPlanGroupByStatusType TestPlanGroupByStatusType

// NewTestPlanGroupByStatusType instantiates a new TestPlanGroupByStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanGroupByStatusType(statusType TestStatusType, value int64) *TestPlanGroupByStatusType {
	this := TestPlanGroupByStatusType{}
	this.StatusType = statusType
	this.Value = value
	return &this
}

// NewTestPlanGroupByStatusTypeWithDefaults instantiates a new TestPlanGroupByStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanGroupByStatusTypeWithDefaults() *TestPlanGroupByStatusType {
	this := TestPlanGroupByStatusType{}
	return &this
}

// GetStatusType returns the StatusType field value
func (o *TestPlanGroupByStatusType) GetStatusType() TestStatusType {
	if o == nil {
		var ret TestStatusType
		return ret
	}

	return o.StatusType
}

// GetStatusTypeOk returns a tuple with the StatusType field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByStatusType) GetStatusTypeOk() (*TestStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusType, true
}

// SetStatusType sets field value
func (o *TestPlanGroupByStatusType) SetStatusType(v TestStatusType) {
	o.StatusType = v
}

// GetValue returns the Value field value
func (o *TestPlanGroupByStatusType) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TestPlanGroupByStatusType) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TestPlanGroupByStatusType) SetValue(v int64) {
	o.Value = v
}

func (o TestPlanGroupByStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanGroupByStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statusType"] = o.StatusType
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *TestPlanGroupByStatusType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statusType",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestPlanGroupByStatusType := _TestPlanGroupByStatusType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestPlanGroupByStatusType)

	if err != nil {
		return err
	}

	*o = TestPlanGroupByStatusType(varTestPlanGroupByStatusType)

	return err
}

type NullableTestPlanGroupByStatusType struct {
	value *TestPlanGroupByStatusType
	isSet bool
}

func (v NullableTestPlanGroupByStatusType) Get() *TestPlanGroupByStatusType {
	return v.value
}

func (v *NullableTestPlanGroupByStatusType) Set(val *TestPlanGroupByStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanGroupByStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanGroupByStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanGroupByStatusType(val *TestPlanGroupByStatusType) *NullableTestPlanGroupByStatusType {
	return &NullableTestPlanGroupByStatusType{value: val, isSet: true}
}

func (v NullableTestPlanGroupByStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanGroupByStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


