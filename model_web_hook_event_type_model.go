/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WebHookEventTypeModel the model 'WebHookEventTypeModel'
type WebHookEventTypeModel string

// List of WebHookEventTypeModel
const (
	WEBHOOKEVENTTYPEMODEL_AUTOMATED_TEST_RUN_CREATED WebHookEventTypeModel = "AutomatedTestRunCreated"
	WEBHOOKEVENTTYPEMODEL_TEST_PLANS_STATUS_CHANGED WebHookEventTypeModel = "TestPlansStatusChanged"
)

// All allowed values of WebHookEventTypeModel enum
var AllowedWebHookEventTypeModelEnumValues = []WebHookEventTypeModel{
	"AutomatedTestRunCreated",
	"TestPlansStatusChanged",
}

func (v *WebHookEventTypeModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebHookEventTypeModel(value)
	for _, existing := range AllowedWebHookEventTypeModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebHookEventTypeModel", value)
}

// NewWebHookEventTypeModelFromValue returns a pointer to a valid WebHookEventTypeModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebHookEventTypeModelFromValue(v string) (*WebHookEventTypeModel, error) {
	ev := WebHookEventTypeModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebHookEventTypeModel: valid values are %v", v, AllowedWebHookEventTypeModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebHookEventTypeModel) IsValid() bool {
	for _, existing := range AllowedWebHookEventTypeModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebHookEventTypeModel value
func (v WebHookEventTypeModel) Ptr() *WebHookEventTypeModel {
	return &v
}

type NullableWebHookEventTypeModel struct {
	value *WebHookEventTypeModel
	isSet bool
}

func (v NullableWebHookEventTypeModel) Get() *WebHookEventTypeModel {
	return v.value
}

func (v *NullableWebHookEventTypeModel) Set(val *WebHookEventTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableWebHookEventTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableWebHookEventTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebHookEventTypeModel(val *WebHookEventTypeModel) *NullableWebHookEventTypeModel {
	return &NullableWebHookEventTypeModel{value: val, isSet: true}
}

func (v NullableWebHookEventTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebHookEventTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

