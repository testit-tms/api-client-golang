/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestSuiteType the model 'TestSuiteType'
type TestSuiteType string

// List of TestSuiteType
const (
	TESTSUITETYPE_CUSTOM TestSuiteType = "Custom"
	TESTSUITETYPE_DYNAMIC TestSuiteType = "Dynamic"
)

// All allowed values of TestSuiteType enum
var AllowedTestSuiteTypeEnumValues = []TestSuiteType{
	"Custom",
	"Dynamic",
}

func (v *TestSuiteType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestSuiteType(value)
	for _, existing := range AllowedTestSuiteTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestSuiteType", value)
}

// NewTestSuiteTypeFromValue returns a pointer to a valid TestSuiteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestSuiteTypeFromValue(v string) (*TestSuiteType, error) {
	ev := TestSuiteType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestSuiteType: valid values are %v", v, AllowedTestSuiteTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestSuiteType) IsValid() bool {
	for _, existing := range AllowedTestSuiteTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestSuiteType value
func (v TestSuiteType) Ptr() *TestSuiteType {
	return &v
}

type NullableTestSuiteType struct {
	value *TestSuiteType
	isSet bool
}

func (v NullableTestSuiteType) Get() *TestSuiteType {
	return v.value
}

func (v *NullableTestSuiteType) Set(val *TestSuiteType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteType(val *TestSuiteType) *NullableTestSuiteType {
	return &NullableTestSuiteType{value: val, isSet: true}
}

func (v NullableTestSuiteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

