/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestSuiteTypeApiResult the model 'TestSuiteTypeApiResult'
type TestSuiteTypeApiResult string

// List of TestSuiteTypeApiResult
const (
	TESTSUITETYPEAPIRESULT_CUSTOM TestSuiteTypeApiResult = "Custom"
	TESTSUITETYPEAPIRESULT_DYNAMIC TestSuiteTypeApiResult = "Dynamic"
	TESTSUITETYPEAPIRESULT_TREE TestSuiteTypeApiResult = "Tree"
)

// All allowed values of TestSuiteTypeApiResult enum
var AllowedTestSuiteTypeApiResultEnumValues = []TestSuiteTypeApiResult{
	"Custom",
	"Dynamic",
	"Tree",
}

func (v *TestSuiteTypeApiResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestSuiteTypeApiResult(value)
	for _, existing := range AllowedTestSuiteTypeApiResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestSuiteTypeApiResult", value)
}

// NewTestSuiteTypeApiResultFromValue returns a pointer to a valid TestSuiteTypeApiResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestSuiteTypeApiResultFromValue(v string) (*TestSuiteTypeApiResult, error) {
	ev := TestSuiteTypeApiResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestSuiteTypeApiResult: valid values are %v", v, AllowedTestSuiteTypeApiResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestSuiteTypeApiResult) IsValid() bool {
	for _, existing := range AllowedTestSuiteTypeApiResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestSuiteTypeApiResult value
func (v TestSuiteTypeApiResult) Ptr() *TestSuiteTypeApiResult {
	return &v
}

type NullableTestSuiteTypeApiResult struct {
	value *TestSuiteTypeApiResult
	isSet bool
}

func (v NullableTestSuiteTypeApiResult) Get() *TestSuiteTypeApiResult {
	return v.value
}

func (v *NullableTestSuiteTypeApiResult) Set(val *TestSuiteTypeApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteTypeApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteTypeApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteTypeApiResult(val *TestSuiteTypeApiResult) *NullableTestSuiteTypeApiResult {
	return &NullableTestSuiteTypeApiResult{value: val, isSet: true}
}

func (v NullableTestSuiteTypeApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteTypeApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

