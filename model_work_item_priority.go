/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WorkItemPriority the model 'WorkItemPriority'
type WorkItemPriority string

// List of WorkItemPriority
const (
	WORKITEMPRIORITY_LOWEST WorkItemPriority = "Lowest"
	WORKITEMPRIORITY_LOW WorkItemPriority = "Low"
	WORKITEMPRIORITY_MEDIUM WorkItemPriority = "Medium"
	WORKITEMPRIORITY_HIGH WorkItemPriority = "High"
	WORKITEMPRIORITY_HIGHEST WorkItemPriority = "Highest"
)

// All allowed values of WorkItemPriority enum
var AllowedWorkItemPriorityEnumValues = []WorkItemPriority{
	"Lowest",
	"Low",
	"Medium",
	"High",
	"Highest",
}

func (v *WorkItemPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkItemPriority(value)
	for _, existing := range AllowedWorkItemPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkItemPriority", value)
}

// NewWorkItemPriorityFromValue returns a pointer to a valid WorkItemPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkItemPriorityFromValue(v string) (*WorkItemPriority, error) {
	ev := WorkItemPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkItemPriority: valid values are %v", v, AllowedWorkItemPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkItemPriority) IsValid() bool {
	for _, existing := range AllowedWorkItemPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkItemPriority value
func (v WorkItemPriority) Ptr() *WorkItemPriority {
	return &v
}

type NullableWorkItemPriority struct {
	value *WorkItemPriority
	isSet bool
}

func (v NullableWorkItemPriority) Get() *WorkItemPriority {
	return v.value
}

func (v *NullableWorkItemPriority) Set(val *WorkItemPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemPriority(val *WorkItemPriority) *NullableWorkItemPriority {
	return &NullableWorkItemPriority{value: val, isSet: true}
}

func (v NullableWorkItemPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

