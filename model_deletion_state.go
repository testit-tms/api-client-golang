/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// DeletionState the model 'DeletionState'
type DeletionState string

// List of DeletionState
const (
	DELETIONSTATE_ANY DeletionState = "Any"
	DELETIONSTATE_DELETED DeletionState = "Deleted"
	DELETIONSTATE_NOT_DELETED DeletionState = "NotDeleted"
)

// All allowed values of DeletionState enum
var AllowedDeletionStateEnumValues = []DeletionState{
	"Any",
	"Deleted",
	"NotDeleted",
}

func (v *DeletionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeletionState(value)
	for _, existing := range AllowedDeletionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeletionState", value)
}

// NewDeletionStateFromValue returns a pointer to a valid DeletionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeletionStateFromValue(v string) (*DeletionState, error) {
	ev := DeletionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeletionState: valid values are %v", v, AllowedDeletionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeletionState) IsValid() bool {
	for _, existing := range AllowedDeletionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeletionState value
func (v DeletionState) Ptr() *DeletionState {
	return &v
}

type NullableDeletionState struct {
	value *DeletionState
	isSet bool
}

func (v NullableDeletionState) Get() *DeletionState {
	return v.value
}

func (v *NullableDeletionState) Set(val *DeletionState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletionState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletionState(val *DeletionState) *NullableDeletionState {
	return &NullableDeletionState{value: val, isSet: true}
}

func (v NullableDeletionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

