/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the CustomAttributeChangeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomAttributeChangeModel{}

// CustomAttributeChangeModel struct for CustomAttributeChangeModel
type CustomAttributeChangeModel struct {
	Type NullableString `json:"type,omitempty"`
	OldAttributeName NullableString `json:"oldAttributeName,omitempty"`
	NewAttributeName NullableString `json:"newAttributeName,omitempty"`
	OldValue interface{} `json:"oldValue,omitempty"`
	NewValue interface{} `json:"newValue,omitempty"`
}

// NewCustomAttributeChangeModel instantiates a new CustomAttributeChangeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomAttributeChangeModel() *CustomAttributeChangeModel {
	this := CustomAttributeChangeModel{}
	return &this
}

// NewCustomAttributeChangeModelWithDefaults instantiates a new CustomAttributeChangeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomAttributeChangeModelWithDefaults() *CustomAttributeChangeModel {
	this := CustomAttributeChangeModel{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomAttributeChangeModel) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomAttributeChangeModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *CustomAttributeChangeModel) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *CustomAttributeChangeModel) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *CustomAttributeChangeModel) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *CustomAttributeChangeModel) UnsetType() {
	o.Type.Unset()
}

// GetOldAttributeName returns the OldAttributeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomAttributeChangeModel) GetOldAttributeName() string {
	if o == nil || IsNil(o.OldAttributeName.Get()) {
		var ret string
		return ret
	}
	return *o.OldAttributeName.Get()
}

// GetOldAttributeNameOk returns a tuple with the OldAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomAttributeChangeModel) GetOldAttributeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OldAttributeName.Get(), o.OldAttributeName.IsSet()
}

// HasOldAttributeName returns a boolean if a field has been set.
func (o *CustomAttributeChangeModel) HasOldAttributeName() bool {
	if o != nil && o.OldAttributeName.IsSet() {
		return true
	}

	return false
}

// SetOldAttributeName gets a reference to the given NullableString and assigns it to the OldAttributeName field.
func (o *CustomAttributeChangeModel) SetOldAttributeName(v string) {
	o.OldAttributeName.Set(&v)
}
// SetOldAttributeNameNil sets the value for OldAttributeName to be an explicit nil
func (o *CustomAttributeChangeModel) SetOldAttributeNameNil() {
	o.OldAttributeName.Set(nil)
}

// UnsetOldAttributeName ensures that no value is present for OldAttributeName, not even an explicit nil
func (o *CustomAttributeChangeModel) UnsetOldAttributeName() {
	o.OldAttributeName.Unset()
}

// GetNewAttributeName returns the NewAttributeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomAttributeChangeModel) GetNewAttributeName() string {
	if o == nil || IsNil(o.NewAttributeName.Get()) {
		var ret string
		return ret
	}
	return *o.NewAttributeName.Get()
}

// GetNewAttributeNameOk returns a tuple with the NewAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomAttributeChangeModel) GetNewAttributeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewAttributeName.Get(), o.NewAttributeName.IsSet()
}

// HasNewAttributeName returns a boolean if a field has been set.
func (o *CustomAttributeChangeModel) HasNewAttributeName() bool {
	if o != nil && o.NewAttributeName.IsSet() {
		return true
	}

	return false
}

// SetNewAttributeName gets a reference to the given NullableString and assigns it to the NewAttributeName field.
func (o *CustomAttributeChangeModel) SetNewAttributeName(v string) {
	o.NewAttributeName.Set(&v)
}
// SetNewAttributeNameNil sets the value for NewAttributeName to be an explicit nil
func (o *CustomAttributeChangeModel) SetNewAttributeNameNil() {
	o.NewAttributeName.Set(nil)
}

// UnsetNewAttributeName ensures that no value is present for NewAttributeName, not even an explicit nil
func (o *CustomAttributeChangeModel) UnsetNewAttributeName() {
	o.NewAttributeName.Unset()
}

// GetOldValue returns the OldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomAttributeChangeModel) GetOldValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomAttributeChangeModel) GetOldValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return &o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *CustomAttributeChangeModel) HasOldValue() bool {
	if o != nil && IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given interface{} and assigns it to the OldValue field.
func (o *CustomAttributeChangeModel) SetOldValue(v interface{}) {
	o.OldValue = v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomAttributeChangeModel) GetNewValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomAttributeChangeModel) GetNewValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NewValue) {
		return nil, false
	}
	return &o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *CustomAttributeChangeModel) HasNewValue() bool {
	if o != nil && IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given interface{} and assigns it to the NewValue field.
func (o *CustomAttributeChangeModel) SetNewValue(v interface{}) {
	o.NewValue = v
}

func (o CustomAttributeChangeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomAttributeChangeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.OldAttributeName.IsSet() {
		toSerialize["oldAttributeName"] = o.OldAttributeName.Get()
	}
	if o.NewAttributeName.IsSet() {
		toSerialize["newAttributeName"] = o.NewAttributeName.Get()
	}
	if o.OldValue != nil {
		toSerialize["oldValue"] = o.OldValue
	}
	if o.NewValue != nil {
		toSerialize["newValue"] = o.NewValue
	}
	return toSerialize, nil
}

type NullableCustomAttributeChangeModel struct {
	value *CustomAttributeChangeModel
	isSet bool
}

func (v NullableCustomAttributeChangeModel) Get() *CustomAttributeChangeModel {
	return v.value
}

func (v *NullableCustomAttributeChangeModel) Set(val *CustomAttributeChangeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAttributeChangeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAttributeChangeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAttributeChangeModel(val *CustomAttributeChangeModel) *NullableCustomAttributeChangeModel {
	return &NullableCustomAttributeChangeModel{value: val, isSet: true}
}

func (v NullableCustomAttributeChangeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAttributeChangeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


