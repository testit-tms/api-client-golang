/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TestResultApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultApiResult{}

// TestResultApiResult struct for TestResultApiResult
type TestResultApiResult struct {
	Id string `json:"id"`
	StartedOn NullableTime `json:"startedOn,omitempty"`
	CompletedOn NullableTime `json:"completedOn,omitempty"`
	DurationInMs NullableInt64 `json:"durationInMs,omitempty"`
	Traces NullableString `json:"traces,omitempty"`
	FailureType NullableString `json:"failureType,omitempty"`
	Message NullableString `json:"message,omitempty"`
	RunByUserId NullableString `json:"runByUserId,omitempty"`
	StoppedByUserId NullableString `json:"stoppedByUserId,omitempty"`
	Outcome string `json:"outcome"`
	AutoTestId NullableString `json:"autoTestId,omitempty"`
	TestPointId NullableString `json:"testPointId,omitempty"`
	TestRunId string `json:"testRunId"`
	ConfigurationId string `json:"configurationId"`
	Status TestStatusApiResult `json:"status"`
	TestPoint NullableTestPointShortApiResult `json:"testPoint,omitempty"`
	AutoTest NullableAutoTestApiResult `json:"autoTest,omitempty"`
	AutoTestStepResults []AutoTestStepResultsApiResult `json:"autoTestStepResults,omitempty"`
	SetupResults []AutoTestStepResultsApiResult `json:"setupResults,omitempty"`
	TeardownResults []AutoTestStepResultsApiResult `json:"teardownResults,omitempty"`
	WorkItemVersionId NullableString `json:"workItemVersionId,omitempty"`
	WorkItemVersionNumber NullableInt32 `json:"workItemVersionNumber,omitempty"`
	Attachments []AttachmentApiResult `json:"attachments"`
	Links []LinkApiResult `json:"links"`
	FailureClasses []TestResultFailureClassApiResult `json:"failureClasses"`
	StepComments []StepCommentApiResult `json:"stepComments,omitempty"`
	Parameters map[string]string `json:"parameters,omitempty"`
	Properties map[string]string `json:"properties,omitempty"`
	CreatedDate time.Time `json:"createdDate"`
	ModifiedDate NullableTime `json:"modifiedDate,omitempty"`
	CreatedById string `json:"createdById"`
	ModifiedById NullableString `json:"modifiedById,omitempty"`
	IsDeleted bool `json:"isDeleted"`
}

type _TestResultApiResult TestResultApiResult

// NewTestResultApiResult instantiates a new TestResultApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultApiResult(id string, outcome string, testRunId string, configurationId string, status TestStatusApiResult, attachments []AttachmentApiResult, links []LinkApiResult, failureClasses []TestResultFailureClassApiResult, createdDate time.Time, createdById string, isDeleted bool) *TestResultApiResult {
	this := TestResultApiResult{}
	this.Id = id
	this.Outcome = outcome
	this.TestRunId = testRunId
	this.ConfigurationId = configurationId
	this.Status = status
	this.Attachments = attachments
	this.Links = links
	this.FailureClasses = failureClasses
	this.CreatedDate = createdDate
	this.CreatedById = createdById
	this.IsDeleted = isDeleted
	return &this
}

// NewTestResultApiResultWithDefaults instantiates a new TestResultApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultApiResultWithDefaults() *TestResultApiResult {
	this := TestResultApiResult{}
	return &this
}

// GetId returns the Id field value
func (o *TestResultApiResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestResultApiResult) SetId(v string) {
	o.Id = v
}

// GetStartedOn returns the StartedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetStartedOn() time.Time {
	if o == nil || IsNil(o.StartedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedOn.Get()
}

// GetStartedOnOk returns a tuple with the StartedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetStartedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedOn.Get(), o.StartedOn.IsSet()
}

// HasStartedOn returns a boolean if a field has been set.
func (o *TestResultApiResult) HasStartedOn() bool {
	if o != nil && o.StartedOn.IsSet() {
		return true
	}

	return false
}

// SetStartedOn gets a reference to the given NullableTime and assigns it to the StartedOn field.
func (o *TestResultApiResult) SetStartedOn(v time.Time) {
	o.StartedOn.Set(&v)
}
// SetStartedOnNil sets the value for StartedOn to be an explicit nil
func (o *TestResultApiResult) SetStartedOnNil() {
	o.StartedOn.Set(nil)
}

// UnsetStartedOn ensures that no value is present for StartedOn, not even an explicit nil
func (o *TestResultApiResult) UnsetStartedOn() {
	o.StartedOn.Unset()
}

// GetCompletedOn returns the CompletedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetCompletedOn() time.Time {
	if o == nil || IsNil(o.CompletedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedOn.Get()
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetCompletedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedOn.Get(), o.CompletedOn.IsSet()
}

// HasCompletedOn returns a boolean if a field has been set.
func (o *TestResultApiResult) HasCompletedOn() bool {
	if o != nil && o.CompletedOn.IsSet() {
		return true
	}

	return false
}

// SetCompletedOn gets a reference to the given NullableTime and assigns it to the CompletedOn field.
func (o *TestResultApiResult) SetCompletedOn(v time.Time) {
	o.CompletedOn.Set(&v)
}
// SetCompletedOnNil sets the value for CompletedOn to be an explicit nil
func (o *TestResultApiResult) SetCompletedOnNil() {
	o.CompletedOn.Set(nil)
}

// UnsetCompletedOn ensures that no value is present for CompletedOn, not even an explicit nil
func (o *TestResultApiResult) UnsetCompletedOn() {
	o.CompletedOn.Unset()
}

// GetDurationInMs returns the DurationInMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetDurationInMs() int64 {
	if o == nil || IsNil(o.DurationInMs.Get()) {
		var ret int64
		return ret
	}
	return *o.DurationInMs.Get()
}

// GetDurationInMsOk returns a tuple with the DurationInMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetDurationInMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationInMs.Get(), o.DurationInMs.IsSet()
}

// HasDurationInMs returns a boolean if a field has been set.
func (o *TestResultApiResult) HasDurationInMs() bool {
	if o != nil && o.DurationInMs.IsSet() {
		return true
	}

	return false
}

// SetDurationInMs gets a reference to the given NullableInt64 and assigns it to the DurationInMs field.
func (o *TestResultApiResult) SetDurationInMs(v int64) {
	o.DurationInMs.Set(&v)
}
// SetDurationInMsNil sets the value for DurationInMs to be an explicit nil
func (o *TestResultApiResult) SetDurationInMsNil() {
	o.DurationInMs.Set(nil)
}

// UnsetDurationInMs ensures that no value is present for DurationInMs, not even an explicit nil
func (o *TestResultApiResult) UnsetDurationInMs() {
	o.DurationInMs.Unset()
}

// GetTraces returns the Traces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetTraces() string {
	if o == nil || IsNil(o.Traces.Get()) {
		var ret string
		return ret
	}
	return *o.Traces.Get()
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetTracesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traces.Get(), o.Traces.IsSet()
}

// HasTraces returns a boolean if a field has been set.
func (o *TestResultApiResult) HasTraces() bool {
	if o != nil && o.Traces.IsSet() {
		return true
	}

	return false
}

// SetTraces gets a reference to the given NullableString and assigns it to the Traces field.
func (o *TestResultApiResult) SetTraces(v string) {
	o.Traces.Set(&v)
}
// SetTracesNil sets the value for Traces to be an explicit nil
func (o *TestResultApiResult) SetTracesNil() {
	o.Traces.Set(nil)
}

// UnsetTraces ensures that no value is present for Traces, not even an explicit nil
func (o *TestResultApiResult) UnsetTraces() {
	o.Traces.Unset()
}

// GetFailureType returns the FailureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetFailureType() string {
	if o == nil || IsNil(o.FailureType.Get()) {
		var ret string
		return ret
	}
	return *o.FailureType.Get()
}

// GetFailureTypeOk returns a tuple with the FailureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetFailureTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureType.Get(), o.FailureType.IsSet()
}

// HasFailureType returns a boolean if a field has been set.
func (o *TestResultApiResult) HasFailureType() bool {
	if o != nil && o.FailureType.IsSet() {
		return true
	}

	return false
}

// SetFailureType gets a reference to the given NullableString and assigns it to the FailureType field.
func (o *TestResultApiResult) SetFailureType(v string) {
	o.FailureType.Set(&v)
}
// SetFailureTypeNil sets the value for FailureType to be an explicit nil
func (o *TestResultApiResult) SetFailureTypeNil() {
	o.FailureType.Set(nil)
}

// UnsetFailureType ensures that no value is present for FailureType, not even an explicit nil
func (o *TestResultApiResult) UnsetFailureType() {
	o.FailureType.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *TestResultApiResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *TestResultApiResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *TestResultApiResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *TestResultApiResult) UnsetMessage() {
	o.Message.Unset()
}

// GetRunByUserId returns the RunByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetRunByUserId() string {
	if o == nil || IsNil(o.RunByUserId.Get()) {
		var ret string
		return ret
	}
	return *o.RunByUserId.Get()
}

// GetRunByUserIdOk returns a tuple with the RunByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetRunByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunByUserId.Get(), o.RunByUserId.IsSet()
}

// HasRunByUserId returns a boolean if a field has been set.
func (o *TestResultApiResult) HasRunByUserId() bool {
	if o != nil && o.RunByUserId.IsSet() {
		return true
	}

	return false
}

// SetRunByUserId gets a reference to the given NullableString and assigns it to the RunByUserId field.
func (o *TestResultApiResult) SetRunByUserId(v string) {
	o.RunByUserId.Set(&v)
}
// SetRunByUserIdNil sets the value for RunByUserId to be an explicit nil
func (o *TestResultApiResult) SetRunByUserIdNil() {
	o.RunByUserId.Set(nil)
}

// UnsetRunByUserId ensures that no value is present for RunByUserId, not even an explicit nil
func (o *TestResultApiResult) UnsetRunByUserId() {
	o.RunByUserId.Unset()
}

// GetStoppedByUserId returns the StoppedByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetStoppedByUserId() string {
	if o == nil || IsNil(o.StoppedByUserId.Get()) {
		var ret string
		return ret
	}
	return *o.StoppedByUserId.Get()
}

// GetStoppedByUserIdOk returns a tuple with the StoppedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetStoppedByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoppedByUserId.Get(), o.StoppedByUserId.IsSet()
}

// HasStoppedByUserId returns a boolean if a field has been set.
func (o *TestResultApiResult) HasStoppedByUserId() bool {
	if o != nil && o.StoppedByUserId.IsSet() {
		return true
	}

	return false
}

// SetStoppedByUserId gets a reference to the given NullableString and assigns it to the StoppedByUserId field.
func (o *TestResultApiResult) SetStoppedByUserId(v string) {
	o.StoppedByUserId.Set(&v)
}
// SetStoppedByUserIdNil sets the value for StoppedByUserId to be an explicit nil
func (o *TestResultApiResult) SetStoppedByUserIdNil() {
	o.StoppedByUserId.Set(nil)
}

// UnsetStoppedByUserId ensures that no value is present for StoppedByUserId, not even an explicit nil
func (o *TestResultApiResult) UnsetStoppedByUserId() {
	o.StoppedByUserId.Unset()
}

// GetOutcome returns the Outcome field value
func (o *TestResultApiResult) GetOutcome() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetOutcomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outcome, true
}

// SetOutcome sets field value
func (o *TestResultApiResult) SetOutcome(v string) {
	o.Outcome = v
}

// GetAutoTestId returns the AutoTestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetAutoTestId() string {
	if o == nil || IsNil(o.AutoTestId.Get()) {
		var ret string
		return ret
	}
	return *o.AutoTestId.Get()
}

// GetAutoTestIdOk returns a tuple with the AutoTestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetAutoTestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoTestId.Get(), o.AutoTestId.IsSet()
}

// HasAutoTestId returns a boolean if a field has been set.
func (o *TestResultApiResult) HasAutoTestId() bool {
	if o != nil && o.AutoTestId.IsSet() {
		return true
	}

	return false
}

// SetAutoTestId gets a reference to the given NullableString and assigns it to the AutoTestId field.
func (o *TestResultApiResult) SetAutoTestId(v string) {
	o.AutoTestId.Set(&v)
}
// SetAutoTestIdNil sets the value for AutoTestId to be an explicit nil
func (o *TestResultApiResult) SetAutoTestIdNil() {
	o.AutoTestId.Set(nil)
}

// UnsetAutoTestId ensures that no value is present for AutoTestId, not even an explicit nil
func (o *TestResultApiResult) UnsetAutoTestId() {
	o.AutoTestId.Unset()
}

// GetTestPointId returns the TestPointId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetTestPointId() string {
	if o == nil || IsNil(o.TestPointId.Get()) {
		var ret string
		return ret
	}
	return *o.TestPointId.Get()
}

// GetTestPointIdOk returns a tuple with the TestPointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetTestPointIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPointId.Get(), o.TestPointId.IsSet()
}

// HasTestPointId returns a boolean if a field has been set.
func (o *TestResultApiResult) HasTestPointId() bool {
	if o != nil && o.TestPointId.IsSet() {
		return true
	}

	return false
}

// SetTestPointId gets a reference to the given NullableString and assigns it to the TestPointId field.
func (o *TestResultApiResult) SetTestPointId(v string) {
	o.TestPointId.Set(&v)
}
// SetTestPointIdNil sets the value for TestPointId to be an explicit nil
func (o *TestResultApiResult) SetTestPointIdNil() {
	o.TestPointId.Set(nil)
}

// UnsetTestPointId ensures that no value is present for TestPointId, not even an explicit nil
func (o *TestResultApiResult) UnsetTestPointId() {
	o.TestPointId.Unset()
}

// GetTestRunId returns the TestRunId field value
func (o *TestResultApiResult) GetTestRunId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestRunId
}

// GetTestRunIdOk returns a tuple with the TestRunId field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetTestRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestRunId, true
}

// SetTestRunId sets field value
func (o *TestResultApiResult) SetTestRunId(v string) {
	o.TestRunId = v
}

// GetConfigurationId returns the ConfigurationId field value
func (o *TestResultApiResult) GetConfigurationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationId
}

// GetConfigurationIdOk returns a tuple with the ConfigurationId field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetConfigurationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigurationId, true
}

// SetConfigurationId sets field value
func (o *TestResultApiResult) SetConfigurationId(v string) {
	o.ConfigurationId = v
}

// GetStatus returns the Status field value
func (o *TestResultApiResult) GetStatus() TestStatusApiResult {
	if o == nil {
		var ret TestStatusApiResult
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetStatusOk() (*TestStatusApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TestResultApiResult) SetStatus(v TestStatusApiResult) {
	o.Status = v
}

// GetTestPoint returns the TestPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetTestPoint() TestPointShortApiResult {
	if o == nil || IsNil(o.TestPoint.Get()) {
		var ret TestPointShortApiResult
		return ret
	}
	return *o.TestPoint.Get()
}

// GetTestPointOk returns a tuple with the TestPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetTestPointOk() (*TestPointShortApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPoint.Get(), o.TestPoint.IsSet()
}

// HasTestPoint returns a boolean if a field has been set.
func (o *TestResultApiResult) HasTestPoint() bool {
	if o != nil && o.TestPoint.IsSet() {
		return true
	}

	return false
}

// SetTestPoint gets a reference to the given NullableTestPointShortApiResult and assigns it to the TestPoint field.
func (o *TestResultApiResult) SetTestPoint(v TestPointShortApiResult) {
	o.TestPoint.Set(&v)
}
// SetTestPointNil sets the value for TestPoint to be an explicit nil
func (o *TestResultApiResult) SetTestPointNil() {
	o.TestPoint.Set(nil)
}

// UnsetTestPoint ensures that no value is present for TestPoint, not even an explicit nil
func (o *TestResultApiResult) UnsetTestPoint() {
	o.TestPoint.Unset()
}

// GetAutoTest returns the AutoTest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetAutoTest() AutoTestApiResult {
	if o == nil || IsNil(o.AutoTest.Get()) {
		var ret AutoTestApiResult
		return ret
	}
	return *o.AutoTest.Get()
}

// GetAutoTestOk returns a tuple with the AutoTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetAutoTestOk() (*AutoTestApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoTest.Get(), o.AutoTest.IsSet()
}

// HasAutoTest returns a boolean if a field has been set.
func (o *TestResultApiResult) HasAutoTest() bool {
	if o != nil && o.AutoTest.IsSet() {
		return true
	}

	return false
}

// SetAutoTest gets a reference to the given NullableAutoTestApiResult and assigns it to the AutoTest field.
func (o *TestResultApiResult) SetAutoTest(v AutoTestApiResult) {
	o.AutoTest.Set(&v)
}
// SetAutoTestNil sets the value for AutoTest to be an explicit nil
func (o *TestResultApiResult) SetAutoTestNil() {
	o.AutoTest.Set(nil)
}

// UnsetAutoTest ensures that no value is present for AutoTest, not even an explicit nil
func (o *TestResultApiResult) UnsetAutoTest() {
	o.AutoTest.Unset()
}

// GetAutoTestStepResults returns the AutoTestStepResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetAutoTestStepResults() []AutoTestStepResultsApiResult {
	if o == nil {
		var ret []AutoTestStepResultsApiResult
		return ret
	}
	return o.AutoTestStepResults
}

// GetAutoTestStepResultsOk returns a tuple with the AutoTestStepResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetAutoTestStepResultsOk() ([]AutoTestStepResultsApiResult, bool) {
	if o == nil || IsNil(o.AutoTestStepResults) {
		return nil, false
	}
	return o.AutoTestStepResults, true
}

// HasAutoTestStepResults returns a boolean if a field has been set.
func (o *TestResultApiResult) HasAutoTestStepResults() bool {
	if o != nil && !IsNil(o.AutoTestStepResults) {
		return true
	}

	return false
}

// SetAutoTestStepResults gets a reference to the given []AutoTestStepResultsApiResult and assigns it to the AutoTestStepResults field.
func (o *TestResultApiResult) SetAutoTestStepResults(v []AutoTestStepResultsApiResult) {
	o.AutoTestStepResults = v
}

// GetSetupResults returns the SetupResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetSetupResults() []AutoTestStepResultsApiResult {
	if o == nil {
		var ret []AutoTestStepResultsApiResult
		return ret
	}
	return o.SetupResults
}

// GetSetupResultsOk returns a tuple with the SetupResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetSetupResultsOk() ([]AutoTestStepResultsApiResult, bool) {
	if o == nil || IsNil(o.SetupResults) {
		return nil, false
	}
	return o.SetupResults, true
}

// HasSetupResults returns a boolean if a field has been set.
func (o *TestResultApiResult) HasSetupResults() bool {
	if o != nil && !IsNil(o.SetupResults) {
		return true
	}

	return false
}

// SetSetupResults gets a reference to the given []AutoTestStepResultsApiResult and assigns it to the SetupResults field.
func (o *TestResultApiResult) SetSetupResults(v []AutoTestStepResultsApiResult) {
	o.SetupResults = v
}

// GetTeardownResults returns the TeardownResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetTeardownResults() []AutoTestStepResultsApiResult {
	if o == nil {
		var ret []AutoTestStepResultsApiResult
		return ret
	}
	return o.TeardownResults
}

// GetTeardownResultsOk returns a tuple with the TeardownResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetTeardownResultsOk() ([]AutoTestStepResultsApiResult, bool) {
	if o == nil || IsNil(o.TeardownResults) {
		return nil, false
	}
	return o.TeardownResults, true
}

// HasTeardownResults returns a boolean if a field has been set.
func (o *TestResultApiResult) HasTeardownResults() bool {
	if o != nil && !IsNil(o.TeardownResults) {
		return true
	}

	return false
}

// SetTeardownResults gets a reference to the given []AutoTestStepResultsApiResult and assigns it to the TeardownResults field.
func (o *TestResultApiResult) SetTeardownResults(v []AutoTestStepResultsApiResult) {
	o.TeardownResults = v
}

// GetWorkItemVersionId returns the WorkItemVersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetWorkItemVersionId() string {
	if o == nil || IsNil(o.WorkItemVersionId.Get()) {
		var ret string
		return ret
	}
	return *o.WorkItemVersionId.Get()
}

// GetWorkItemVersionIdOk returns a tuple with the WorkItemVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetWorkItemVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemVersionId.Get(), o.WorkItemVersionId.IsSet()
}

// HasWorkItemVersionId returns a boolean if a field has been set.
func (o *TestResultApiResult) HasWorkItemVersionId() bool {
	if o != nil && o.WorkItemVersionId.IsSet() {
		return true
	}

	return false
}

// SetWorkItemVersionId gets a reference to the given NullableString and assigns it to the WorkItemVersionId field.
func (o *TestResultApiResult) SetWorkItemVersionId(v string) {
	o.WorkItemVersionId.Set(&v)
}
// SetWorkItemVersionIdNil sets the value for WorkItemVersionId to be an explicit nil
func (o *TestResultApiResult) SetWorkItemVersionIdNil() {
	o.WorkItemVersionId.Set(nil)
}

// UnsetWorkItemVersionId ensures that no value is present for WorkItemVersionId, not even an explicit nil
func (o *TestResultApiResult) UnsetWorkItemVersionId() {
	o.WorkItemVersionId.Unset()
}

// GetWorkItemVersionNumber returns the WorkItemVersionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetWorkItemVersionNumber() int32 {
	if o == nil || IsNil(o.WorkItemVersionNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.WorkItemVersionNumber.Get()
}

// GetWorkItemVersionNumberOk returns a tuple with the WorkItemVersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetWorkItemVersionNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemVersionNumber.Get(), o.WorkItemVersionNumber.IsSet()
}

// HasWorkItemVersionNumber returns a boolean if a field has been set.
func (o *TestResultApiResult) HasWorkItemVersionNumber() bool {
	if o != nil && o.WorkItemVersionNumber.IsSet() {
		return true
	}

	return false
}

// SetWorkItemVersionNumber gets a reference to the given NullableInt32 and assigns it to the WorkItemVersionNumber field.
func (o *TestResultApiResult) SetWorkItemVersionNumber(v int32) {
	o.WorkItemVersionNumber.Set(&v)
}
// SetWorkItemVersionNumberNil sets the value for WorkItemVersionNumber to be an explicit nil
func (o *TestResultApiResult) SetWorkItemVersionNumberNil() {
	o.WorkItemVersionNumber.Set(nil)
}

// UnsetWorkItemVersionNumber ensures that no value is present for WorkItemVersionNumber, not even an explicit nil
func (o *TestResultApiResult) UnsetWorkItemVersionNumber() {
	o.WorkItemVersionNumber.Unset()
}

// GetAttachments returns the Attachments field value
func (o *TestResultApiResult) GetAttachments() []AttachmentApiResult {
	if o == nil {
		var ret []AttachmentApiResult
		return ret
	}

	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetAttachmentsOk() ([]AttachmentApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments, true
}

// SetAttachments sets field value
func (o *TestResultApiResult) SetAttachments(v []AttachmentApiResult) {
	o.Attachments = v
}

// GetLinks returns the Links field value
func (o *TestResultApiResult) GetLinks() []LinkApiResult {
	if o == nil {
		var ret []LinkApiResult
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetLinksOk() ([]LinkApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *TestResultApiResult) SetLinks(v []LinkApiResult) {
	o.Links = v
}

// GetFailureClasses returns the FailureClasses field value
func (o *TestResultApiResult) GetFailureClasses() []TestResultFailureClassApiResult {
	if o == nil {
		var ret []TestResultFailureClassApiResult
		return ret
	}

	return o.FailureClasses
}

// GetFailureClassesOk returns a tuple with the FailureClasses field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetFailureClassesOk() ([]TestResultFailureClassApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureClasses, true
}

// SetFailureClasses sets field value
func (o *TestResultApiResult) SetFailureClasses(v []TestResultFailureClassApiResult) {
	o.FailureClasses = v
}

// GetStepComments returns the StepComments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetStepComments() []StepCommentApiResult {
	if o == nil {
		var ret []StepCommentApiResult
		return ret
	}
	return o.StepComments
}

// GetStepCommentsOk returns a tuple with the StepComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetStepCommentsOk() ([]StepCommentApiResult, bool) {
	if o == nil || IsNil(o.StepComments) {
		return nil, false
	}
	return o.StepComments, true
}

// HasStepComments returns a boolean if a field has been set.
func (o *TestResultApiResult) HasStepComments() bool {
	if o != nil && !IsNil(o.StepComments) {
		return true
	}

	return false
}

// SetStepComments gets a reference to the given []StepCommentApiResult and assigns it to the StepComments field.
func (o *TestResultApiResult) SetStepComments(v []StepCommentApiResult) {
	o.StepComments = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetParameters() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return &o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *TestResultApiResult) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *TestResultApiResult) SetParameters(v map[string]string) {
	o.Parameters = v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return &o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TestResultApiResult) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *TestResultApiResult) SetProperties(v map[string]string) {
	o.Properties = v
}

// GetCreatedDate returns the CreatedDate field value
func (o *TestResultApiResult) GetCreatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *TestResultApiResult) SetCreatedDate(v time.Time) {
	o.CreatedDate = v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetModifiedDate() time.Time {
	if o == nil || IsNil(o.ModifiedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate.Get()
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedDate.Get(), o.ModifiedDate.IsSet()
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *TestResultApiResult) HasModifiedDate() bool {
	if o != nil && o.ModifiedDate.IsSet() {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given NullableTime and assigns it to the ModifiedDate field.
func (o *TestResultApiResult) SetModifiedDate(v time.Time) {
	o.ModifiedDate.Set(&v)
}
// SetModifiedDateNil sets the value for ModifiedDate to be an explicit nil
func (o *TestResultApiResult) SetModifiedDateNil() {
	o.ModifiedDate.Set(nil)
}

// UnsetModifiedDate ensures that no value is present for ModifiedDate, not even an explicit nil
func (o *TestResultApiResult) UnsetModifiedDate() {
	o.ModifiedDate.Unset()
}

// GetCreatedById returns the CreatedById field value
func (o *TestResultApiResult) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *TestResultApiResult) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetModifiedById returns the ModifiedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultApiResult) GetModifiedById() string {
	if o == nil || IsNil(o.ModifiedById.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedById.Get()
}

// GetModifiedByIdOk returns a tuple with the ModifiedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultApiResult) GetModifiedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedById.Get(), o.ModifiedById.IsSet()
}

// HasModifiedById returns a boolean if a field has been set.
func (o *TestResultApiResult) HasModifiedById() bool {
	if o != nil && o.ModifiedById.IsSet() {
		return true
	}

	return false
}

// SetModifiedById gets a reference to the given NullableString and assigns it to the ModifiedById field.
func (o *TestResultApiResult) SetModifiedById(v string) {
	o.ModifiedById.Set(&v)
}
// SetModifiedByIdNil sets the value for ModifiedById to be an explicit nil
func (o *TestResultApiResult) SetModifiedByIdNil() {
	o.ModifiedById.Set(nil)
}

// UnsetModifiedById ensures that no value is present for ModifiedById, not even an explicit nil
func (o *TestResultApiResult) UnsetModifiedById() {
	o.ModifiedById.Unset()
}

// GetIsDeleted returns the IsDeleted field value
func (o *TestResultApiResult) GetIsDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value
// and a boolean to check if the value has been set.
func (o *TestResultApiResult) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeleted, true
}

// SetIsDeleted sets field value
func (o *TestResultApiResult) SetIsDeleted(v bool) {
	o.IsDeleted = v
}

func (o TestResultApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.StartedOn.IsSet() {
		toSerialize["startedOn"] = o.StartedOn.Get()
	}
	if o.CompletedOn.IsSet() {
		toSerialize["completedOn"] = o.CompletedOn.Get()
	}
	if o.DurationInMs.IsSet() {
		toSerialize["durationInMs"] = o.DurationInMs.Get()
	}
	if o.Traces.IsSet() {
		toSerialize["traces"] = o.Traces.Get()
	}
	if o.FailureType.IsSet() {
		toSerialize["failureType"] = o.FailureType.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.RunByUserId.IsSet() {
		toSerialize["runByUserId"] = o.RunByUserId.Get()
	}
	if o.StoppedByUserId.IsSet() {
		toSerialize["stoppedByUserId"] = o.StoppedByUserId.Get()
	}
	toSerialize["outcome"] = o.Outcome
	if o.AutoTestId.IsSet() {
		toSerialize["autoTestId"] = o.AutoTestId.Get()
	}
	if o.TestPointId.IsSet() {
		toSerialize["testPointId"] = o.TestPointId.Get()
	}
	toSerialize["testRunId"] = o.TestRunId
	toSerialize["configurationId"] = o.ConfigurationId
	toSerialize["status"] = o.Status
	if o.TestPoint.IsSet() {
		toSerialize["testPoint"] = o.TestPoint.Get()
	}
	if o.AutoTest.IsSet() {
		toSerialize["autoTest"] = o.AutoTest.Get()
	}
	if o.AutoTestStepResults != nil {
		toSerialize["autoTestStepResults"] = o.AutoTestStepResults
	}
	if o.SetupResults != nil {
		toSerialize["setupResults"] = o.SetupResults
	}
	if o.TeardownResults != nil {
		toSerialize["teardownResults"] = o.TeardownResults
	}
	if o.WorkItemVersionId.IsSet() {
		toSerialize["workItemVersionId"] = o.WorkItemVersionId.Get()
	}
	if o.WorkItemVersionNumber.IsSet() {
		toSerialize["workItemVersionNumber"] = o.WorkItemVersionNumber.Get()
	}
	toSerialize["attachments"] = o.Attachments
	toSerialize["links"] = o.Links
	toSerialize["failureClasses"] = o.FailureClasses
	if o.StepComments != nil {
		toSerialize["stepComments"] = o.StepComments
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	toSerialize["createdDate"] = o.CreatedDate
	if o.ModifiedDate.IsSet() {
		toSerialize["modifiedDate"] = o.ModifiedDate.Get()
	}
	toSerialize["createdById"] = o.CreatedById
	if o.ModifiedById.IsSet() {
		toSerialize["modifiedById"] = o.ModifiedById.Get()
	}
	toSerialize["isDeleted"] = o.IsDeleted
	return toSerialize, nil
}

func (o *TestResultApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"outcome",
		"testRunId",
		"configurationId",
		"status",
		"attachments",
		"links",
		"failureClasses",
		"createdDate",
		"createdById",
		"isDeleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestResultApiResult := _TestResultApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestResultApiResult)

	if err != nil {
		return err
	}

	*o = TestResultApiResult(varTestResultApiResult)

	return err
}

type NullableTestResultApiResult struct {
	value *TestResultApiResult
	isSet bool
}

func (v NullableTestResultApiResult) Get() *TestResultApiResult {
	return v.value
}

func (v *NullableTestResultApiResult) Set(val *TestResultApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultApiResult(val *TestResultApiResult) *NullableTestResultApiResult {
	return &NullableTestResultApiResult{value: val, isSet: true}
}

func (v NullableTestResultApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


