/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// NotificationTypeModel the model 'NotificationTypeModel'
type NotificationTypeModel string

// List of NotificationTypeModel
const (
	NOTIFICATIONTYPEMODEL_MENTION_IN_COMMENT NotificationTypeModel = "MentionInComment"
	NOTIFICATIONTYPEMODEL_TEST_POINT_IS_SET_IN_TEST_PLAN NotificationTypeModel = "TestPointIsSetInTestPlan"
	NOTIFICATIONTYPEMODEL_MENTION_IN_CUSTOM_ATTRIBUTE NotificationTypeModel = "MentionInCustomAttribute"
	NOTIFICATIONTYPEMODEL_TEST_PLAN_UNLOCK_REQUEST NotificationTypeModel = "TestPlanUnlockRequest"
)

// All allowed values of NotificationTypeModel enum
var AllowedNotificationTypeModelEnumValues = []NotificationTypeModel{
	"MentionInComment",
	"TestPointIsSetInTestPlan",
	"MentionInCustomAttribute",
	"TestPlanUnlockRequest",
}

func (v *NotificationTypeModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationTypeModel(value)
	for _, existing := range AllowedNotificationTypeModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationTypeModel", value)
}

// NewNotificationTypeModelFromValue returns a pointer to a valid NotificationTypeModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationTypeModelFromValue(v string) (*NotificationTypeModel, error) {
	ev := NotificationTypeModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationTypeModel: valid values are %v", v, AllowedNotificationTypeModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationTypeModel) IsValid() bool {
	for _, existing := range AllowedNotificationTypeModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationTypeModel value
func (v NotificationTypeModel) Ptr() *NotificationTypeModel {
	return &v
}

type NullableNotificationTypeModel struct {
	value *NotificationTypeModel
	isSet bool
}

func (v NullableNotificationTypeModel) Get() *NotificationTypeModel {
	return v.value
}

func (v *NullableNotificationTypeModel) Set(val *NotificationTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationTypeModel(val *NotificationTypeModel) *NullableNotificationTypeModel {
	return &NullableNotificationTypeModel{value: val, isSet: true}
}

func (v NullableNotificationTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

