/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestPlanSelectModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanSelectModel{}

// TestPlanSelectModel struct for TestPlanSelectModel
type TestPlanSelectModel struct {
	Filter ProjectTestPlansFilterModel `json:"filter"`
	ExtractionModel NullableTestPlanExtractionModel `json:"extractionModel,omitempty"`
}

type _TestPlanSelectModel TestPlanSelectModel

// NewTestPlanSelectModel instantiates a new TestPlanSelectModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanSelectModel(filter ProjectTestPlansFilterModel) *TestPlanSelectModel {
	this := TestPlanSelectModel{}
	this.Filter = filter
	return &this
}

// NewTestPlanSelectModelWithDefaults instantiates a new TestPlanSelectModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanSelectModelWithDefaults() *TestPlanSelectModel {
	this := TestPlanSelectModel{}
	return &this
}

// GetFilter returns the Filter field value
func (o *TestPlanSelectModel) GetFilter() ProjectTestPlansFilterModel {
	if o == nil {
		var ret ProjectTestPlansFilterModel
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *TestPlanSelectModel) GetFilterOk() (*ProjectTestPlansFilterModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *TestPlanSelectModel) SetFilter(v ProjectTestPlansFilterModel) {
	o.Filter = v
}

// GetExtractionModel returns the ExtractionModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanSelectModel) GetExtractionModel() TestPlanExtractionModel {
	if o == nil || IsNil(o.ExtractionModel.Get()) {
		var ret TestPlanExtractionModel
		return ret
	}
	return *o.ExtractionModel.Get()
}

// GetExtractionModelOk returns a tuple with the ExtractionModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanSelectModel) GetExtractionModelOk() (*TestPlanExtractionModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtractionModel.Get(), o.ExtractionModel.IsSet()
}

// HasExtractionModel returns a boolean if a field has been set.
func (o *TestPlanSelectModel) HasExtractionModel() bool {
	if o != nil && o.ExtractionModel.IsSet() {
		return true
	}

	return false
}

// SetExtractionModel gets a reference to the given NullableTestPlanExtractionModel and assigns it to the ExtractionModel field.
func (o *TestPlanSelectModel) SetExtractionModel(v TestPlanExtractionModel) {
	o.ExtractionModel.Set(&v)
}
// SetExtractionModelNil sets the value for ExtractionModel to be an explicit nil
func (o *TestPlanSelectModel) SetExtractionModelNil() {
	o.ExtractionModel.Set(nil)
}

// UnsetExtractionModel ensures that no value is present for ExtractionModel, not even an explicit nil
func (o *TestPlanSelectModel) UnsetExtractionModel() {
	o.ExtractionModel.Unset()
}

func (o TestPlanSelectModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanSelectModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filter"] = o.Filter
	if o.ExtractionModel.IsSet() {
		toSerialize["extractionModel"] = o.ExtractionModel.Get()
	}
	return toSerialize, nil
}

func (o *TestPlanSelectModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestPlanSelectModel := _TestPlanSelectModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestPlanSelectModel)

	if err != nil {
		return err
	}

	*o = TestPlanSelectModel(varTestPlanSelectModel)

	return err
}

type NullableTestPlanSelectModel struct {
	value *TestPlanSelectModel
	isSet bool
}

func (v NullableTestPlanSelectModel) Get() *TestPlanSelectModel {
	return v.value
}

func (v *NullableTestPlanSelectModel) Set(val *TestPlanSelectModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanSelectModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanSelectModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanSelectModel(val *TestPlanSelectModel) *NullableTestPlanSelectModel {
	return &NullableTestPlanSelectModel{value: val, isSet: true}
}

func (v NullableTestPlanSelectModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanSelectModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


