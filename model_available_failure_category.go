/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// AvailableFailureCategory the model 'AvailableFailureCategory'
type AvailableFailureCategory string

// List of AvailableFailureCategory
const (
	AVAILABLEFAILURECATEGORY_INFRASTRUCTURE_DEFECT AvailableFailureCategory = "InfrastructureDefect"
	AVAILABLEFAILURECATEGORY_PRODUCT_DEFECT AvailableFailureCategory = "ProductDefect"
	AVAILABLEFAILURECATEGORY_TEST_DEFECT AvailableFailureCategory = "TestDefect"
)

// All allowed values of AvailableFailureCategory enum
var AllowedAvailableFailureCategoryEnumValues = []AvailableFailureCategory{
	"InfrastructureDefect",
	"ProductDefect",
	"TestDefect",
}

func (v *AvailableFailureCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailableFailureCategory(value)
	for _, existing := range AllowedAvailableFailureCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailableFailureCategory", value)
}

// NewAvailableFailureCategoryFromValue returns a pointer to a valid AvailableFailureCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailableFailureCategoryFromValue(v string) (*AvailableFailureCategory, error) {
	ev := AvailableFailureCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailableFailureCategory: valid values are %v", v, AllowedAvailableFailureCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailableFailureCategory) IsValid() bool {
	for _, existing := range AllowedAvailableFailureCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailableFailureCategory value
func (v AvailableFailureCategory) Ptr() *AvailableFailureCategory {
	return &v
}

type NullableAvailableFailureCategory struct {
	value *AvailableFailureCategory
	isSet bool
}

func (v NullableAvailableFailureCategory) Get() *AvailableFailureCategory {
	return v.value
}

func (v *NullableAvailableFailureCategory) Set(val *AvailableFailureCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableFailureCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableFailureCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableFailureCategory(val *AvailableFailureCategory) *NullableAvailableFailureCategory {
	return &NullableAvailableFailureCategory{value: val, isSet: true}
}

func (v NullableAvailableFailureCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableFailureCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

