/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestRunByAutoTestApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunByAutoTestApiResult{}

// TestRunByAutoTestApiResult struct for TestRunByAutoTestApiResult
type TestRunByAutoTestApiResult struct {
	// Unique ID of the entity
	Id string `json:"id"`
	// Indicates if the entity is deleted
	IsDeleted bool `json:"isDeleted"`
	// Test run state
	// Deprecated
	StateName TestRunState `json:"stateName"`
	// Test run status
	Status TestStatusApiResult `json:"status"`
	// Project internal identifier
	ProjectId string `json:"projectId"`
	// Test plan internal identifier
	TestPlanId NullableString `json:"testPlanId,omitempty"`
	// Test run name
	Name NullableString `json:"name,omitempty"`
	// Test run description
	Description NullableString `json:"description,omitempty"`
}

type _TestRunByAutoTestApiResult TestRunByAutoTestApiResult

// NewTestRunByAutoTestApiResult instantiates a new TestRunByAutoTestApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunByAutoTestApiResult(id string, isDeleted bool, stateName TestRunState, status TestStatusApiResult, projectId string) *TestRunByAutoTestApiResult {
	this := TestRunByAutoTestApiResult{}
	this.Id = id
	this.IsDeleted = isDeleted
	this.StateName = stateName
	this.Status = status
	this.ProjectId = projectId
	return &this
}

// NewTestRunByAutoTestApiResultWithDefaults instantiates a new TestRunByAutoTestApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunByAutoTestApiResultWithDefaults() *TestRunByAutoTestApiResult {
	this := TestRunByAutoTestApiResult{}
	return &this
}

// GetId returns the Id field value
func (o *TestRunByAutoTestApiResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestRunByAutoTestApiResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestRunByAutoTestApiResult) SetId(v string) {
	o.Id = v
}

// GetIsDeleted returns the IsDeleted field value
func (o *TestRunByAutoTestApiResult) GetIsDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value
// and a boolean to check if the value has been set.
func (o *TestRunByAutoTestApiResult) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeleted, true
}

// SetIsDeleted sets field value
func (o *TestRunByAutoTestApiResult) SetIsDeleted(v bool) {
	o.IsDeleted = v
}

// GetStateName returns the StateName field value
// Deprecated
func (o *TestRunByAutoTestApiResult) GetStateName() TestRunState {
	if o == nil {
		var ret TestRunState
		return ret
	}

	return o.StateName
}

// GetStateNameOk returns a tuple with the StateName field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *TestRunByAutoTestApiResult) GetStateNameOk() (*TestRunState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateName, true
}

// SetStateName sets field value
// Deprecated
func (o *TestRunByAutoTestApiResult) SetStateName(v TestRunState) {
	o.StateName = v
}

// GetStatus returns the Status field value
func (o *TestRunByAutoTestApiResult) GetStatus() TestStatusApiResult {
	if o == nil {
		var ret TestStatusApiResult
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TestRunByAutoTestApiResult) GetStatusOk() (*TestStatusApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TestRunByAutoTestApiResult) SetStatus(v TestStatusApiResult) {
	o.Status = v
}

// GetProjectId returns the ProjectId field value
func (o *TestRunByAutoTestApiResult) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *TestRunByAutoTestApiResult) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *TestRunByAutoTestApiResult) SetProjectId(v string) {
	o.ProjectId = v
}

// GetTestPlanId returns the TestPlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunByAutoTestApiResult) GetTestPlanId() string {
	if o == nil || IsNil(o.TestPlanId.Get()) {
		var ret string
		return ret
	}
	return *o.TestPlanId.Get()
}

// GetTestPlanIdOk returns a tuple with the TestPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunByAutoTestApiResult) GetTestPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPlanId.Get(), o.TestPlanId.IsSet()
}

// HasTestPlanId returns a boolean if a field has been set.
func (o *TestRunByAutoTestApiResult) HasTestPlanId() bool {
	if o != nil && o.TestPlanId.IsSet() {
		return true
	}

	return false
}

// SetTestPlanId gets a reference to the given NullableString and assigns it to the TestPlanId field.
func (o *TestRunByAutoTestApiResult) SetTestPlanId(v string) {
	o.TestPlanId.Set(&v)
}
// SetTestPlanIdNil sets the value for TestPlanId to be an explicit nil
func (o *TestRunByAutoTestApiResult) SetTestPlanIdNil() {
	o.TestPlanId.Set(nil)
}

// UnsetTestPlanId ensures that no value is present for TestPlanId, not even an explicit nil
func (o *TestRunByAutoTestApiResult) UnsetTestPlanId() {
	o.TestPlanId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunByAutoTestApiResult) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunByAutoTestApiResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TestRunByAutoTestApiResult) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TestRunByAutoTestApiResult) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TestRunByAutoTestApiResult) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TestRunByAutoTestApiResult) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestRunByAutoTestApiResult) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestRunByAutoTestApiResult) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TestRunByAutoTestApiResult) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TestRunByAutoTestApiResult) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TestRunByAutoTestApiResult) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TestRunByAutoTestApiResult) UnsetDescription() {
	o.Description.Unset()
}

func (o TestRunByAutoTestApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunByAutoTestApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["isDeleted"] = o.IsDeleted
	toSerialize["stateName"] = o.StateName
	toSerialize["status"] = o.Status
	toSerialize["projectId"] = o.ProjectId
	if o.TestPlanId.IsSet() {
		toSerialize["testPlanId"] = o.TestPlanId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

func (o *TestRunByAutoTestApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"isDeleted",
		"stateName",
		"status",
		"projectId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestRunByAutoTestApiResult := _TestRunByAutoTestApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestRunByAutoTestApiResult)

	if err != nil {
		return err
	}

	*o = TestRunByAutoTestApiResult(varTestRunByAutoTestApiResult)

	return err
}

type NullableTestRunByAutoTestApiResult struct {
	value *TestRunByAutoTestApiResult
	isSet bool
}

func (v NullableTestRunByAutoTestApiResult) Get() *TestRunByAutoTestApiResult {
	return v.value
}

func (v *NullableTestRunByAutoTestApiResult) Set(val *TestRunByAutoTestApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunByAutoTestApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunByAutoTestApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunByAutoTestApiResult(val *TestRunByAutoTestApiResult) *NullableTestRunByAutoTestApiResult {
	return &NullableTestRunByAutoTestApiResult{value: val, isSet: true}
}

func (v NullableTestRunByAutoTestApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunByAutoTestApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


