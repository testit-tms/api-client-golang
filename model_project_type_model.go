/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// ProjectTypeModel the model 'ProjectTypeModel'
type ProjectTypeModel string

// List of ProjectTypeModel
const (
	PROJECTTYPEMODEL_REGULAR ProjectTypeModel = "Regular"
	PROJECTTYPEMODEL_DEMO ProjectTypeModel = "Demo"
)

// All allowed values of ProjectTypeModel enum
var AllowedProjectTypeModelEnumValues = []ProjectTypeModel{
	"Regular",
	"Demo",
}

func (v *ProjectTypeModel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProjectTypeModel(value)
	for _, existing := range AllowedProjectTypeModelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProjectTypeModel", value)
}

// NewProjectTypeModelFromValue returns a pointer to a valid ProjectTypeModel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProjectTypeModelFromValue(v string) (*ProjectTypeModel, error) {
	ev := ProjectTypeModel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProjectTypeModel: valid values are %v", v, AllowedProjectTypeModelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProjectTypeModel) IsValid() bool {
	for _, existing := range AllowedProjectTypeModelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProjectTypeModel value
func (v ProjectTypeModel) Ptr() *ProjectTypeModel {
	return &v
}

type NullableProjectTypeModel struct {
	value *ProjectTypeModel
	isSet bool
}

func (v NullableProjectTypeModel) Get() *ProjectTypeModel {
	return v.value
}

func (v *NullableProjectTypeModel) Set(val *ProjectTypeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTypeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTypeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTypeModel(val *ProjectTypeModel) *NullableProjectTypeModel {
	return &NullableProjectTypeModel{value: val, isSet: true}
}

func (v NullableProjectTypeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTypeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

