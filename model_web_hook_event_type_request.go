/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WebHookEventTypeRequest the model 'WebHookEventTypeRequest'
type WebHookEventTypeRequest string

// List of WebHookEventTypeRequest
const (
	WEBHOOKEVENTTYPEREQUEST_AUTOMATED_TEST_RUN_CREATED WebHookEventTypeRequest = "AutomatedTestRunCreated"
	WEBHOOKEVENTTYPEREQUEST_TEST_PLANS_STATUS_CHANGED WebHookEventTypeRequest = "TestPlansStatusChanged"
	WEBHOOKEVENTTYPEREQUEST_TEST_RUN_STOPPED WebHookEventTypeRequest = "TestRunStopped"
	WEBHOOKEVENTTYPEREQUEST_TEST_POINT_ASSIGNED WebHookEventTypeRequest = "TestPointAssigned"
	WEBHOOKEVENTTYPEREQUEST_TEST_RESULT_JIRA_ISSUE_CREATED WebHookEventTypeRequest = "TestResultJiraIssueCreated"
	WEBHOOKEVENTTYPEREQUEST_AUTO_TEST_FINISHED WebHookEventTypeRequest = "AutoTestFinished"
	WEBHOOKEVENTTYPEREQUEST_USER_MENTIONED_IN_COMMENT WebHookEventTypeRequest = "UserMentionedInComment"
	WEBHOOKEVENTTYPEREQUEST_USER_SELECTED_IN_WORK_ITEM_ATTRIBUTE WebHookEventTypeRequest = "UserSelectedInWorkItemAttribute"
	WEBHOOKEVENTTYPEREQUEST_ALL_TEST_POINTS_FINISHED WebHookEventTypeRequest = "AllTestPointsFinished"
	WEBHOOKEVENTTYPEREQUEST_ALL_AUTO_TESTS_FINISHED WebHookEventTypeRequest = "AllAutoTestsFinished"
	WEBHOOKEVENTTYPEREQUEST_AUTO_TEST_CHANGED WebHookEventTypeRequest = "AutoTestChanged"
	WEBHOOKEVENTTYPEREQUEST_WORK_ITEM_AUTO_TEST_RELATION_CHANGED WebHookEventTypeRequest = "WorkItemAutoTestRelationChanged"
	WEBHOOKEVENTTYPEREQUEST_WORK_ITEM_ATTRIBUTE_CHANGED WebHookEventTypeRequest = "WorkItemAttributeChanged"
	WEBHOOKEVENTTYPEREQUEST_WORK_ITEM_CHANGED WebHookEventTypeRequest = "WorkItemChanged"
	WEBHOOKEVENTTYPEREQUEST_CONFIGURATION_CHANGED WebHookEventTypeRequest = "ConfigurationChanged"
	WEBHOOKEVENTTYPEREQUEST_PROJECT_CHANGED WebHookEventTypeRequest = "ProjectChanged"
	WEBHOOKEVENTTYPEREQUEST_TEST_PLAN_CHANGED WebHookEventTypeRequest = "TestPlanChanged"
)

// All allowed values of WebHookEventTypeRequest enum
var AllowedWebHookEventTypeRequestEnumValues = []WebHookEventTypeRequest{
	"AutomatedTestRunCreated",
	"TestPlansStatusChanged",
	"TestRunStopped",
	"TestPointAssigned",
	"TestResultJiraIssueCreated",
	"AutoTestFinished",
	"UserMentionedInComment",
	"UserSelectedInWorkItemAttribute",
	"AllTestPointsFinished",
	"AllAutoTestsFinished",
	"AutoTestChanged",
	"WorkItemAutoTestRelationChanged",
	"WorkItemAttributeChanged",
	"WorkItemChanged",
	"ConfigurationChanged",
	"ProjectChanged",
	"TestPlanChanged",
}

func (v *WebHookEventTypeRequest) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebHookEventTypeRequest(value)
	for _, existing := range AllowedWebHookEventTypeRequestEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebHookEventTypeRequest", value)
}

// NewWebHookEventTypeRequestFromValue returns a pointer to a valid WebHookEventTypeRequest
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebHookEventTypeRequestFromValue(v string) (*WebHookEventTypeRequest, error) {
	ev := WebHookEventTypeRequest(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebHookEventTypeRequest: valid values are %v", v, AllowedWebHookEventTypeRequestEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebHookEventTypeRequest) IsValid() bool {
	for _, existing := range AllowedWebHookEventTypeRequestEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebHookEventTypeRequest value
func (v WebHookEventTypeRequest) Ptr() *WebHookEventTypeRequest {
	return &v
}

type NullableWebHookEventTypeRequest struct {
	value *WebHookEventTypeRequest
	isSet bool
}

func (v NullableWebHookEventTypeRequest) Get() *WebHookEventTypeRequest {
	return v.value
}

func (v *NullableWebHookEventTypeRequest) Set(val *WebHookEventTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWebHookEventTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWebHookEventTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebHookEventTypeRequest(val *WebHookEventTypeRequest) *NullableWebHookEventTypeRequest {
	return &NullableWebHookEventTypeRequest{value: val, isSet: true}
}

func (v NullableWebHookEventTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebHookEventTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

