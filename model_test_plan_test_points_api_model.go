/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the TestPlanTestPointsApiModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanTestPointsApiModel{}

// TestPlanTestPointsApiModel struct for TestPlanTestPointsApiModel
type TestPlanTestPointsApiModel struct {
	Filter NullableTestPlanTestPointsSearchApiModel `json:"filter,omitempty"`
	Group NullableTestPlanTestPointsGroupApiModel `json:"group,omitempty"`
	Inquiry NullableTestPlanTestPointsInquiryApiModel `json:"inquiry,omitempty"`
}

// NewTestPlanTestPointsApiModel instantiates a new TestPlanTestPointsApiModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanTestPointsApiModel() *TestPlanTestPointsApiModel {
	this := TestPlanTestPointsApiModel{}
	return &this
}

// NewTestPlanTestPointsApiModelWithDefaults instantiates a new TestPlanTestPointsApiModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanTestPointsApiModelWithDefaults() *TestPlanTestPointsApiModel {
	this := TestPlanTestPointsApiModel{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanTestPointsApiModel) GetFilter() TestPlanTestPointsSearchApiModel {
	if o == nil || IsNil(o.Filter.Get()) {
		var ret TestPlanTestPointsSearchApiModel
		return ret
	}
	return *o.Filter.Get()
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanTestPointsApiModel) GetFilterOk() (*TestPlanTestPointsSearchApiModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filter.Get(), o.Filter.IsSet()
}

// HasFilter returns a boolean if a field has been set.
func (o *TestPlanTestPointsApiModel) HasFilter() bool {
	if o != nil && o.Filter.IsSet() {
		return true
	}

	return false
}

// SetFilter gets a reference to the given NullableTestPlanTestPointsSearchApiModel and assigns it to the Filter field.
func (o *TestPlanTestPointsApiModel) SetFilter(v TestPlanTestPointsSearchApiModel) {
	o.Filter.Set(&v)
}
// SetFilterNil sets the value for Filter to be an explicit nil
func (o *TestPlanTestPointsApiModel) SetFilterNil() {
	o.Filter.Set(nil)
}

// UnsetFilter ensures that no value is present for Filter, not even an explicit nil
func (o *TestPlanTestPointsApiModel) UnsetFilter() {
	o.Filter.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanTestPointsApiModel) GetGroup() TestPlanTestPointsGroupApiModel {
	if o == nil || IsNil(o.Group.Get()) {
		var ret TestPlanTestPointsGroupApiModel
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanTestPointsApiModel) GetGroupOk() (*TestPlanTestPointsGroupApiModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *TestPlanTestPointsApiModel) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableTestPlanTestPointsGroupApiModel and assigns it to the Group field.
func (o *TestPlanTestPointsApiModel) SetGroup(v TestPlanTestPointsGroupApiModel) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *TestPlanTestPointsApiModel) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *TestPlanTestPointsApiModel) UnsetGroup() {
	o.Group.Unset()
}

// GetInquiry returns the Inquiry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanTestPointsApiModel) GetInquiry() TestPlanTestPointsInquiryApiModel {
	if o == nil || IsNil(o.Inquiry.Get()) {
		var ret TestPlanTestPointsInquiryApiModel
		return ret
	}
	return *o.Inquiry.Get()
}

// GetInquiryOk returns a tuple with the Inquiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanTestPointsApiModel) GetInquiryOk() (*TestPlanTestPointsInquiryApiModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inquiry.Get(), o.Inquiry.IsSet()
}

// HasInquiry returns a boolean if a field has been set.
func (o *TestPlanTestPointsApiModel) HasInquiry() bool {
	if o != nil && o.Inquiry.IsSet() {
		return true
	}

	return false
}

// SetInquiry gets a reference to the given NullableTestPlanTestPointsInquiryApiModel and assigns it to the Inquiry field.
func (o *TestPlanTestPointsApiModel) SetInquiry(v TestPlanTestPointsInquiryApiModel) {
	o.Inquiry.Set(&v)
}
// SetInquiryNil sets the value for Inquiry to be an explicit nil
func (o *TestPlanTestPointsApiModel) SetInquiryNil() {
	o.Inquiry.Set(nil)
}

// UnsetInquiry ensures that no value is present for Inquiry, not even an explicit nil
func (o *TestPlanTestPointsApiModel) UnsetInquiry() {
	o.Inquiry.Unset()
}

func (o TestPlanTestPointsApiModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanTestPointsApiModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter.IsSet() {
		toSerialize["filter"] = o.Filter.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Inquiry.IsSet() {
		toSerialize["inquiry"] = o.Inquiry.Get()
	}
	return toSerialize, nil
}

type NullableTestPlanTestPointsApiModel struct {
	value *TestPlanTestPointsApiModel
	isSet bool
}

func (v NullableTestPlanTestPointsApiModel) Get() *TestPlanTestPointsApiModel {
	return v.value
}

func (v *NullableTestPlanTestPointsApiModel) Set(val *TestPlanTestPointsApiModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanTestPointsApiModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanTestPointsApiModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanTestPointsApiModel(val *TestPlanTestPointsApiModel) *NullableTestPlanTestPointsApiModel {
	return &NullableTestPlanTestPointsApiModel{value: val, isSet: true}
}

func (v NullableTestPlanTestPointsApiModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanTestPointsApiModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


