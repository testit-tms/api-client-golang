/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// CustomAttributeTypesEnum the model 'CustomAttributeTypesEnum'
type CustomAttributeTypesEnum string

// List of CustomAttributeTypesEnum
const (
	CUSTOMATTRIBUTETYPESENUM_STRING CustomAttributeTypesEnum = "string"
	CUSTOMATTRIBUTETYPESENUM_DATETIME CustomAttributeTypesEnum = "datetime"
	CUSTOMATTRIBUTETYPESENUM_OPTIONS CustomAttributeTypesEnum = "options"
	CUSTOMATTRIBUTETYPESENUM_USER CustomAttributeTypesEnum = "user"
	CUSTOMATTRIBUTETYPESENUM_MULTIPLE_OPTIONS CustomAttributeTypesEnum = "multipleOptions"
)

// All allowed values of CustomAttributeTypesEnum enum
var AllowedCustomAttributeTypesEnumEnumValues = []CustomAttributeTypesEnum{
	"string",
	"datetime",
	"options",
	"user",
	"multipleOptions",
}

func (v *CustomAttributeTypesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomAttributeTypesEnum(value)
	for _, existing := range AllowedCustomAttributeTypesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomAttributeTypesEnum", value)
}

// NewCustomAttributeTypesEnumFromValue returns a pointer to a valid CustomAttributeTypesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomAttributeTypesEnumFromValue(v string) (*CustomAttributeTypesEnum, error) {
	ev := CustomAttributeTypesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomAttributeTypesEnum: valid values are %v", v, AllowedCustomAttributeTypesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomAttributeTypesEnum) IsValid() bool {
	for _, existing := range AllowedCustomAttributeTypesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomAttributeTypesEnum value
func (v CustomAttributeTypesEnum) Ptr() *CustomAttributeTypesEnum {
	return &v
}

type NullableCustomAttributeTypesEnum struct {
	value *CustomAttributeTypesEnum
	isSet bool
}

func (v NullableCustomAttributeTypesEnum) Get() *CustomAttributeTypesEnum {
	return v.value
}

func (v *NullableCustomAttributeTypesEnum) Set(val *CustomAttributeTypesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAttributeTypesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAttributeTypesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAttributeTypesEnum(val *CustomAttributeTypesEnum) *NullableCustomAttributeTypesEnum {
	return &NullableCustomAttributeTypesEnum{value: val, isSet: true}
}

func (v NullableCustomAttributeTypesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAttributeTypesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

