/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkflowStatusApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowStatusApiResult{}

// WorkflowStatusApiResult struct for WorkflowStatusApiResult
type WorkflowStatusApiResult struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Code string `json:"code"`
	// Collection of possible status types
	Type TestStatusApiType `json:"type"`
	Description NullableString `json:"description"`
	IsSystem bool `json:"isSystem"`
	Priority int32 `json:"priority"`
}

type _WorkflowStatusApiResult WorkflowStatusApiResult

// NewWorkflowStatusApiResult instantiates a new WorkflowStatusApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowStatusApiResult(id string, name string, code string, type_ TestStatusApiType, description NullableString, isSystem bool, priority int32) *WorkflowStatusApiResult {
	this := WorkflowStatusApiResult{}
	this.Id = id
	this.Name = name
	this.Code = code
	this.Type = type_
	this.Description = description
	this.IsSystem = isSystem
	this.Priority = priority
	return &this
}

// NewWorkflowStatusApiResultWithDefaults instantiates a new WorkflowStatusApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowStatusApiResultWithDefaults() *WorkflowStatusApiResult {
	this := WorkflowStatusApiResult{}
	return &this
}

// GetId returns the Id field value
func (o *WorkflowStatusApiResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WorkflowStatusApiResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WorkflowStatusApiResult) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *WorkflowStatusApiResult) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkflowStatusApiResult) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkflowStatusApiResult) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *WorkflowStatusApiResult) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *WorkflowStatusApiResult) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *WorkflowStatusApiResult) SetCode(v string) {
	o.Code = v
}

// GetType returns the Type field value
func (o *WorkflowStatusApiResult) GetType() TestStatusApiType {
	if o == nil {
		var ret TestStatusApiType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WorkflowStatusApiResult) GetTypeOk() (*TestStatusApiType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WorkflowStatusApiResult) SetType(v TestStatusApiType) {
	o.Type = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WorkflowStatusApiResult) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowStatusApiResult) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *WorkflowStatusApiResult) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetIsSystem returns the IsSystem field value
func (o *WorkflowStatusApiResult) GetIsSystem() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSystem
}

// GetIsSystemOk returns a tuple with the IsSystem field value
// and a boolean to check if the value has been set.
func (o *WorkflowStatusApiResult) GetIsSystemOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSystem, true
}

// SetIsSystem sets field value
func (o *WorkflowStatusApiResult) SetIsSystem(v bool) {
	o.IsSystem = v
}

// GetPriority returns the Priority field value
func (o *WorkflowStatusApiResult) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *WorkflowStatusApiResult) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *WorkflowStatusApiResult) SetPriority(v int32) {
	o.Priority = v
}

func (o WorkflowStatusApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowStatusApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["code"] = o.Code
	toSerialize["type"] = o.Type
	toSerialize["description"] = o.Description.Get()
	toSerialize["isSystem"] = o.IsSystem
	toSerialize["priority"] = o.Priority
	return toSerialize, nil
}

func (o *WorkflowStatusApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"code",
		"type",
		"description",
		"isSystem",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkflowStatusApiResult := _WorkflowStatusApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkflowStatusApiResult)

	if err != nil {
		return err
	}

	*o = WorkflowStatusApiResult(varWorkflowStatusApiResult)

	return err
}

type NullableWorkflowStatusApiResult struct {
	value *WorkflowStatusApiResult
	isSet bool
}

func (v NullableWorkflowStatusApiResult) Get() *WorkflowStatusApiResult {
	return v.value
}

func (v *NullableWorkflowStatusApiResult) Set(val *WorkflowStatusApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStatusApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStatusApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStatusApiResult(val *WorkflowStatusApiResult) *NullableWorkflowStatusApiResult {
	return &NullableWorkflowStatusApiResult{value: val, isSet: true}
}

func (v NullableWorkflowStatusApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStatusApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


