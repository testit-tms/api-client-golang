/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AutoTestResultReasonsCountItemModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoTestResultReasonsCountItemModel{}

// AutoTestResultReasonsCountItemModel struct for AutoTestResultReasonsCountItemModel
type AutoTestResultReasonsCountItemModel struct {
	FailureCategory AvailableFailureCategory `json:"failureCategory"`
	Count int32 `json:"count"`
}

type _AutoTestResultReasonsCountItemModel AutoTestResultReasonsCountItemModel

// NewAutoTestResultReasonsCountItemModel instantiates a new AutoTestResultReasonsCountItemModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoTestResultReasonsCountItemModel(failureCategory AvailableFailureCategory, count int32) *AutoTestResultReasonsCountItemModel {
	this := AutoTestResultReasonsCountItemModel{}
	this.FailureCategory = failureCategory
	this.Count = count
	return &this
}

// NewAutoTestResultReasonsCountItemModelWithDefaults instantiates a new AutoTestResultReasonsCountItemModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoTestResultReasonsCountItemModelWithDefaults() *AutoTestResultReasonsCountItemModel {
	this := AutoTestResultReasonsCountItemModel{}
	return &this
}

// GetFailureCategory returns the FailureCategory field value
func (o *AutoTestResultReasonsCountItemModel) GetFailureCategory() AvailableFailureCategory {
	if o == nil {
		var ret AvailableFailureCategory
		return ret
	}

	return o.FailureCategory
}

// GetFailureCategoryOk returns a tuple with the FailureCategory field value
// and a boolean to check if the value has been set.
func (o *AutoTestResultReasonsCountItemModel) GetFailureCategoryOk() (*AvailableFailureCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureCategory, true
}

// SetFailureCategory sets field value
func (o *AutoTestResultReasonsCountItemModel) SetFailureCategory(v AvailableFailureCategory) {
	o.FailureCategory = v
}

// GetCount returns the Count field value
func (o *AutoTestResultReasonsCountItemModel) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AutoTestResultReasonsCountItemModel) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AutoTestResultReasonsCountItemModel) SetCount(v int32) {
	o.Count = v
}

func (o AutoTestResultReasonsCountItemModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoTestResultReasonsCountItemModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["failureCategory"] = o.FailureCategory
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *AutoTestResultReasonsCountItemModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"failureCategory",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAutoTestResultReasonsCountItemModel := _AutoTestResultReasonsCountItemModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAutoTestResultReasonsCountItemModel)

	if err != nil {
		return err
	}

	*o = AutoTestResultReasonsCountItemModel(varAutoTestResultReasonsCountItemModel)

	return err
}

type NullableAutoTestResultReasonsCountItemModel struct {
	value *AutoTestResultReasonsCountItemModel
	isSet bool
}

func (v NullableAutoTestResultReasonsCountItemModel) Get() *AutoTestResultReasonsCountItemModel {
	return v.value
}

func (v *NullableAutoTestResultReasonsCountItemModel) Set(val *AutoTestResultReasonsCountItemModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoTestResultReasonsCountItemModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoTestResultReasonsCountItemModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoTestResultReasonsCountItemModel(val *AutoTestResultReasonsCountItemModel) *NullableAutoTestResultReasonsCountItemModel {
	return &NullableAutoTestResultReasonsCountItemModel{value: val, isSet: true}
}

func (v NullableAutoTestResultReasonsCountItemModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoTestResultReasonsCountItemModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


