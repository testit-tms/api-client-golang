/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the AutotestResultReasonFilterModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutotestResultReasonFilterModel{}

// AutotestResultReasonFilterModel struct for AutotestResultReasonFilterModel
type AutotestResultReasonFilterModel struct {
	FailureCategories []AvailableFailureCategory `json:"failureCategories,omitempty"`
	Name NullableString `json:"name,omitempty"`
	RegexCount NullableInt32RangeSelectorModel `json:"regexCount,omitempty"`
	IsDeleted NullableBool `json:"isDeleted,omitempty"`
}

// NewAutotestResultReasonFilterModel instantiates a new AutotestResultReasonFilterModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutotestResultReasonFilterModel() *AutotestResultReasonFilterModel {
	this := AutotestResultReasonFilterModel{}
	return &this
}

// NewAutotestResultReasonFilterModelWithDefaults instantiates a new AutotestResultReasonFilterModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutotestResultReasonFilterModelWithDefaults() *AutotestResultReasonFilterModel {
	this := AutotestResultReasonFilterModel{}
	return &this
}

// GetFailureCategories returns the FailureCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutotestResultReasonFilterModel) GetFailureCategories() []AvailableFailureCategory {
	if o == nil {
		var ret []AvailableFailureCategory
		return ret
	}
	return o.FailureCategories
}

// GetFailureCategoriesOk returns a tuple with the FailureCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutotestResultReasonFilterModel) GetFailureCategoriesOk() ([]AvailableFailureCategory, bool) {
	if o == nil || IsNil(o.FailureCategories) {
		return nil, false
	}
	return o.FailureCategories, true
}

// HasFailureCategories returns a boolean if a field has been set.
func (o *AutotestResultReasonFilterModel) HasFailureCategories() bool {
	if o != nil && !IsNil(o.FailureCategories) {
		return true
	}

	return false
}

// SetFailureCategories gets a reference to the given []AvailableFailureCategory and assigns it to the FailureCategories field.
func (o *AutotestResultReasonFilterModel) SetFailureCategories(v []AvailableFailureCategory) {
	o.FailureCategories = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutotestResultReasonFilterModel) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutotestResultReasonFilterModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AutotestResultReasonFilterModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AutotestResultReasonFilterModel) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AutotestResultReasonFilterModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AutotestResultReasonFilterModel) UnsetName() {
	o.Name.Unset()
}

// GetRegexCount returns the RegexCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutotestResultReasonFilterModel) GetRegexCount() Int32RangeSelectorModel {
	if o == nil || IsNil(o.RegexCount.Get()) {
		var ret Int32RangeSelectorModel
		return ret
	}
	return *o.RegexCount.Get()
}

// GetRegexCountOk returns a tuple with the RegexCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutotestResultReasonFilterModel) GetRegexCountOk() (*Int32RangeSelectorModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegexCount.Get(), o.RegexCount.IsSet()
}

// HasRegexCount returns a boolean if a field has been set.
func (o *AutotestResultReasonFilterModel) HasRegexCount() bool {
	if o != nil && o.RegexCount.IsSet() {
		return true
	}

	return false
}

// SetRegexCount gets a reference to the given NullableInt32RangeSelectorModel and assigns it to the RegexCount field.
func (o *AutotestResultReasonFilterModel) SetRegexCount(v Int32RangeSelectorModel) {
	o.RegexCount.Set(&v)
}
// SetRegexCountNil sets the value for RegexCount to be an explicit nil
func (o *AutotestResultReasonFilterModel) SetRegexCountNil() {
	o.RegexCount.Set(nil)
}

// UnsetRegexCount ensures that no value is present for RegexCount, not even an explicit nil
func (o *AutotestResultReasonFilterModel) UnsetRegexCount() {
	o.RegexCount.Unset()
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutotestResultReasonFilterModel) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDeleted.Get()
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutotestResultReasonFilterModel) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDeleted.Get(), o.IsDeleted.IsSet()
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *AutotestResultReasonFilterModel) HasIsDeleted() bool {
	if o != nil && o.IsDeleted.IsSet() {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given NullableBool and assigns it to the IsDeleted field.
func (o *AutotestResultReasonFilterModel) SetIsDeleted(v bool) {
	o.IsDeleted.Set(&v)
}
// SetIsDeletedNil sets the value for IsDeleted to be an explicit nil
func (o *AutotestResultReasonFilterModel) SetIsDeletedNil() {
	o.IsDeleted.Set(nil)
}

// UnsetIsDeleted ensures that no value is present for IsDeleted, not even an explicit nil
func (o *AutotestResultReasonFilterModel) UnsetIsDeleted() {
	o.IsDeleted.Unset()
}

func (o AutotestResultReasonFilterModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutotestResultReasonFilterModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureCategories != nil {
		toSerialize["failureCategories"] = o.FailureCategories
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RegexCount.IsSet() {
		toSerialize["regexCount"] = o.RegexCount.Get()
	}
	if o.IsDeleted.IsSet() {
		toSerialize["isDeleted"] = o.IsDeleted.Get()
	}
	return toSerialize, nil
}

type NullableAutotestResultReasonFilterModel struct {
	value *AutotestResultReasonFilterModel
	isSet bool
}

func (v NullableAutotestResultReasonFilterModel) Get() *AutotestResultReasonFilterModel {
	return v.value
}

func (v *NullableAutotestResultReasonFilterModel) Set(val *AutotestResultReasonFilterModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAutotestResultReasonFilterModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAutotestResultReasonFilterModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutotestResultReasonFilterModel(val *AutotestResultReasonFilterModel) *NullableAutotestResultReasonFilterModel {
	return &NullableAutotestResultReasonFilterModel{value: val, isSet: true}
}

func (v NullableAutotestResultReasonFilterModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutotestResultReasonFilterModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


