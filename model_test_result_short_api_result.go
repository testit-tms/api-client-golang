/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TestResultShortApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultShortApiResult{}

// TestResultShortApiResult struct for TestResultShortApiResult
type TestResultShortApiResult struct {
	Id string `json:"id"`
	Outcome string `json:"outcome"`
	Status TestStatusApiResult `json:"status"`
	Traces NullableString `json:"traces,omitempty"`
	FailureType NullableString `json:"failureType,omitempty"`
	Message NullableString `json:"message,omitempty"`
	TestPoint NullableTestPointShortApiResult `json:"testPoint,omitempty"`
	CreatedDate time.Time `json:"createdDate"`
	AutoTest NullableAutoTestShortApiResult `json:"autoTest,omitempty"`
	Attachments []AttachmentApiResult `json:"attachments"`
}

type _TestResultShortApiResult TestResultShortApiResult

// NewTestResultShortApiResult instantiates a new TestResultShortApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultShortApiResult(id string, outcome string, status TestStatusApiResult, createdDate time.Time, attachments []AttachmentApiResult) *TestResultShortApiResult {
	this := TestResultShortApiResult{}
	this.Id = id
	this.Outcome = outcome
	this.Status = status
	this.CreatedDate = createdDate
	this.Attachments = attachments
	return &this
}

// NewTestResultShortApiResultWithDefaults instantiates a new TestResultShortApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultShortApiResultWithDefaults() *TestResultShortApiResult {
	this := TestResultShortApiResult{}
	return &this
}

// GetId returns the Id field value
func (o *TestResultShortApiResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestResultShortApiResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestResultShortApiResult) SetId(v string) {
	o.Id = v
}

// GetOutcome returns the Outcome field value
func (o *TestResultShortApiResult) GetOutcome() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value
// and a boolean to check if the value has been set.
func (o *TestResultShortApiResult) GetOutcomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outcome, true
}

// SetOutcome sets field value
func (o *TestResultShortApiResult) SetOutcome(v string) {
	o.Outcome = v
}

// GetStatus returns the Status field value
func (o *TestResultShortApiResult) GetStatus() TestStatusApiResult {
	if o == nil {
		var ret TestStatusApiResult
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TestResultShortApiResult) GetStatusOk() (*TestStatusApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TestResultShortApiResult) SetStatus(v TestStatusApiResult) {
	o.Status = v
}

// GetTraces returns the Traces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortApiResult) GetTraces() string {
	if o == nil || IsNil(o.Traces.Get()) {
		var ret string
		return ret
	}
	return *o.Traces.Get()
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortApiResult) GetTracesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traces.Get(), o.Traces.IsSet()
}

// HasTraces returns a boolean if a field has been set.
func (o *TestResultShortApiResult) HasTraces() bool {
	if o != nil && o.Traces.IsSet() {
		return true
	}

	return false
}

// SetTraces gets a reference to the given NullableString and assigns it to the Traces field.
func (o *TestResultShortApiResult) SetTraces(v string) {
	o.Traces.Set(&v)
}
// SetTracesNil sets the value for Traces to be an explicit nil
func (o *TestResultShortApiResult) SetTracesNil() {
	o.Traces.Set(nil)
}

// UnsetTraces ensures that no value is present for Traces, not even an explicit nil
func (o *TestResultShortApiResult) UnsetTraces() {
	o.Traces.Unset()
}

// GetFailureType returns the FailureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortApiResult) GetFailureType() string {
	if o == nil || IsNil(o.FailureType.Get()) {
		var ret string
		return ret
	}
	return *o.FailureType.Get()
}

// GetFailureTypeOk returns a tuple with the FailureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortApiResult) GetFailureTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureType.Get(), o.FailureType.IsSet()
}

// HasFailureType returns a boolean if a field has been set.
func (o *TestResultShortApiResult) HasFailureType() bool {
	if o != nil && o.FailureType.IsSet() {
		return true
	}

	return false
}

// SetFailureType gets a reference to the given NullableString and assigns it to the FailureType field.
func (o *TestResultShortApiResult) SetFailureType(v string) {
	o.FailureType.Set(&v)
}
// SetFailureTypeNil sets the value for FailureType to be an explicit nil
func (o *TestResultShortApiResult) SetFailureTypeNil() {
	o.FailureType.Set(nil)
}

// UnsetFailureType ensures that no value is present for FailureType, not even an explicit nil
func (o *TestResultShortApiResult) UnsetFailureType() {
	o.FailureType.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortApiResult) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortApiResult) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *TestResultShortApiResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *TestResultShortApiResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *TestResultShortApiResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *TestResultShortApiResult) UnsetMessage() {
	o.Message.Unset()
}

// GetTestPoint returns the TestPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortApiResult) GetTestPoint() TestPointShortApiResult {
	if o == nil || IsNil(o.TestPoint.Get()) {
		var ret TestPointShortApiResult
		return ret
	}
	return *o.TestPoint.Get()
}

// GetTestPointOk returns a tuple with the TestPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortApiResult) GetTestPointOk() (*TestPointShortApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPoint.Get(), o.TestPoint.IsSet()
}

// HasTestPoint returns a boolean if a field has been set.
func (o *TestResultShortApiResult) HasTestPoint() bool {
	if o != nil && o.TestPoint.IsSet() {
		return true
	}

	return false
}

// SetTestPoint gets a reference to the given NullableTestPointShortApiResult and assigns it to the TestPoint field.
func (o *TestResultShortApiResult) SetTestPoint(v TestPointShortApiResult) {
	o.TestPoint.Set(&v)
}
// SetTestPointNil sets the value for TestPoint to be an explicit nil
func (o *TestResultShortApiResult) SetTestPointNil() {
	o.TestPoint.Set(nil)
}

// UnsetTestPoint ensures that no value is present for TestPoint, not even an explicit nil
func (o *TestResultShortApiResult) UnsetTestPoint() {
	o.TestPoint.Unset()
}

// GetCreatedDate returns the CreatedDate field value
func (o *TestResultShortApiResult) GetCreatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *TestResultShortApiResult) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *TestResultShortApiResult) SetCreatedDate(v time.Time) {
	o.CreatedDate = v
}

// GetAutoTest returns the AutoTest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortApiResult) GetAutoTest() AutoTestShortApiResult {
	if o == nil || IsNil(o.AutoTest.Get()) {
		var ret AutoTestShortApiResult
		return ret
	}
	return *o.AutoTest.Get()
}

// GetAutoTestOk returns a tuple with the AutoTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortApiResult) GetAutoTestOk() (*AutoTestShortApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoTest.Get(), o.AutoTest.IsSet()
}

// HasAutoTest returns a boolean if a field has been set.
func (o *TestResultShortApiResult) HasAutoTest() bool {
	if o != nil && o.AutoTest.IsSet() {
		return true
	}

	return false
}

// SetAutoTest gets a reference to the given NullableAutoTestShortApiResult and assigns it to the AutoTest field.
func (o *TestResultShortApiResult) SetAutoTest(v AutoTestShortApiResult) {
	o.AutoTest.Set(&v)
}
// SetAutoTestNil sets the value for AutoTest to be an explicit nil
func (o *TestResultShortApiResult) SetAutoTestNil() {
	o.AutoTest.Set(nil)
}

// UnsetAutoTest ensures that no value is present for AutoTest, not even an explicit nil
func (o *TestResultShortApiResult) UnsetAutoTest() {
	o.AutoTest.Unset()
}

// GetAttachments returns the Attachments field value
func (o *TestResultShortApiResult) GetAttachments() []AttachmentApiResult {
	if o == nil {
		var ret []AttachmentApiResult
		return ret
	}

	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value
// and a boolean to check if the value has been set.
func (o *TestResultShortApiResult) GetAttachmentsOk() ([]AttachmentApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments, true
}

// SetAttachments sets field value
func (o *TestResultShortApiResult) SetAttachments(v []AttachmentApiResult) {
	o.Attachments = v
}

func (o TestResultShortApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultShortApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["outcome"] = o.Outcome
	toSerialize["status"] = o.Status
	if o.Traces.IsSet() {
		toSerialize["traces"] = o.Traces.Get()
	}
	if o.FailureType.IsSet() {
		toSerialize["failureType"] = o.FailureType.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.TestPoint.IsSet() {
		toSerialize["testPoint"] = o.TestPoint.Get()
	}
	toSerialize["createdDate"] = o.CreatedDate
	if o.AutoTest.IsSet() {
		toSerialize["autoTest"] = o.AutoTest.Get()
	}
	toSerialize["attachments"] = o.Attachments
	return toSerialize, nil
}

func (o *TestResultShortApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"outcome",
		"status",
		"createdDate",
		"attachments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestResultShortApiResult := _TestResultShortApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestResultShortApiResult)

	if err != nil {
		return err
	}

	*o = TestResultShortApiResult(varTestResultShortApiResult)

	return err
}

type NullableTestResultShortApiResult struct {
	value *TestResultShortApiResult
	isSet bool
}

func (v NullableTestResultShortApiResult) Get() *TestResultShortApiResult {
	return v.value
}

func (v *NullableTestResultShortApiResult) Set(val *TestResultShortApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultShortApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultShortApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultShortApiResult(val *TestResultShortApiResult) *NullableTestResultShortApiResult {
	return &NullableTestResultShortApiResult{value: val, isSet: true}
}

func (v NullableTestResultShortApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultShortApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


