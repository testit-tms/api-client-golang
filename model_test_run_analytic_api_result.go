/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestRunAnalyticApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestRunAnalyticApiResult{}

// TestRunAnalyticApiResult struct for TestRunAnalyticApiResult
type TestRunAnalyticApiResult struct {
	CountGroupByStatus []TestRunGroupByStatusApiResult `json:"countGroupByStatus"`
	CountGroupByStatusType []TestRunGroupByStatusTypeApiResult `json:"countGroupByStatusType"`
	CountGroupByFailureClass []TestRunGroupByFailureClassApiResult `json:"countGroupByFailureClass"`
}

type _TestRunAnalyticApiResult TestRunAnalyticApiResult

// NewTestRunAnalyticApiResult instantiates a new TestRunAnalyticApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRunAnalyticApiResult(countGroupByStatus []TestRunGroupByStatusApiResult, countGroupByStatusType []TestRunGroupByStatusTypeApiResult, countGroupByFailureClass []TestRunGroupByFailureClassApiResult) *TestRunAnalyticApiResult {
	this := TestRunAnalyticApiResult{}
	this.CountGroupByStatus = countGroupByStatus
	this.CountGroupByStatusType = countGroupByStatusType
	this.CountGroupByFailureClass = countGroupByFailureClass
	return &this
}

// NewTestRunAnalyticApiResultWithDefaults instantiates a new TestRunAnalyticApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunAnalyticApiResultWithDefaults() *TestRunAnalyticApiResult {
	this := TestRunAnalyticApiResult{}
	return &this
}

// GetCountGroupByStatus returns the CountGroupByStatus field value
func (o *TestRunAnalyticApiResult) GetCountGroupByStatus() []TestRunGroupByStatusApiResult {
	if o == nil {
		var ret []TestRunGroupByStatusApiResult
		return ret
	}

	return o.CountGroupByStatus
}

// GetCountGroupByStatusOk returns a tuple with the CountGroupByStatus field value
// and a boolean to check if the value has been set.
func (o *TestRunAnalyticApiResult) GetCountGroupByStatusOk() ([]TestRunGroupByStatusApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountGroupByStatus, true
}

// SetCountGroupByStatus sets field value
func (o *TestRunAnalyticApiResult) SetCountGroupByStatus(v []TestRunGroupByStatusApiResult) {
	o.CountGroupByStatus = v
}

// GetCountGroupByStatusType returns the CountGroupByStatusType field value
func (o *TestRunAnalyticApiResult) GetCountGroupByStatusType() []TestRunGroupByStatusTypeApiResult {
	if o == nil {
		var ret []TestRunGroupByStatusTypeApiResult
		return ret
	}

	return o.CountGroupByStatusType
}

// GetCountGroupByStatusTypeOk returns a tuple with the CountGroupByStatusType field value
// and a boolean to check if the value has been set.
func (o *TestRunAnalyticApiResult) GetCountGroupByStatusTypeOk() ([]TestRunGroupByStatusTypeApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountGroupByStatusType, true
}

// SetCountGroupByStatusType sets field value
func (o *TestRunAnalyticApiResult) SetCountGroupByStatusType(v []TestRunGroupByStatusTypeApiResult) {
	o.CountGroupByStatusType = v
}

// GetCountGroupByFailureClass returns the CountGroupByFailureClass field value
func (o *TestRunAnalyticApiResult) GetCountGroupByFailureClass() []TestRunGroupByFailureClassApiResult {
	if o == nil {
		var ret []TestRunGroupByFailureClassApiResult
		return ret
	}

	return o.CountGroupByFailureClass
}

// GetCountGroupByFailureClassOk returns a tuple with the CountGroupByFailureClass field value
// and a boolean to check if the value has been set.
func (o *TestRunAnalyticApiResult) GetCountGroupByFailureClassOk() ([]TestRunGroupByFailureClassApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountGroupByFailureClass, true
}

// SetCountGroupByFailureClass sets field value
func (o *TestRunAnalyticApiResult) SetCountGroupByFailureClass(v []TestRunGroupByFailureClassApiResult) {
	o.CountGroupByFailureClass = v
}

func (o TestRunAnalyticApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRunAnalyticApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countGroupByStatus"] = o.CountGroupByStatus
	toSerialize["countGroupByStatusType"] = o.CountGroupByStatusType
	toSerialize["countGroupByFailureClass"] = o.CountGroupByFailureClass
	return toSerialize, nil
}

func (o *TestRunAnalyticApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countGroupByStatus",
		"countGroupByStatusType",
		"countGroupByFailureClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestRunAnalyticApiResult := _TestRunAnalyticApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestRunAnalyticApiResult)

	if err != nil {
		return err
	}

	*o = TestRunAnalyticApiResult(varTestRunAnalyticApiResult)

	return err
}

type NullableTestRunAnalyticApiResult struct {
	value *TestRunAnalyticApiResult
	isSet bool
}

func (v NullableTestRunAnalyticApiResult) Get() *TestRunAnalyticApiResult {
	return v.value
}

func (v *NullableTestRunAnalyticApiResult) Set(val *TestRunAnalyticApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRunAnalyticApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRunAnalyticApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRunAnalyticApiResult(val *TestRunAnalyticApiResult) *NullableTestRunAnalyticApiResult {
	return &NullableTestRunAnalyticApiResult{value: val, isSet: true}
}

func (v NullableTestRunAnalyticApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRunAnalyticApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


