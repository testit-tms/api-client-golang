/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
)

// checks if the TestResultShortModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultShortModel{}

// TestResultShortModel struct for TestResultShortModel
type TestResultShortModel struct {
	Id *string `json:"id,omitempty"`
	Outcome NullableString `json:"outcome,omitempty"`
	Traces NullableString `json:"traces,omitempty"`
	FailureType NullableString `json:"failureType,omitempty"`
	Message NullableString `json:"message,omitempty"`
	TestPoint *TestPointPutModel `json:"testPoint,omitempty"`
	CreatedDate NullableTime `json:"createdDate,omitempty"`
	AutoTest *AutoTestShortModel `json:"autoTest,omitempty"`
	Attachments []AttachmentModel `json:"attachments,omitempty"`
}

// NewTestResultShortModel instantiates a new TestResultShortModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultShortModel() *TestResultShortModel {
	this := TestResultShortModel{}
	return &this
}

// NewTestResultShortModelWithDefaults instantiates a new TestResultShortModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultShortModelWithDefaults() *TestResultShortModel {
	this := TestResultShortModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TestResultShortModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultShortModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TestResultShortModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TestResultShortModel) SetId(v string) {
	o.Id = &v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortModel) GetOutcome() string {
	if o == nil || IsNil(o.Outcome.Get()) {
		var ret string
		return ret
	}
	return *o.Outcome.Get()
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortModel) GetOutcomeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outcome.Get(), o.Outcome.IsSet()
}

// HasOutcome returns a boolean if a field has been set.
func (o *TestResultShortModel) HasOutcome() bool {
	if o != nil && o.Outcome.IsSet() {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given NullableString and assigns it to the Outcome field.
func (o *TestResultShortModel) SetOutcome(v string) {
	o.Outcome.Set(&v)
}
// SetOutcomeNil sets the value for Outcome to be an explicit nil
func (o *TestResultShortModel) SetOutcomeNil() {
	o.Outcome.Set(nil)
}

// UnsetOutcome ensures that no value is present for Outcome, not even an explicit nil
func (o *TestResultShortModel) UnsetOutcome() {
	o.Outcome.Unset()
}

// GetTraces returns the Traces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortModel) GetTraces() string {
	if o == nil || IsNil(o.Traces.Get()) {
		var ret string
		return ret
	}
	return *o.Traces.Get()
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortModel) GetTracesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traces.Get(), o.Traces.IsSet()
}

// HasTraces returns a boolean if a field has been set.
func (o *TestResultShortModel) HasTraces() bool {
	if o != nil && o.Traces.IsSet() {
		return true
	}

	return false
}

// SetTraces gets a reference to the given NullableString and assigns it to the Traces field.
func (o *TestResultShortModel) SetTraces(v string) {
	o.Traces.Set(&v)
}
// SetTracesNil sets the value for Traces to be an explicit nil
func (o *TestResultShortModel) SetTracesNil() {
	o.Traces.Set(nil)
}

// UnsetTraces ensures that no value is present for Traces, not even an explicit nil
func (o *TestResultShortModel) UnsetTraces() {
	o.Traces.Unset()
}

// GetFailureType returns the FailureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortModel) GetFailureType() string {
	if o == nil || IsNil(o.FailureType.Get()) {
		var ret string
		return ret
	}
	return *o.FailureType.Get()
}

// GetFailureTypeOk returns a tuple with the FailureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortModel) GetFailureTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureType.Get(), o.FailureType.IsSet()
}

// HasFailureType returns a boolean if a field has been set.
func (o *TestResultShortModel) HasFailureType() bool {
	if o != nil && o.FailureType.IsSet() {
		return true
	}

	return false
}

// SetFailureType gets a reference to the given NullableString and assigns it to the FailureType field.
func (o *TestResultShortModel) SetFailureType(v string) {
	o.FailureType.Set(&v)
}
// SetFailureTypeNil sets the value for FailureType to be an explicit nil
func (o *TestResultShortModel) SetFailureTypeNil() {
	o.FailureType.Set(nil)
}

// UnsetFailureType ensures that no value is present for FailureType, not even an explicit nil
func (o *TestResultShortModel) UnsetFailureType() {
	o.FailureType.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortModel) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *TestResultShortModel) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *TestResultShortModel) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *TestResultShortModel) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *TestResultShortModel) UnsetMessage() {
	o.Message.Unset()
}

// GetTestPoint returns the TestPoint field value if set, zero value otherwise.
func (o *TestResultShortModel) GetTestPoint() TestPointPutModel {
	if o == nil || IsNil(o.TestPoint) {
		var ret TestPointPutModel
		return ret
	}
	return *o.TestPoint
}

// GetTestPointOk returns a tuple with the TestPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultShortModel) GetTestPointOk() (*TestPointPutModel, bool) {
	if o == nil || IsNil(o.TestPoint) {
		return nil, false
	}
	return o.TestPoint, true
}

// HasTestPoint returns a boolean if a field has been set.
func (o *TestResultShortModel) HasTestPoint() bool {
	if o != nil && !IsNil(o.TestPoint) {
		return true
	}

	return false
}

// SetTestPoint gets a reference to the given TestPointPutModel and assigns it to the TestPoint field.
func (o *TestResultShortModel) SetTestPoint(v TestPointPutModel) {
	o.TestPoint = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortModel) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate.Get()
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortModel) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedDate.Get(), o.CreatedDate.IsSet()
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *TestResultShortModel) HasCreatedDate() bool {
	if o != nil && o.CreatedDate.IsSet() {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given NullableTime and assigns it to the CreatedDate field.
func (o *TestResultShortModel) SetCreatedDate(v time.Time) {
	o.CreatedDate.Set(&v)
}
// SetCreatedDateNil sets the value for CreatedDate to be an explicit nil
func (o *TestResultShortModel) SetCreatedDateNil() {
	o.CreatedDate.Set(nil)
}

// UnsetCreatedDate ensures that no value is present for CreatedDate, not even an explicit nil
func (o *TestResultShortModel) UnsetCreatedDate() {
	o.CreatedDate.Unset()
}

// GetAutoTest returns the AutoTest field value if set, zero value otherwise.
func (o *TestResultShortModel) GetAutoTest() AutoTestShortModel {
	if o == nil || IsNil(o.AutoTest) {
		var ret AutoTestShortModel
		return ret
	}
	return *o.AutoTest
}

// GetAutoTestOk returns a tuple with the AutoTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultShortModel) GetAutoTestOk() (*AutoTestShortModel, bool) {
	if o == nil || IsNil(o.AutoTest) {
		return nil, false
	}
	return o.AutoTest, true
}

// HasAutoTest returns a boolean if a field has been set.
func (o *TestResultShortModel) HasAutoTest() bool {
	if o != nil && !IsNil(o.AutoTest) {
		return true
	}

	return false
}

// SetAutoTest gets a reference to the given AutoTestShortModel and assigns it to the AutoTest field.
func (o *TestResultShortModel) SetAutoTest(v AutoTestShortModel) {
	o.AutoTest = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultShortModel) GetAttachments() []AttachmentModel {
	if o == nil {
		var ret []AttachmentModel
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultShortModel) GetAttachmentsOk() ([]AttachmentModel, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TestResultShortModel) HasAttachments() bool {
	if o != nil && IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []AttachmentModel and assigns it to the Attachments field.
func (o *TestResultShortModel) SetAttachments(v []AttachmentModel) {
	o.Attachments = v
}

func (o TestResultShortModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultShortModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Outcome.IsSet() {
		toSerialize["outcome"] = o.Outcome.Get()
	}
	if o.Traces.IsSet() {
		toSerialize["traces"] = o.Traces.Get()
	}
	if o.FailureType.IsSet() {
		toSerialize["failureType"] = o.FailureType.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if !IsNil(o.TestPoint) {
		toSerialize["testPoint"] = o.TestPoint
	}
	if o.CreatedDate.IsSet() {
		toSerialize["createdDate"] = o.CreatedDate.Get()
	}
	if !IsNil(o.AutoTest) {
		toSerialize["autoTest"] = o.AutoTest
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	return toSerialize, nil
}

type NullableTestResultShortModel struct {
	value *TestResultShortModel
	isSet bool
}

func (v NullableTestResultShortModel) Get() *TestResultShortModel {
	return v.value
}

func (v *NullableTestResultShortModel) Set(val *TestResultShortModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultShortModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultShortModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultShortModel(val *TestResultShortModel) *NullableTestResultShortModel {
	return &NullableTestResultShortModel{value: val, isSet: true}
}

func (v NullableTestResultShortModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultShortModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


