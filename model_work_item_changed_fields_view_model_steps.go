/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the WorkItemChangedFieldsViewModelSteps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkItemChangedFieldsViewModelSteps{}

// WorkItemChangedFieldsViewModelSteps struct for WorkItemChangedFieldsViewModelSteps
type WorkItemChangedFieldsViewModelSteps struct {
	DiffValue []WorkItemStepChangeViewModel `json:"diffValue,omitempty"`
	OldValue []WorkItemStepChangeViewModel `json:"oldValue,omitempty"`
	NewValue []WorkItemStepChangeViewModel `json:"newValue,omitempty"`
}

// NewWorkItemChangedFieldsViewModelSteps instantiates a new WorkItemChangedFieldsViewModelSteps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkItemChangedFieldsViewModelSteps() *WorkItemChangedFieldsViewModelSteps {
	this := WorkItemChangedFieldsViewModelSteps{}
	return &this
}

// NewWorkItemChangedFieldsViewModelStepsWithDefaults instantiates a new WorkItemChangedFieldsViewModelSteps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkItemChangedFieldsViewModelStepsWithDefaults() *WorkItemChangedFieldsViewModelSteps {
	this := WorkItemChangedFieldsViewModelSteps{}
	return &this
}

// GetDiffValue returns the DiffValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkItemChangedFieldsViewModelSteps) GetDiffValue() []WorkItemStepChangeViewModel {
	if o == nil {
		var ret []WorkItemStepChangeViewModel
		return ret
	}
	return o.DiffValue
}

// GetDiffValueOk returns a tuple with the DiffValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkItemChangedFieldsViewModelSteps) GetDiffValueOk() ([]WorkItemStepChangeViewModel, bool) {
	if o == nil || IsNil(o.DiffValue) {
		return nil, false
	}
	return o.DiffValue, true
}

// HasDiffValue returns a boolean if a field has been set.
func (o *WorkItemChangedFieldsViewModelSteps) HasDiffValue() bool {
	if o != nil && IsNil(o.DiffValue) {
		return true
	}

	return false
}

// SetDiffValue gets a reference to the given []WorkItemStepChangeViewModel and assigns it to the DiffValue field.
func (o *WorkItemChangedFieldsViewModelSteps) SetDiffValue(v []WorkItemStepChangeViewModel) {
	o.DiffValue = v
}

// GetOldValue returns the OldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkItemChangedFieldsViewModelSteps) GetOldValue() []WorkItemStepChangeViewModel {
	if o == nil {
		var ret []WorkItemStepChangeViewModel
		return ret
	}
	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkItemChangedFieldsViewModelSteps) GetOldValueOk() ([]WorkItemStepChangeViewModel, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *WorkItemChangedFieldsViewModelSteps) HasOldValue() bool {
	if o != nil && IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given []WorkItemStepChangeViewModel and assigns it to the OldValue field.
func (o *WorkItemChangedFieldsViewModelSteps) SetOldValue(v []WorkItemStepChangeViewModel) {
	o.OldValue = v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkItemChangedFieldsViewModelSteps) GetNewValue() []WorkItemStepChangeViewModel {
	if o == nil {
		var ret []WorkItemStepChangeViewModel
		return ret
	}
	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkItemChangedFieldsViewModelSteps) GetNewValueOk() ([]WorkItemStepChangeViewModel, bool) {
	if o == nil || IsNil(o.NewValue) {
		return nil, false
	}
	return o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *WorkItemChangedFieldsViewModelSteps) HasNewValue() bool {
	if o != nil && IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given []WorkItemStepChangeViewModel and assigns it to the NewValue field.
func (o *WorkItemChangedFieldsViewModelSteps) SetNewValue(v []WorkItemStepChangeViewModel) {
	o.NewValue = v
}

func (o WorkItemChangedFieldsViewModelSteps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkItemChangedFieldsViewModelSteps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiffValue != nil {
		toSerialize["diffValue"] = o.DiffValue
	}
	if o.OldValue != nil {
		toSerialize["oldValue"] = o.OldValue
	}
	if o.NewValue != nil {
		toSerialize["newValue"] = o.NewValue
	}
	return toSerialize, nil
}

type NullableWorkItemChangedFieldsViewModelSteps struct {
	value *WorkItemChangedFieldsViewModelSteps
	isSet bool
}

func (v NullableWorkItemChangedFieldsViewModelSteps) Get() *WorkItemChangedFieldsViewModelSteps {
	return v.value
}

func (v *NullableWorkItemChangedFieldsViewModelSteps) Set(val *WorkItemChangedFieldsViewModelSteps) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemChangedFieldsViewModelSteps) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemChangedFieldsViewModelSteps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemChangedFieldsViewModelSteps(val *WorkItemChangedFieldsViewModelSteps) *NullableWorkItemChangedFieldsViewModelSteps {
	return &NullableWorkItemChangedFieldsViewModelSteps{value: val, isSet: true}
}

func (v NullableWorkItemChangedFieldsViewModelSteps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemChangedFieldsViewModelSteps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


