/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestPlanTestPointsGroupSearchItemApiResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanTestPointsGroupSearchItemApiResult{}

// TestPlanTestPointsGroupSearchItemApiResult struct for TestPlanTestPointsGroupSearchItemApiResult
type TestPlanTestPointsGroupSearchItemApiResult struct {
	Group NullableTestPlanTestPointsGroupApiResult `json:"group"`
	Items []TestPlanTestPointsSearchApiResult `json:"items"`
}

type _TestPlanTestPointsGroupSearchItemApiResult TestPlanTestPointsGroupSearchItemApiResult

// NewTestPlanTestPointsGroupSearchItemApiResult instantiates a new TestPlanTestPointsGroupSearchItemApiResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanTestPointsGroupSearchItemApiResult(group NullableTestPlanTestPointsGroupApiResult, items []TestPlanTestPointsSearchApiResult) *TestPlanTestPointsGroupSearchItemApiResult {
	this := TestPlanTestPointsGroupSearchItemApiResult{}
	this.Group = group
	this.Items = items
	return &this
}

// NewTestPlanTestPointsGroupSearchItemApiResultWithDefaults instantiates a new TestPlanTestPointsGroupSearchItemApiResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanTestPointsGroupSearchItemApiResultWithDefaults() *TestPlanTestPointsGroupSearchItemApiResult {
	this := TestPlanTestPointsGroupSearchItemApiResult{}
	return &this
}

// GetGroup returns the Group field value
// If the value is explicit nil, the zero value for TestPlanTestPointsGroupApiResult will be returned
func (o *TestPlanTestPointsGroupSearchItemApiResult) GetGroup() TestPlanTestPointsGroupApiResult {
	if o == nil || o.Group.Get() == nil {
		var ret TestPlanTestPointsGroupApiResult
		return ret
	}

	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanTestPointsGroupSearchItemApiResult) GetGroupOk() (*TestPlanTestPointsGroupApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// SetGroup sets field value
func (o *TestPlanTestPointsGroupSearchItemApiResult) SetGroup(v TestPlanTestPointsGroupApiResult) {
	o.Group.Set(&v)
}

// GetItems returns the Items field value
func (o *TestPlanTestPointsGroupSearchItemApiResult) GetItems() []TestPlanTestPointsSearchApiResult {
	if o == nil {
		var ret []TestPlanTestPointsSearchApiResult
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *TestPlanTestPointsGroupSearchItemApiResult) GetItemsOk() ([]TestPlanTestPointsSearchApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *TestPlanTestPointsGroupSearchItemApiResult) SetItems(v []TestPlanTestPointsSearchApiResult) {
	o.Items = v
}

func (o TestPlanTestPointsGroupSearchItemApiResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanTestPointsGroupSearchItemApiResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group.Get()
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *TestPlanTestPointsGroupSearchItemApiResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestPlanTestPointsGroupSearchItemApiResult := _TestPlanTestPointsGroupSearchItemApiResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestPlanTestPointsGroupSearchItemApiResult)

	if err != nil {
		return err
	}

	*o = TestPlanTestPointsGroupSearchItemApiResult(varTestPlanTestPointsGroupSearchItemApiResult)

	return err
}

type NullableTestPlanTestPointsGroupSearchItemApiResult struct {
	value *TestPlanTestPointsGroupSearchItemApiResult
	isSet bool
}

func (v NullableTestPlanTestPointsGroupSearchItemApiResult) Get() *TestPlanTestPointsGroupSearchItemApiResult {
	return v.value
}

func (v *NullableTestPlanTestPointsGroupSearchItemApiResult) Set(val *TestPlanTestPointsGroupSearchItemApiResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanTestPointsGroupSearchItemApiResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanTestPointsGroupSearchItemApiResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanTestPointsGroupSearchItemApiResult(val *TestPlanTestPointsGroupSearchItemApiResult) *NullableTestPlanTestPointsGroupSearchItemApiResult {
	return &NullableTestPlanTestPointsGroupSearchItemApiResult{value: val, isSet: true}
}

func (v NullableTestPlanTestPointsGroupSearchItemApiResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanTestPointsGroupSearchItemApiResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


