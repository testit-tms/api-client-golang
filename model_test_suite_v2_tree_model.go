/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TestSuiteV2TreeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSuiteV2TreeModel{}

// TestSuiteV2TreeModel struct for TestSuiteV2TreeModel
type TestSuiteV2TreeModel struct {
	// nested enumeration of children is allowed
	// Deprecated
	Children []TestSuiteV2TreeModel `json:"children,omitempty"`
	// Unique ID of the test suite
	Id string `json:"id"`
	// Date of the last refresh of the test suite
	RefreshDate NullableTime `json:"refreshDate,omitempty"`
	// Unique ID of the parent test suite in hierarchy
	ParentId NullableString `json:"parentId,omitempty"`
	// Unique ID of test plan to which the test suite belongs
	TestPlanId string `json:"testPlanId"`
	// Name of the test suite
	Name string `json:"name"`
	// Type of the test suite
	Type NullableTestSuiteType `json:"type,omitempty"`
	// Indicates if the test suite retains section tree structure
	SaveStructure NullableBool `json:"saveStructure,omitempty"`
	// Indicates if scheduled auto refresh is enabled for the test suite
	AutoRefresh NullableBool `json:"autoRefresh,omitempty"`
}

type _TestSuiteV2TreeModel TestSuiteV2TreeModel

// NewTestSuiteV2TreeModel instantiates a new TestSuiteV2TreeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuiteV2TreeModel(id string, testPlanId string, name string) *TestSuiteV2TreeModel {
	this := TestSuiteV2TreeModel{}
	this.Id = id
	this.TestPlanId = testPlanId
	this.Name = name
	return &this
}

// NewTestSuiteV2TreeModelWithDefaults instantiates a new TestSuiteV2TreeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteV2TreeModelWithDefaults() *TestSuiteV2TreeModel {
	this := TestSuiteV2TreeModel{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *TestSuiteV2TreeModel) GetChildren() []TestSuiteV2TreeModel {
	if o == nil {
		var ret []TestSuiteV2TreeModel
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *TestSuiteV2TreeModel) GetChildrenOk() ([]TestSuiteV2TreeModel, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *TestSuiteV2TreeModel) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []TestSuiteV2TreeModel and assigns it to the Children field.
// Deprecated
func (o *TestSuiteV2TreeModel) SetChildren(v []TestSuiteV2TreeModel) {
	o.Children = v
}

// GetId returns the Id field value
func (o *TestSuiteV2TreeModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestSuiteV2TreeModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestSuiteV2TreeModel) SetId(v string) {
	o.Id = v
}

// GetRefreshDate returns the RefreshDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteV2TreeModel) GetRefreshDate() time.Time {
	if o == nil || IsNil(o.RefreshDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RefreshDate.Get()
}

// GetRefreshDateOk returns a tuple with the RefreshDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteV2TreeModel) GetRefreshDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefreshDate.Get(), o.RefreshDate.IsSet()
}

// HasRefreshDate returns a boolean if a field has been set.
func (o *TestSuiteV2TreeModel) HasRefreshDate() bool {
	if o != nil && o.RefreshDate.IsSet() {
		return true
	}

	return false
}

// SetRefreshDate gets a reference to the given NullableTime and assigns it to the RefreshDate field.
func (o *TestSuiteV2TreeModel) SetRefreshDate(v time.Time) {
	o.RefreshDate.Set(&v)
}
// SetRefreshDateNil sets the value for RefreshDate to be an explicit nil
func (o *TestSuiteV2TreeModel) SetRefreshDateNil() {
	o.RefreshDate.Set(nil)
}

// UnsetRefreshDate ensures that no value is present for RefreshDate, not even an explicit nil
func (o *TestSuiteV2TreeModel) UnsetRefreshDate() {
	o.RefreshDate.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteV2TreeModel) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteV2TreeModel) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *TestSuiteV2TreeModel) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *TestSuiteV2TreeModel) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *TestSuiteV2TreeModel) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *TestSuiteV2TreeModel) UnsetParentId() {
	o.ParentId.Unset()
}

// GetTestPlanId returns the TestPlanId field value
func (o *TestSuiteV2TreeModel) GetTestPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestPlanId
}

// GetTestPlanIdOk returns a tuple with the TestPlanId field value
// and a boolean to check if the value has been set.
func (o *TestSuiteV2TreeModel) GetTestPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestPlanId, true
}

// SetTestPlanId sets field value
func (o *TestSuiteV2TreeModel) SetTestPlanId(v string) {
	o.TestPlanId = v
}

// GetName returns the Name field value
func (o *TestSuiteV2TreeModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TestSuiteV2TreeModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TestSuiteV2TreeModel) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteV2TreeModel) GetType() TestSuiteType {
	if o == nil || IsNil(o.Type.Get()) {
		var ret TestSuiteType
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteV2TreeModel) GetTypeOk() (*TestSuiteType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *TestSuiteV2TreeModel) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableTestSuiteType and assigns it to the Type field.
func (o *TestSuiteV2TreeModel) SetType(v TestSuiteType) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *TestSuiteV2TreeModel) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *TestSuiteV2TreeModel) UnsetType() {
	o.Type.Unset()
}

// GetSaveStructure returns the SaveStructure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteV2TreeModel) GetSaveStructure() bool {
	if o == nil || IsNil(o.SaveStructure.Get()) {
		var ret bool
		return ret
	}
	return *o.SaveStructure.Get()
}

// GetSaveStructureOk returns a tuple with the SaveStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteV2TreeModel) GetSaveStructureOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaveStructure.Get(), o.SaveStructure.IsSet()
}

// HasSaveStructure returns a boolean if a field has been set.
func (o *TestSuiteV2TreeModel) HasSaveStructure() bool {
	if o != nil && o.SaveStructure.IsSet() {
		return true
	}

	return false
}

// SetSaveStructure gets a reference to the given NullableBool and assigns it to the SaveStructure field.
func (o *TestSuiteV2TreeModel) SetSaveStructure(v bool) {
	o.SaveStructure.Set(&v)
}
// SetSaveStructureNil sets the value for SaveStructure to be an explicit nil
func (o *TestSuiteV2TreeModel) SetSaveStructureNil() {
	o.SaveStructure.Set(nil)
}

// UnsetSaveStructure ensures that no value is present for SaveStructure, not even an explicit nil
func (o *TestSuiteV2TreeModel) UnsetSaveStructure() {
	o.SaveStructure.Unset()
}

// GetAutoRefresh returns the AutoRefresh field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestSuiteV2TreeModel) GetAutoRefresh() bool {
	if o == nil || IsNil(o.AutoRefresh.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoRefresh.Get()
}

// GetAutoRefreshOk returns a tuple with the AutoRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestSuiteV2TreeModel) GetAutoRefreshOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoRefresh.Get(), o.AutoRefresh.IsSet()
}

// HasAutoRefresh returns a boolean if a field has been set.
func (o *TestSuiteV2TreeModel) HasAutoRefresh() bool {
	if o != nil && o.AutoRefresh.IsSet() {
		return true
	}

	return false
}

// SetAutoRefresh gets a reference to the given NullableBool and assigns it to the AutoRefresh field.
func (o *TestSuiteV2TreeModel) SetAutoRefresh(v bool) {
	o.AutoRefresh.Set(&v)
}
// SetAutoRefreshNil sets the value for AutoRefresh to be an explicit nil
func (o *TestSuiteV2TreeModel) SetAutoRefreshNil() {
	o.AutoRefresh.Set(nil)
}

// UnsetAutoRefresh ensures that no value is present for AutoRefresh, not even an explicit nil
func (o *TestSuiteV2TreeModel) UnsetAutoRefresh() {
	o.AutoRefresh.Unset()
}

func (o TestSuiteV2TreeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSuiteV2TreeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	toSerialize["id"] = o.Id
	if o.RefreshDate.IsSet() {
		toSerialize["refreshDate"] = o.RefreshDate.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	toSerialize["testPlanId"] = o.TestPlanId
	toSerialize["name"] = o.Name
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.SaveStructure.IsSet() {
		toSerialize["saveStructure"] = o.SaveStructure.Get()
	}
	if o.AutoRefresh.IsSet() {
		toSerialize["autoRefresh"] = o.AutoRefresh.Get()
	}
	return toSerialize, nil
}

func (o *TestSuiteV2TreeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"testPlanId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSuiteV2TreeModel := _TestSuiteV2TreeModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestSuiteV2TreeModel)

	if err != nil {
		return err
	}

	*o = TestSuiteV2TreeModel(varTestSuiteV2TreeModel)

	return err
}

type NullableTestSuiteV2TreeModel struct {
	value *TestSuiteV2TreeModel
	isSet bool
}

func (v NullableTestSuiteV2TreeModel) Get() *TestSuiteV2TreeModel {
	return v.value
}

func (v *NullableTestSuiteV2TreeModel) Set(val *TestSuiteV2TreeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuiteV2TreeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuiteV2TreeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuiteV2TreeModel(val *TestSuiteV2TreeModel) *NullableTestSuiteV2TreeModel {
	return &NullableTestSuiteV2TreeModel{value: val, isSet: true}
}

func (v NullableTestSuiteV2TreeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuiteV2TreeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


