/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// BackgroundJobType the model 'BackgroundJobType'
type BackgroundJobType string

// List of BackgroundJobType
const (
	BACKGROUNDJOBTYPE_EXPORT_XLSX_TEST_RESULTS_BY_TEST_PLAN BackgroundJobType = "ExportXlsxTestResultsByTestPlan"
	BACKGROUNDJOBTYPE_EXPORT_XLSX_WORK_ITEMS_BY_PROJECT BackgroundJobType = "ExportXlsxWorkItemsByProject"
	BACKGROUNDJOBTYPE_EXPORT_XLSX_TEST_POINTS_BY_TEST_PLAN BackgroundJobType = "ExportXlsxTestPointsByTestPlan"
	BACKGROUNDJOBTYPE_EXPORT_JSON_PROJECT BackgroundJobType = "ExportJsonProject"
	BACKGROUNDJOBTYPE_EXPORT_ZIP_PROJECT BackgroundJobType = "ExportZipProject"
	BACKGROUNDJOBTYPE_EXPORT_JSON_PROJECT_WITH_TEST_PLANS BackgroundJobType = "ExportJsonProjectWithTestPlans"
	BACKGROUNDJOBTYPE_EXPORT_ZIP_PROJECT_WITH_TEST_PLANS BackgroundJobType = "ExportZipProjectWithTestPlans"
	BACKGROUNDJOBTYPE_IMPORT_JSON_PROJECT BackgroundJobType = "ImportJsonProject"
	BACKGROUNDJOBTYPE_IMPORT_ZIP_PROJECT BackgroundJobType = "ImportZipProject"
	BACKGROUNDJOBTYPE_IMPORT_XLSX_PROJECT BackgroundJobType = "ImportXlsxProject"
	BACKGROUNDJOBTYPE_IMPORT_TEST_RAIL_XML_PROJECT BackgroundJobType = "ImportTestRailXmlProject"
)

// All allowed values of BackgroundJobType enum
var AllowedBackgroundJobTypeEnumValues = []BackgroundJobType{
	"ExportXlsxTestResultsByTestPlan",
	"ExportXlsxWorkItemsByProject",
	"ExportXlsxTestPointsByTestPlan",
	"ExportJsonProject",
	"ExportZipProject",
	"ExportJsonProjectWithTestPlans",
	"ExportZipProjectWithTestPlans",
	"ImportJsonProject",
	"ImportZipProject",
	"ImportXlsxProject",
	"ImportTestRailXmlProject",
}

func (v *BackgroundJobType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackgroundJobType(value)
	for _, existing := range AllowedBackgroundJobTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackgroundJobType", value)
}

// NewBackgroundJobTypeFromValue returns a pointer to a valid BackgroundJobType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackgroundJobTypeFromValue(v string) (*BackgroundJobType, error) {
	ev := BackgroundJobType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackgroundJobType: valid values are %v", v, AllowedBackgroundJobTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackgroundJobType) IsValid() bool {
	for _, existing := range AllowedBackgroundJobTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackgroundJobType value
func (v BackgroundJobType) Ptr() *BackgroundJobType {
	return &v
}

type NullableBackgroundJobType struct {
	value *BackgroundJobType
	isSet bool
}

func (v NullableBackgroundJobType) Get() *BackgroundJobType {
	return v.value
}

func (v *NullableBackgroundJobType) Set(val *BackgroundJobType) {
	v.value = val
	v.isSet = true
}

func (v NullableBackgroundJobType) IsSet() bool {
	return v.isSet
}

func (v *NullableBackgroundJobType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackgroundJobType(val *BackgroundJobType) *NullableBackgroundJobType {
	return &NullableBackgroundJobType{value: val, isSet: true}
}

func (v NullableBackgroundJobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackgroundJobType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

