/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the TestPlanLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestPlanLink{}

// TestPlanLink struct for TestPlanLink
type TestPlanLink struct {
	BugLink *LinkModel `json:"bugLink,omitempty"`
	WorkItemGlobalId NullableInt64 `json:"workItemGlobalId,omitempty"`
	WorkItemName NullableString `json:"workItemName,omitempty"`
	ConfigurationName NullableString `json:"configurationName,omitempty"`
	CreatedById NullableString `json:"createdById,omitempty"`
	Comment NullableString `json:"comment,omitempty"`
	Info *ExternalLinkModel `json:"info,omitempty"`
}

// NewTestPlanLink instantiates a new TestPlanLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestPlanLink() *TestPlanLink {
	this := TestPlanLink{}
	return &this
}

// NewTestPlanLinkWithDefaults instantiates a new TestPlanLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestPlanLinkWithDefaults() *TestPlanLink {
	this := TestPlanLink{}
	return &this
}

// GetBugLink returns the BugLink field value if set, zero value otherwise.
func (o *TestPlanLink) GetBugLink() LinkModel {
	if o == nil || IsNil(o.BugLink) {
		var ret LinkModel
		return ret
	}
	return *o.BugLink
}

// GetBugLinkOk returns a tuple with the BugLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestPlanLink) GetBugLinkOk() (*LinkModel, bool) {
	if o == nil || IsNil(o.BugLink) {
		return nil, false
	}
	return o.BugLink, true
}

// HasBugLink returns a boolean if a field has been set.
func (o *TestPlanLink) HasBugLink() bool {
	if o != nil && !IsNil(o.BugLink) {
		return true
	}

	return false
}

// SetBugLink gets a reference to the given LinkModel and assigns it to the BugLink field.
func (o *TestPlanLink) SetBugLink(v LinkModel) {
	o.BugLink = &v
}

// GetWorkItemGlobalId returns the WorkItemGlobalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanLink) GetWorkItemGlobalId() int64 {
	if o == nil || IsNil(o.WorkItemGlobalId.Get()) {
		var ret int64
		return ret
	}
	return *o.WorkItemGlobalId.Get()
}

// GetWorkItemGlobalIdOk returns a tuple with the WorkItemGlobalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanLink) GetWorkItemGlobalIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemGlobalId.Get(), o.WorkItemGlobalId.IsSet()
}

// HasWorkItemGlobalId returns a boolean if a field has been set.
func (o *TestPlanLink) HasWorkItemGlobalId() bool {
	if o != nil && o.WorkItemGlobalId.IsSet() {
		return true
	}

	return false
}

// SetWorkItemGlobalId gets a reference to the given NullableInt64 and assigns it to the WorkItemGlobalId field.
func (o *TestPlanLink) SetWorkItemGlobalId(v int64) {
	o.WorkItemGlobalId.Set(&v)
}
// SetWorkItemGlobalIdNil sets the value for WorkItemGlobalId to be an explicit nil
func (o *TestPlanLink) SetWorkItemGlobalIdNil() {
	o.WorkItemGlobalId.Set(nil)
}

// UnsetWorkItemGlobalId ensures that no value is present for WorkItemGlobalId, not even an explicit nil
func (o *TestPlanLink) UnsetWorkItemGlobalId() {
	o.WorkItemGlobalId.Unset()
}

// GetWorkItemName returns the WorkItemName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanLink) GetWorkItemName() string {
	if o == nil || IsNil(o.WorkItemName.Get()) {
		var ret string
		return ret
	}
	return *o.WorkItemName.Get()
}

// GetWorkItemNameOk returns a tuple with the WorkItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanLink) GetWorkItemNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemName.Get(), o.WorkItemName.IsSet()
}

// HasWorkItemName returns a boolean if a field has been set.
func (o *TestPlanLink) HasWorkItemName() bool {
	if o != nil && o.WorkItemName.IsSet() {
		return true
	}

	return false
}

// SetWorkItemName gets a reference to the given NullableString and assigns it to the WorkItemName field.
func (o *TestPlanLink) SetWorkItemName(v string) {
	o.WorkItemName.Set(&v)
}
// SetWorkItemNameNil sets the value for WorkItemName to be an explicit nil
func (o *TestPlanLink) SetWorkItemNameNil() {
	o.WorkItemName.Set(nil)
}

// UnsetWorkItemName ensures that no value is present for WorkItemName, not even an explicit nil
func (o *TestPlanLink) UnsetWorkItemName() {
	o.WorkItemName.Unset()
}

// GetConfigurationName returns the ConfigurationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanLink) GetConfigurationName() string {
	if o == nil || IsNil(o.ConfigurationName.Get()) {
		var ret string
		return ret
	}
	return *o.ConfigurationName.Get()
}

// GetConfigurationNameOk returns a tuple with the ConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanLink) GetConfigurationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationName.Get(), o.ConfigurationName.IsSet()
}

// HasConfigurationName returns a boolean if a field has been set.
func (o *TestPlanLink) HasConfigurationName() bool {
	if o != nil && o.ConfigurationName.IsSet() {
		return true
	}

	return false
}

// SetConfigurationName gets a reference to the given NullableString and assigns it to the ConfigurationName field.
func (o *TestPlanLink) SetConfigurationName(v string) {
	o.ConfigurationName.Set(&v)
}
// SetConfigurationNameNil sets the value for ConfigurationName to be an explicit nil
func (o *TestPlanLink) SetConfigurationNameNil() {
	o.ConfigurationName.Set(nil)
}

// UnsetConfigurationName ensures that no value is present for ConfigurationName, not even an explicit nil
func (o *TestPlanLink) UnsetConfigurationName() {
	o.ConfigurationName.Unset()
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanLink) GetCreatedById() string {
	if o == nil || IsNil(o.CreatedById.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedById.Get()
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanLink) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedById.Get(), o.CreatedById.IsSet()
}

// HasCreatedById returns a boolean if a field has been set.
func (o *TestPlanLink) HasCreatedById() bool {
	if o != nil && o.CreatedById.IsSet() {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given NullableString and assigns it to the CreatedById field.
func (o *TestPlanLink) SetCreatedById(v string) {
	o.CreatedById.Set(&v)
}
// SetCreatedByIdNil sets the value for CreatedById to be an explicit nil
func (o *TestPlanLink) SetCreatedByIdNil() {
	o.CreatedById.Set(nil)
}

// UnsetCreatedById ensures that no value is present for CreatedById, not even an explicit nil
func (o *TestPlanLink) UnsetCreatedById() {
	o.CreatedById.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestPlanLink) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestPlanLink) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *TestPlanLink) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *TestPlanLink) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *TestPlanLink) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *TestPlanLink) UnsetComment() {
	o.Comment.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TestPlanLink) GetInfo() ExternalLinkModel {
	if o == nil || IsNil(o.Info) {
		var ret ExternalLinkModel
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestPlanLink) GetInfoOk() (*ExternalLinkModel, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TestPlanLink) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given ExternalLinkModel and assigns it to the Info field.
func (o *TestPlanLink) SetInfo(v ExternalLinkModel) {
	o.Info = &v
}

func (o TestPlanLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestPlanLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BugLink) {
		toSerialize["bugLink"] = o.BugLink
	}
	if o.WorkItemGlobalId.IsSet() {
		toSerialize["workItemGlobalId"] = o.WorkItemGlobalId.Get()
	}
	if o.WorkItemName.IsSet() {
		toSerialize["workItemName"] = o.WorkItemName.Get()
	}
	if o.ConfigurationName.IsSet() {
		toSerialize["configurationName"] = o.ConfigurationName.Get()
	}
	if o.CreatedById.IsSet() {
		toSerialize["createdById"] = o.CreatedById.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	return toSerialize, nil
}

type NullableTestPlanLink struct {
	value *TestPlanLink
	isSet bool
}

func (v NullableTestPlanLink) Get() *TestPlanLink {
	return v.value
}

func (v *NullableTestPlanLink) Set(val *TestPlanLink) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPlanLink) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPlanLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPlanLink(val *TestPlanLink) *NullableTestPlanLink {
	return &NullableTestPlanLink{value: val, isSet: true}
}

func (v NullableTestPlanLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPlanLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


