/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidateAntiForgeryTokenAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateAntiForgeryTokenAttribute{}

// ValidateAntiForgeryTokenAttribute struct for ValidateAntiForgeryTokenAttribute
type ValidateAntiForgeryTokenAttribute struct {
	Order int32 `json:"order"`
	IsReusable bool `json:"isReusable"`
	TypeId interface{} `json:"typeId"`
}

type _ValidateAntiForgeryTokenAttribute ValidateAntiForgeryTokenAttribute

// NewValidateAntiForgeryTokenAttribute instantiates a new ValidateAntiForgeryTokenAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateAntiForgeryTokenAttribute(order int32, isReusable bool, typeId interface{}) *ValidateAntiForgeryTokenAttribute {
	this := ValidateAntiForgeryTokenAttribute{}
	this.Order = order
	this.IsReusable = isReusable
	this.TypeId = typeId
	return &this
}

// NewValidateAntiForgeryTokenAttributeWithDefaults instantiates a new ValidateAntiForgeryTokenAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateAntiForgeryTokenAttributeWithDefaults() *ValidateAntiForgeryTokenAttribute {
	this := ValidateAntiForgeryTokenAttribute{}
	return &this
}

// GetOrder returns the Order field value
func (o *ValidateAntiForgeryTokenAttribute) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *ValidateAntiForgeryTokenAttribute) GetOrderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *ValidateAntiForgeryTokenAttribute) SetOrder(v int32) {
	o.Order = v
}

// GetIsReusable returns the IsReusable field value
func (o *ValidateAntiForgeryTokenAttribute) GetIsReusable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsReusable
}

// GetIsReusableOk returns a tuple with the IsReusable field value
// and a boolean to check if the value has been set.
func (o *ValidateAntiForgeryTokenAttribute) GetIsReusableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsReusable, true
}

// SetIsReusable sets field value
func (o *ValidateAntiForgeryTokenAttribute) SetIsReusable(v bool) {
	o.IsReusable = v
}

// GetTypeId returns the TypeId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ValidateAntiForgeryTokenAttribute) GetTypeId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValidateAntiForgeryTokenAttribute) GetTypeIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TypeId) {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *ValidateAntiForgeryTokenAttribute) SetTypeId(v interface{}) {
	o.TypeId = v
}

func (o ValidateAntiForgeryTokenAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateAntiForgeryTokenAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["order"] = o.Order
	toSerialize["isReusable"] = o.IsReusable
	if o.TypeId != nil {
		toSerialize["typeId"] = o.TypeId
	}
	return toSerialize, nil
}

func (o *ValidateAntiForgeryTokenAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order",
		"isReusable",
		"typeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidateAntiForgeryTokenAttribute := _ValidateAntiForgeryTokenAttribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidateAntiForgeryTokenAttribute)

	if err != nil {
		return err
	}

	*o = ValidateAntiForgeryTokenAttribute(varValidateAntiForgeryTokenAttribute)

	return err
}

type NullableValidateAntiForgeryTokenAttribute struct {
	value *ValidateAntiForgeryTokenAttribute
	isSet bool
}

func (v NullableValidateAntiForgeryTokenAttribute) Get() *ValidateAntiForgeryTokenAttribute {
	return v.value
}

func (v *NullableValidateAntiForgeryTokenAttribute) Set(val *ValidateAntiForgeryTokenAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateAntiForgeryTokenAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateAntiForgeryTokenAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateAntiForgeryTokenAttribute(val *ValidateAntiForgeryTokenAttribute) *NullableValidateAntiForgeryTokenAttribute {
	return &NullableValidateAntiForgeryTokenAttribute{value: val, isSet: true}
}

func (v NullableValidateAntiForgeryTokenAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateAntiForgeryTokenAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


