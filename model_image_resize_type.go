/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// ImageResizeType the model 'ImageResizeType'
type ImageResizeType string

// List of ImageResizeType
const (
	IMAGERESIZETYPE_CROP ImageResizeType = "Crop"
	IMAGERESIZETYPE_ADD_BACKGROUND_STRIPES ImageResizeType = "AddBackgroundStripes"
)

// All allowed values of ImageResizeType enum
var AllowedImageResizeTypeEnumValues = []ImageResizeType{
	"Crop",
	"AddBackgroundStripes",
}

func (v *ImageResizeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageResizeType(value)
	for _, existing := range AllowedImageResizeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageResizeType", value)
}

// NewImageResizeTypeFromValue returns a pointer to a valid ImageResizeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageResizeTypeFromValue(v string) (*ImageResizeType, error) {
	ev := ImageResizeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageResizeType: valid values are %v", v, AllowedImageResizeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageResizeType) IsValid() bool {
	for _, existing := range AllowedImageResizeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageResizeType value
func (v ImageResizeType) Ptr() *ImageResizeType {
	return &v
}

type NullableImageResizeType struct {
	value *ImageResizeType
	isSet bool
}

func (v NullableImageResizeType) Get() *ImageResizeType {
	return v.value
}

func (v *NullableImageResizeType) Set(val *ImageResizeType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageResizeType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageResizeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageResizeType(val *ImageResizeType) *NullableImageResizeType {
	return &NullableImageResizeType{value: val, isSet: true}
}

func (v NullableImageResizeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageResizeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

