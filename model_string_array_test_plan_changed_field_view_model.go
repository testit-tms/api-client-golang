/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
)

// checks if the StringArrayTestPlanChangedFieldViewModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StringArrayTestPlanChangedFieldViewModel{}

// StringArrayTestPlanChangedFieldViewModel struct for StringArrayTestPlanChangedFieldViewModel
type StringArrayTestPlanChangedFieldViewModel struct {
	OldValue []string `json:"oldValue,omitempty"`
	NewValue []string `json:"newValue,omitempty"`
}

// NewStringArrayTestPlanChangedFieldViewModel instantiates a new StringArrayTestPlanChangedFieldViewModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringArrayTestPlanChangedFieldViewModel() *StringArrayTestPlanChangedFieldViewModel {
	this := StringArrayTestPlanChangedFieldViewModel{}
	return &this
}

// NewStringArrayTestPlanChangedFieldViewModelWithDefaults instantiates a new StringArrayTestPlanChangedFieldViewModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringArrayTestPlanChangedFieldViewModelWithDefaults() *StringArrayTestPlanChangedFieldViewModel {
	this := StringArrayTestPlanChangedFieldViewModel{}
	return &this
}

// GetOldValue returns the OldValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringArrayTestPlanChangedFieldViewModel) GetOldValue() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringArrayTestPlanChangedFieldViewModel) GetOldValueOk() ([]string, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *StringArrayTestPlanChangedFieldViewModel) HasOldValue() bool {
	if o != nil && IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given []string and assigns it to the OldValue field.
func (o *StringArrayTestPlanChangedFieldViewModel) SetOldValue(v []string) {
	o.OldValue = v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StringArrayTestPlanChangedFieldViewModel) GetNewValue() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StringArrayTestPlanChangedFieldViewModel) GetNewValueOk() ([]string, bool) {
	if o == nil || IsNil(o.NewValue) {
		return nil, false
	}
	return o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *StringArrayTestPlanChangedFieldViewModel) HasNewValue() bool {
	if o != nil && IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given []string and assigns it to the NewValue field.
func (o *StringArrayTestPlanChangedFieldViewModel) SetNewValue(v []string) {
	o.NewValue = v
}

func (o StringArrayTestPlanChangedFieldViewModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StringArrayTestPlanChangedFieldViewModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.OldValue != nil {
		toSerialize["oldValue"] = o.OldValue
	}
	if o.NewValue != nil {
		toSerialize["newValue"] = o.NewValue
	}
	return toSerialize, nil
}

type NullableStringArrayTestPlanChangedFieldViewModel struct {
	value *StringArrayTestPlanChangedFieldViewModel
	isSet bool
}

func (v NullableStringArrayTestPlanChangedFieldViewModel) Get() *StringArrayTestPlanChangedFieldViewModel {
	return v.value
}

func (v *NullableStringArrayTestPlanChangedFieldViewModel) Set(val *StringArrayTestPlanChangedFieldViewModel) {
	v.value = val
	v.isSet = true
}

func (v NullableStringArrayTestPlanChangedFieldViewModel) IsSet() bool {
	return v.isSet
}

func (v *NullableStringArrayTestPlanChangedFieldViewModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringArrayTestPlanChangedFieldViewModel(val *StringArrayTestPlanChangedFieldViewModel) *NullableStringArrayTestPlanChangedFieldViewModel {
	return &NullableStringArrayTestPlanChangedFieldViewModel{value: val, isSet: true}
}

func (v NullableStringArrayTestPlanChangedFieldViewModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringArrayTestPlanChangedFieldViewModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


