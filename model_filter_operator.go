/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// FilterOperator the model 'FilterOperator'
type FilterOperator string

// List of FilterOperator
const (
	FILTEROPERATOR_EQUAL FilterOperator = "="
	FILTEROPERATOR_NOT_EQUAL FilterOperator = "!="
	FILTEROPERATOR_TILDE FilterOperator = "~"
	FILTEROPERATOR_ FilterOperator = "!~"
	FILTEROPERATOR_LESS_THAN FilterOperator = "<"
	FILTEROPERATOR_LESS_THAN_OR_EQUAL_TO FilterOperator = "<="
	FILTEROPERATOR_GREATER_THAN FilterOperator = ">"
	FILTEROPERATOR_GREATER_THAN_OR_EQUAL_TO FilterOperator = ">="
	FILTEROPERATOR_STAR FilterOperator = "*"
	FILTEROPERATOR_2 FilterOperator = "!*"
)

// All allowed values of FilterOperator enum
var AllowedFilterOperatorEnumValues = []FilterOperator{
	"=",
	"!=",
	"~",
	"!~",
	"<",
	"<=",
	">",
	">=",
	"*",
	"!*",
}

func (v *FilterOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterOperator(value)
	for _, existing := range AllowedFilterOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterOperator", value)
}

// NewFilterOperatorFromValue returns a pointer to a valid FilterOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterOperatorFromValue(v string) (*FilterOperator, error) {
	ev := FilterOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterOperator: valid values are %v", v, AllowedFilterOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterOperator) IsValid() bool {
	for _, existing := range AllowedFilterOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterOperator value
func (v FilterOperator) Ptr() *FilterOperator {
	return &v
}

type NullableFilterOperator struct {
	value *FilterOperator
	isSet bool
}

func (v NullableFilterOperator) Get() *FilterOperator {
	return v.value
}

func (v *NullableFilterOperator) Set(val *FilterOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterOperator(val *FilterOperator) *NullableFilterOperator {
	return &NullableFilterOperator{value: val, isSet: true}
}

func (v NullableFilterOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

