/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestResultsStatisticsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultsStatisticsResponse{}

// TestResultsStatisticsResponse struct for TestResultsStatisticsResponse
type TestResultsStatisticsResponse struct {
	// Test results counts aggregated by outcome
	Statuses TestResultsStatisticsStatuses `json:"statuses"`
	// Test results counts aggregated by result failure categories
	FailureCategories TestResultsStatisticsFailureCategories `json:"failureCategories"`
}

type _TestResultsStatisticsResponse TestResultsStatisticsResponse

// NewTestResultsStatisticsResponse instantiates a new TestResultsStatisticsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultsStatisticsResponse(statuses TestResultsStatisticsStatuses, failureCategories TestResultsStatisticsFailureCategories) *TestResultsStatisticsResponse {
	this := TestResultsStatisticsResponse{}
	this.Statuses = statuses
	this.FailureCategories = failureCategories
	return &this
}

// NewTestResultsStatisticsResponseWithDefaults instantiates a new TestResultsStatisticsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultsStatisticsResponseWithDefaults() *TestResultsStatisticsResponse {
	this := TestResultsStatisticsResponse{}
	return &this
}

// GetStatuses returns the Statuses field value
func (o *TestResultsStatisticsResponse) GetStatuses() TestResultsStatisticsStatuses {
	if o == nil {
		var ret TestResultsStatisticsStatuses
		return ret
	}

	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value
// and a boolean to check if the value has been set.
func (o *TestResultsStatisticsResponse) GetStatusesOk() (*TestResultsStatisticsStatuses, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statuses, true
}

// SetStatuses sets field value
func (o *TestResultsStatisticsResponse) SetStatuses(v TestResultsStatisticsStatuses) {
	o.Statuses = v
}

// GetFailureCategories returns the FailureCategories field value
func (o *TestResultsStatisticsResponse) GetFailureCategories() TestResultsStatisticsFailureCategories {
	if o == nil {
		var ret TestResultsStatisticsFailureCategories
		return ret
	}

	return o.FailureCategories
}

// GetFailureCategoriesOk returns a tuple with the FailureCategories field value
// and a boolean to check if the value has been set.
func (o *TestResultsStatisticsResponse) GetFailureCategoriesOk() (*TestResultsStatisticsFailureCategories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureCategories, true
}

// SetFailureCategories sets field value
func (o *TestResultsStatisticsResponse) SetFailureCategories(v TestResultsStatisticsFailureCategories) {
	o.FailureCategories = v
}

func (o TestResultsStatisticsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultsStatisticsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statuses"] = o.Statuses
	toSerialize["failureCategories"] = o.FailureCategories
	return toSerialize, nil
}

func (o *TestResultsStatisticsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statuses",
		"failureCategories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestResultsStatisticsResponse := _TestResultsStatisticsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestResultsStatisticsResponse)

	if err != nil {
		return err
	}

	*o = TestResultsStatisticsResponse(varTestResultsStatisticsResponse)

	return err
}

type NullableTestResultsStatisticsResponse struct {
	value *TestResultsStatisticsResponse
	isSet bool
}

func (v NullableTestResultsStatisticsResponse) Get() *TestResultsStatisticsResponse {
	return v.value
}

func (v *NullableTestResultsStatisticsResponse) Set(val *TestResultsStatisticsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultsStatisticsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultsStatisticsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultsStatisticsResponse(val *TestResultsStatisticsResponse) *NullableTestResultsStatisticsResponse {
	return &NullableTestResultsStatisticsResponse{value: val, isSet: true}
}

func (v NullableTestResultsStatisticsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultsStatisticsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


