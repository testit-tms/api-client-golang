/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TestResultResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestResultResponse{}

// TestResultResponse struct for TestResultResponse
type TestResultResponse struct {
	Id string `json:"id"`
	CreatedDate time.Time `json:"createdDate"`
	ModifiedDate NullableTime `json:"modifiedDate,omitempty"`
	CreatedById string `json:"createdById"`
	ModifiedById NullableString `json:"modifiedById,omitempty"`
	StepComments []StepComment `json:"stepComments,omitempty"`
	FailureClassIds []string `json:"failureClassIds"`
	// Deprecated
	Outcome NullableTestResultOutcome `json:"outcome,omitempty"`
	Status NullableTestStatusApiResult `json:"status,omitempty"`
	Comment NullableString `json:"comment,omitempty"`
	Links []Link `json:"links,omitempty"`
	StepResults []StepResult `json:"stepResults,omitempty"`
	Attachments []Attachment `json:"attachments,omitempty"`
	AutoTestId NullableString `json:"autoTestId,omitempty"`
	ConfigurationId string `json:"configurationId"`
	StartedOn NullableTime `json:"startedOn,omitempty"`
	CompletedOn NullableTime `json:"completedOn,omitempty"`
	DurationInMs NullableInt64 `json:"durationInMs,omitempty"`
	Traces NullableString `json:"traces,omitempty"`
	FailureType NullableString `json:"failureType,omitempty"`
	Message NullableString `json:"message,omitempty"`
	RunByUserId NullableString `json:"runByUserId,omitempty"`
	StoppedByUserId NullableString `json:"stoppedByUserId,omitempty"`
	TestPointId string `json:"testPointId"`
	TestRunId string `json:"testRunId"`
	TestPoint NullableTestPoint `json:"testPoint,omitempty"`
	AutoTest NullableAutoTest `json:"autoTest,omitempty"`
	AutoTestStepResults []AutoTestStepResult `json:"autoTestStepResults,omitempty"`
	SetupResults []AutoTestStepResult `json:"setupResults,omitempty"`
	TeardownResults []AutoTestStepResult `json:"teardownResults,omitempty"`
	WorkItemVersionId string `json:"workItemVersionId"`
	WorkItemVersionNumber NullableInt32 `json:"workItemVersionNumber,omitempty"`
	Parameters map[string]string `json:"parameters,omitempty"`
	Properties map[string]string `json:"properties,omitempty"`
}

type _TestResultResponse TestResultResponse

// NewTestResultResponse instantiates a new TestResultResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultResponse(id string, createdDate time.Time, createdById string, failureClassIds []string, configurationId string, testPointId string, testRunId string, workItemVersionId string) *TestResultResponse {
	this := TestResultResponse{}
	this.Id = id
	this.CreatedDate = createdDate
	this.CreatedById = createdById
	this.FailureClassIds = failureClassIds
	this.ConfigurationId = configurationId
	this.TestPointId = testPointId
	this.TestRunId = testRunId
	this.WorkItemVersionId = workItemVersionId
	return &this
}

// NewTestResultResponseWithDefaults instantiates a new TestResultResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultResponseWithDefaults() *TestResultResponse {
	this := TestResultResponse{}
	return &this
}

// GetId returns the Id field value
func (o *TestResultResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestResultResponse) SetId(v string) {
	o.Id = v
}

// GetCreatedDate returns the CreatedDate field value
func (o *TestResultResponse) GetCreatedDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *TestResultResponse) SetCreatedDate(v time.Time) {
	o.CreatedDate = v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetModifiedDate() time.Time {
	if o == nil || IsNil(o.ModifiedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate.Get()
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedDate.Get(), o.ModifiedDate.IsSet()
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *TestResultResponse) HasModifiedDate() bool {
	if o != nil && o.ModifiedDate.IsSet() {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given NullableTime and assigns it to the ModifiedDate field.
func (o *TestResultResponse) SetModifiedDate(v time.Time) {
	o.ModifiedDate.Set(&v)
}
// SetModifiedDateNil sets the value for ModifiedDate to be an explicit nil
func (o *TestResultResponse) SetModifiedDateNil() {
	o.ModifiedDate.Set(nil)
}

// UnsetModifiedDate ensures that no value is present for ModifiedDate, not even an explicit nil
func (o *TestResultResponse) UnsetModifiedDate() {
	o.ModifiedDate.Unset()
}

// GetCreatedById returns the CreatedById field value
func (o *TestResultResponse) GetCreatedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetCreatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedById, true
}

// SetCreatedById sets field value
func (o *TestResultResponse) SetCreatedById(v string) {
	o.CreatedById = v
}

// GetModifiedById returns the ModifiedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetModifiedById() string {
	if o == nil || IsNil(o.ModifiedById.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedById.Get()
}

// GetModifiedByIdOk returns a tuple with the ModifiedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetModifiedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedById.Get(), o.ModifiedById.IsSet()
}

// HasModifiedById returns a boolean if a field has been set.
func (o *TestResultResponse) HasModifiedById() bool {
	if o != nil && o.ModifiedById.IsSet() {
		return true
	}

	return false
}

// SetModifiedById gets a reference to the given NullableString and assigns it to the ModifiedById field.
func (o *TestResultResponse) SetModifiedById(v string) {
	o.ModifiedById.Set(&v)
}
// SetModifiedByIdNil sets the value for ModifiedById to be an explicit nil
func (o *TestResultResponse) SetModifiedByIdNil() {
	o.ModifiedById.Set(nil)
}

// UnsetModifiedById ensures that no value is present for ModifiedById, not even an explicit nil
func (o *TestResultResponse) UnsetModifiedById() {
	o.ModifiedById.Unset()
}

// GetStepComments returns the StepComments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetStepComments() []StepComment {
	if o == nil {
		var ret []StepComment
		return ret
	}
	return o.StepComments
}

// GetStepCommentsOk returns a tuple with the StepComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetStepCommentsOk() ([]StepComment, bool) {
	if o == nil || IsNil(o.StepComments) {
		return nil, false
	}
	return o.StepComments, true
}

// HasStepComments returns a boolean if a field has been set.
func (o *TestResultResponse) HasStepComments() bool {
	if o != nil && !IsNil(o.StepComments) {
		return true
	}

	return false
}

// SetStepComments gets a reference to the given []StepComment and assigns it to the StepComments field.
func (o *TestResultResponse) SetStepComments(v []StepComment) {
	o.StepComments = v
}

// GetFailureClassIds returns the FailureClassIds field value
func (o *TestResultResponse) GetFailureClassIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FailureClassIds
}

// GetFailureClassIdsOk returns a tuple with the FailureClassIds field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetFailureClassIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureClassIds, true
}

// SetFailureClassIds sets field value
func (o *TestResultResponse) SetFailureClassIds(v []string) {
	o.FailureClassIds = v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *TestResultResponse) GetOutcome() TestResultOutcome {
	if o == nil || IsNil(o.Outcome.Get()) {
		var ret TestResultOutcome
		return ret
	}
	return *o.Outcome.Get()
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *TestResultResponse) GetOutcomeOk() (*TestResultOutcome, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outcome.Get(), o.Outcome.IsSet()
}

// HasOutcome returns a boolean if a field has been set.
func (o *TestResultResponse) HasOutcome() bool {
	if o != nil && o.Outcome.IsSet() {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given NullableTestResultOutcome and assigns it to the Outcome field.
// Deprecated
func (o *TestResultResponse) SetOutcome(v TestResultOutcome) {
	o.Outcome.Set(&v)
}
// SetOutcomeNil sets the value for Outcome to be an explicit nil
func (o *TestResultResponse) SetOutcomeNil() {
	o.Outcome.Set(nil)
}

// UnsetOutcome ensures that no value is present for Outcome, not even an explicit nil
func (o *TestResultResponse) UnsetOutcome() {
	o.Outcome.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetStatus() TestStatusApiResult {
	if o == nil || IsNil(o.Status.Get()) {
		var ret TestStatusApiResult
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetStatusOk() (*TestStatusApiResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TestResultResponse) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableTestStatusApiResult and assigns it to the Status field.
func (o *TestResultResponse) SetStatus(v TestStatusApiResult) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TestResultResponse) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TestResultResponse) UnsetStatus() {
	o.Status.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetComment() string {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *TestResultResponse) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *TestResultResponse) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *TestResultResponse) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *TestResultResponse) UnsetComment() {
	o.Comment.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TestResultResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *TestResultResponse) SetLinks(v []Link) {
	o.Links = v
}

// GetStepResults returns the StepResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetStepResults() []StepResult {
	if o == nil {
		var ret []StepResult
		return ret
	}
	return o.StepResults
}

// GetStepResultsOk returns a tuple with the StepResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetStepResultsOk() ([]StepResult, bool) {
	if o == nil || IsNil(o.StepResults) {
		return nil, false
	}
	return o.StepResults, true
}

// HasStepResults returns a boolean if a field has been set.
func (o *TestResultResponse) HasStepResults() bool {
	if o != nil && !IsNil(o.StepResults) {
		return true
	}

	return false
}

// SetStepResults gets a reference to the given []StepResult and assigns it to the StepResults field.
func (o *TestResultResponse) SetStepResults(v []StepResult) {
	o.StepResults = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetAttachments() []Attachment {
	if o == nil {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TestResultResponse) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *TestResultResponse) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetAutoTestId returns the AutoTestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetAutoTestId() string {
	if o == nil || IsNil(o.AutoTestId.Get()) {
		var ret string
		return ret
	}
	return *o.AutoTestId.Get()
}

// GetAutoTestIdOk returns a tuple with the AutoTestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetAutoTestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoTestId.Get(), o.AutoTestId.IsSet()
}

// HasAutoTestId returns a boolean if a field has been set.
func (o *TestResultResponse) HasAutoTestId() bool {
	if o != nil && o.AutoTestId.IsSet() {
		return true
	}

	return false
}

// SetAutoTestId gets a reference to the given NullableString and assigns it to the AutoTestId field.
func (o *TestResultResponse) SetAutoTestId(v string) {
	o.AutoTestId.Set(&v)
}
// SetAutoTestIdNil sets the value for AutoTestId to be an explicit nil
func (o *TestResultResponse) SetAutoTestIdNil() {
	o.AutoTestId.Set(nil)
}

// UnsetAutoTestId ensures that no value is present for AutoTestId, not even an explicit nil
func (o *TestResultResponse) UnsetAutoTestId() {
	o.AutoTestId.Unset()
}

// GetConfigurationId returns the ConfigurationId field value
func (o *TestResultResponse) GetConfigurationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationId
}

// GetConfigurationIdOk returns a tuple with the ConfigurationId field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetConfigurationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigurationId, true
}

// SetConfigurationId sets field value
func (o *TestResultResponse) SetConfigurationId(v string) {
	o.ConfigurationId = v
}

// GetStartedOn returns the StartedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetStartedOn() time.Time {
	if o == nil || IsNil(o.StartedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedOn.Get()
}

// GetStartedOnOk returns a tuple with the StartedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetStartedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedOn.Get(), o.StartedOn.IsSet()
}

// HasStartedOn returns a boolean if a field has been set.
func (o *TestResultResponse) HasStartedOn() bool {
	if o != nil && o.StartedOn.IsSet() {
		return true
	}

	return false
}

// SetStartedOn gets a reference to the given NullableTime and assigns it to the StartedOn field.
func (o *TestResultResponse) SetStartedOn(v time.Time) {
	o.StartedOn.Set(&v)
}
// SetStartedOnNil sets the value for StartedOn to be an explicit nil
func (o *TestResultResponse) SetStartedOnNil() {
	o.StartedOn.Set(nil)
}

// UnsetStartedOn ensures that no value is present for StartedOn, not even an explicit nil
func (o *TestResultResponse) UnsetStartedOn() {
	o.StartedOn.Unset()
}

// GetCompletedOn returns the CompletedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetCompletedOn() time.Time {
	if o == nil || IsNil(o.CompletedOn.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedOn.Get()
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetCompletedOnOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedOn.Get(), o.CompletedOn.IsSet()
}

// HasCompletedOn returns a boolean if a field has been set.
func (o *TestResultResponse) HasCompletedOn() bool {
	if o != nil && o.CompletedOn.IsSet() {
		return true
	}

	return false
}

// SetCompletedOn gets a reference to the given NullableTime and assigns it to the CompletedOn field.
func (o *TestResultResponse) SetCompletedOn(v time.Time) {
	o.CompletedOn.Set(&v)
}
// SetCompletedOnNil sets the value for CompletedOn to be an explicit nil
func (o *TestResultResponse) SetCompletedOnNil() {
	o.CompletedOn.Set(nil)
}

// UnsetCompletedOn ensures that no value is present for CompletedOn, not even an explicit nil
func (o *TestResultResponse) UnsetCompletedOn() {
	o.CompletedOn.Unset()
}

// GetDurationInMs returns the DurationInMs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetDurationInMs() int64 {
	if o == nil || IsNil(o.DurationInMs.Get()) {
		var ret int64
		return ret
	}
	return *o.DurationInMs.Get()
}

// GetDurationInMsOk returns a tuple with the DurationInMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetDurationInMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationInMs.Get(), o.DurationInMs.IsSet()
}

// HasDurationInMs returns a boolean if a field has been set.
func (o *TestResultResponse) HasDurationInMs() bool {
	if o != nil && o.DurationInMs.IsSet() {
		return true
	}

	return false
}

// SetDurationInMs gets a reference to the given NullableInt64 and assigns it to the DurationInMs field.
func (o *TestResultResponse) SetDurationInMs(v int64) {
	o.DurationInMs.Set(&v)
}
// SetDurationInMsNil sets the value for DurationInMs to be an explicit nil
func (o *TestResultResponse) SetDurationInMsNil() {
	o.DurationInMs.Set(nil)
}

// UnsetDurationInMs ensures that no value is present for DurationInMs, not even an explicit nil
func (o *TestResultResponse) UnsetDurationInMs() {
	o.DurationInMs.Unset()
}

// GetTraces returns the Traces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetTraces() string {
	if o == nil || IsNil(o.Traces.Get()) {
		var ret string
		return ret
	}
	return *o.Traces.Get()
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetTracesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traces.Get(), o.Traces.IsSet()
}

// HasTraces returns a boolean if a field has been set.
func (o *TestResultResponse) HasTraces() bool {
	if o != nil && o.Traces.IsSet() {
		return true
	}

	return false
}

// SetTraces gets a reference to the given NullableString and assigns it to the Traces field.
func (o *TestResultResponse) SetTraces(v string) {
	o.Traces.Set(&v)
}
// SetTracesNil sets the value for Traces to be an explicit nil
func (o *TestResultResponse) SetTracesNil() {
	o.Traces.Set(nil)
}

// UnsetTraces ensures that no value is present for Traces, not even an explicit nil
func (o *TestResultResponse) UnsetTraces() {
	o.Traces.Unset()
}

// GetFailureType returns the FailureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetFailureType() string {
	if o == nil || IsNil(o.FailureType.Get()) {
		var ret string
		return ret
	}
	return *o.FailureType.Get()
}

// GetFailureTypeOk returns a tuple with the FailureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetFailureTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailureType.Get(), o.FailureType.IsSet()
}

// HasFailureType returns a boolean if a field has been set.
func (o *TestResultResponse) HasFailureType() bool {
	if o != nil && o.FailureType.IsSet() {
		return true
	}

	return false
}

// SetFailureType gets a reference to the given NullableString and assigns it to the FailureType field.
func (o *TestResultResponse) SetFailureType(v string) {
	o.FailureType.Set(&v)
}
// SetFailureTypeNil sets the value for FailureType to be an explicit nil
func (o *TestResultResponse) SetFailureTypeNil() {
	o.FailureType.Set(nil)
}

// UnsetFailureType ensures that no value is present for FailureType, not even an explicit nil
func (o *TestResultResponse) UnsetFailureType() {
	o.FailureType.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *TestResultResponse) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *TestResultResponse) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *TestResultResponse) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *TestResultResponse) UnsetMessage() {
	o.Message.Unset()
}

// GetRunByUserId returns the RunByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetRunByUserId() string {
	if o == nil || IsNil(o.RunByUserId.Get()) {
		var ret string
		return ret
	}
	return *o.RunByUserId.Get()
}

// GetRunByUserIdOk returns a tuple with the RunByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetRunByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunByUserId.Get(), o.RunByUserId.IsSet()
}

// HasRunByUserId returns a boolean if a field has been set.
func (o *TestResultResponse) HasRunByUserId() bool {
	if o != nil && o.RunByUserId.IsSet() {
		return true
	}

	return false
}

// SetRunByUserId gets a reference to the given NullableString and assigns it to the RunByUserId field.
func (o *TestResultResponse) SetRunByUserId(v string) {
	o.RunByUserId.Set(&v)
}
// SetRunByUserIdNil sets the value for RunByUserId to be an explicit nil
func (o *TestResultResponse) SetRunByUserIdNil() {
	o.RunByUserId.Set(nil)
}

// UnsetRunByUserId ensures that no value is present for RunByUserId, not even an explicit nil
func (o *TestResultResponse) UnsetRunByUserId() {
	o.RunByUserId.Unset()
}

// GetStoppedByUserId returns the StoppedByUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetStoppedByUserId() string {
	if o == nil || IsNil(o.StoppedByUserId.Get()) {
		var ret string
		return ret
	}
	return *o.StoppedByUserId.Get()
}

// GetStoppedByUserIdOk returns a tuple with the StoppedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetStoppedByUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StoppedByUserId.Get(), o.StoppedByUserId.IsSet()
}

// HasStoppedByUserId returns a boolean if a field has been set.
func (o *TestResultResponse) HasStoppedByUserId() bool {
	if o != nil && o.StoppedByUserId.IsSet() {
		return true
	}

	return false
}

// SetStoppedByUserId gets a reference to the given NullableString and assigns it to the StoppedByUserId field.
func (o *TestResultResponse) SetStoppedByUserId(v string) {
	o.StoppedByUserId.Set(&v)
}
// SetStoppedByUserIdNil sets the value for StoppedByUserId to be an explicit nil
func (o *TestResultResponse) SetStoppedByUserIdNil() {
	o.StoppedByUserId.Set(nil)
}

// UnsetStoppedByUserId ensures that no value is present for StoppedByUserId, not even an explicit nil
func (o *TestResultResponse) UnsetStoppedByUserId() {
	o.StoppedByUserId.Unset()
}

// GetTestPointId returns the TestPointId field value
func (o *TestResultResponse) GetTestPointId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestPointId
}

// GetTestPointIdOk returns a tuple with the TestPointId field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetTestPointIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestPointId, true
}

// SetTestPointId sets field value
func (o *TestResultResponse) SetTestPointId(v string) {
	o.TestPointId = v
}

// GetTestRunId returns the TestRunId field value
func (o *TestResultResponse) GetTestRunId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestRunId
}

// GetTestRunIdOk returns a tuple with the TestRunId field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetTestRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestRunId, true
}

// SetTestRunId sets field value
func (o *TestResultResponse) SetTestRunId(v string) {
	o.TestRunId = v
}

// GetTestPoint returns the TestPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetTestPoint() TestPoint {
	if o == nil || IsNil(o.TestPoint.Get()) {
		var ret TestPoint
		return ret
	}
	return *o.TestPoint.Get()
}

// GetTestPointOk returns a tuple with the TestPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetTestPointOk() (*TestPoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestPoint.Get(), o.TestPoint.IsSet()
}

// HasTestPoint returns a boolean if a field has been set.
func (o *TestResultResponse) HasTestPoint() bool {
	if o != nil && o.TestPoint.IsSet() {
		return true
	}

	return false
}

// SetTestPoint gets a reference to the given NullableTestPoint and assigns it to the TestPoint field.
func (o *TestResultResponse) SetTestPoint(v TestPoint) {
	o.TestPoint.Set(&v)
}
// SetTestPointNil sets the value for TestPoint to be an explicit nil
func (o *TestResultResponse) SetTestPointNil() {
	o.TestPoint.Set(nil)
}

// UnsetTestPoint ensures that no value is present for TestPoint, not even an explicit nil
func (o *TestResultResponse) UnsetTestPoint() {
	o.TestPoint.Unset()
}

// GetAutoTest returns the AutoTest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetAutoTest() AutoTest {
	if o == nil || IsNil(o.AutoTest.Get()) {
		var ret AutoTest
		return ret
	}
	return *o.AutoTest.Get()
}

// GetAutoTestOk returns a tuple with the AutoTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetAutoTestOk() (*AutoTest, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoTest.Get(), o.AutoTest.IsSet()
}

// HasAutoTest returns a boolean if a field has been set.
func (o *TestResultResponse) HasAutoTest() bool {
	if o != nil && o.AutoTest.IsSet() {
		return true
	}

	return false
}

// SetAutoTest gets a reference to the given NullableAutoTest and assigns it to the AutoTest field.
func (o *TestResultResponse) SetAutoTest(v AutoTest) {
	o.AutoTest.Set(&v)
}
// SetAutoTestNil sets the value for AutoTest to be an explicit nil
func (o *TestResultResponse) SetAutoTestNil() {
	o.AutoTest.Set(nil)
}

// UnsetAutoTest ensures that no value is present for AutoTest, not even an explicit nil
func (o *TestResultResponse) UnsetAutoTest() {
	o.AutoTest.Unset()
}

// GetAutoTestStepResults returns the AutoTestStepResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetAutoTestStepResults() []AutoTestStepResult {
	if o == nil {
		var ret []AutoTestStepResult
		return ret
	}
	return o.AutoTestStepResults
}

// GetAutoTestStepResultsOk returns a tuple with the AutoTestStepResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetAutoTestStepResultsOk() ([]AutoTestStepResult, bool) {
	if o == nil || IsNil(o.AutoTestStepResults) {
		return nil, false
	}
	return o.AutoTestStepResults, true
}

// HasAutoTestStepResults returns a boolean if a field has been set.
func (o *TestResultResponse) HasAutoTestStepResults() bool {
	if o != nil && !IsNil(o.AutoTestStepResults) {
		return true
	}

	return false
}

// SetAutoTestStepResults gets a reference to the given []AutoTestStepResult and assigns it to the AutoTestStepResults field.
func (o *TestResultResponse) SetAutoTestStepResults(v []AutoTestStepResult) {
	o.AutoTestStepResults = v
}

// GetSetupResults returns the SetupResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetSetupResults() []AutoTestStepResult {
	if o == nil {
		var ret []AutoTestStepResult
		return ret
	}
	return o.SetupResults
}

// GetSetupResultsOk returns a tuple with the SetupResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetSetupResultsOk() ([]AutoTestStepResult, bool) {
	if o == nil || IsNil(o.SetupResults) {
		return nil, false
	}
	return o.SetupResults, true
}

// HasSetupResults returns a boolean if a field has been set.
func (o *TestResultResponse) HasSetupResults() bool {
	if o != nil && !IsNil(o.SetupResults) {
		return true
	}

	return false
}

// SetSetupResults gets a reference to the given []AutoTestStepResult and assigns it to the SetupResults field.
func (o *TestResultResponse) SetSetupResults(v []AutoTestStepResult) {
	o.SetupResults = v
}

// GetTeardownResults returns the TeardownResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetTeardownResults() []AutoTestStepResult {
	if o == nil {
		var ret []AutoTestStepResult
		return ret
	}
	return o.TeardownResults
}

// GetTeardownResultsOk returns a tuple with the TeardownResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetTeardownResultsOk() ([]AutoTestStepResult, bool) {
	if o == nil || IsNil(o.TeardownResults) {
		return nil, false
	}
	return o.TeardownResults, true
}

// HasTeardownResults returns a boolean if a field has been set.
func (o *TestResultResponse) HasTeardownResults() bool {
	if o != nil && !IsNil(o.TeardownResults) {
		return true
	}

	return false
}

// SetTeardownResults gets a reference to the given []AutoTestStepResult and assigns it to the TeardownResults field.
func (o *TestResultResponse) SetTeardownResults(v []AutoTestStepResult) {
	o.TeardownResults = v
}

// GetWorkItemVersionId returns the WorkItemVersionId field value
func (o *TestResultResponse) GetWorkItemVersionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkItemVersionId
}

// GetWorkItemVersionIdOk returns a tuple with the WorkItemVersionId field value
// and a boolean to check if the value has been set.
func (o *TestResultResponse) GetWorkItemVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkItemVersionId, true
}

// SetWorkItemVersionId sets field value
func (o *TestResultResponse) SetWorkItemVersionId(v string) {
	o.WorkItemVersionId = v
}

// GetWorkItemVersionNumber returns the WorkItemVersionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetWorkItemVersionNumber() int32 {
	if o == nil || IsNil(o.WorkItemVersionNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.WorkItemVersionNumber.Get()
}

// GetWorkItemVersionNumberOk returns a tuple with the WorkItemVersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetWorkItemVersionNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkItemVersionNumber.Get(), o.WorkItemVersionNumber.IsSet()
}

// HasWorkItemVersionNumber returns a boolean if a field has been set.
func (o *TestResultResponse) HasWorkItemVersionNumber() bool {
	if o != nil && o.WorkItemVersionNumber.IsSet() {
		return true
	}

	return false
}

// SetWorkItemVersionNumber gets a reference to the given NullableInt32 and assigns it to the WorkItemVersionNumber field.
func (o *TestResultResponse) SetWorkItemVersionNumber(v int32) {
	o.WorkItemVersionNumber.Set(&v)
}
// SetWorkItemVersionNumberNil sets the value for WorkItemVersionNumber to be an explicit nil
func (o *TestResultResponse) SetWorkItemVersionNumberNil() {
	o.WorkItemVersionNumber.Set(nil)
}

// UnsetWorkItemVersionNumber ensures that no value is present for WorkItemVersionNumber, not even an explicit nil
func (o *TestResultResponse) UnsetWorkItemVersionNumber() {
	o.WorkItemVersionNumber.Unset()
}

// GetParameters returns the Parameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetParameters() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return &o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *TestResultResponse) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]string and assigns it to the Parameters field.
func (o *TestResultResponse) SetParameters(v map[string]string) {
	o.Parameters = v
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestResultResponse) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestResultResponse) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return &o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TestResultResponse) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *TestResultResponse) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o TestResultResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdDate"] = o.CreatedDate
	if o.ModifiedDate.IsSet() {
		toSerialize["modifiedDate"] = o.ModifiedDate.Get()
	}
	toSerialize["createdById"] = o.CreatedById
	if o.ModifiedById.IsSet() {
		toSerialize["modifiedById"] = o.ModifiedById.Get()
	}
	if o.StepComments != nil {
		toSerialize["stepComments"] = o.StepComments
	}
	toSerialize["failureClassIds"] = o.FailureClassIds
	if o.Outcome.IsSet() {
		toSerialize["outcome"] = o.Outcome.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.StepResults != nil {
		toSerialize["stepResults"] = o.StepResults
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.AutoTestId.IsSet() {
		toSerialize["autoTestId"] = o.AutoTestId.Get()
	}
	toSerialize["configurationId"] = o.ConfigurationId
	if o.StartedOn.IsSet() {
		toSerialize["startedOn"] = o.StartedOn.Get()
	}
	if o.CompletedOn.IsSet() {
		toSerialize["completedOn"] = o.CompletedOn.Get()
	}
	if o.DurationInMs.IsSet() {
		toSerialize["durationInMs"] = o.DurationInMs.Get()
	}
	if o.Traces.IsSet() {
		toSerialize["traces"] = o.Traces.Get()
	}
	if o.FailureType.IsSet() {
		toSerialize["failureType"] = o.FailureType.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.RunByUserId.IsSet() {
		toSerialize["runByUserId"] = o.RunByUserId.Get()
	}
	if o.StoppedByUserId.IsSet() {
		toSerialize["stoppedByUserId"] = o.StoppedByUserId.Get()
	}
	toSerialize["testPointId"] = o.TestPointId
	toSerialize["testRunId"] = o.TestRunId
	if o.TestPoint.IsSet() {
		toSerialize["testPoint"] = o.TestPoint.Get()
	}
	if o.AutoTest.IsSet() {
		toSerialize["autoTest"] = o.AutoTest.Get()
	}
	if o.AutoTestStepResults != nil {
		toSerialize["autoTestStepResults"] = o.AutoTestStepResults
	}
	if o.SetupResults != nil {
		toSerialize["setupResults"] = o.SetupResults
	}
	if o.TeardownResults != nil {
		toSerialize["teardownResults"] = o.TeardownResults
	}
	toSerialize["workItemVersionId"] = o.WorkItemVersionId
	if o.WorkItemVersionNumber.IsSet() {
		toSerialize["workItemVersionNumber"] = o.WorkItemVersionNumber.Get()
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

func (o *TestResultResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdDate",
		"createdById",
		"failureClassIds",
		"configurationId",
		"testPointId",
		"testRunId",
		"workItemVersionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestResultResponse := _TestResultResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestResultResponse)

	if err != nil {
		return err
	}

	*o = TestResultResponse(varTestResultResponse)

	return err
}

type NullableTestResultResponse struct {
	value *TestResultResponse
	isSet bool
}

func (v NullableTestResultResponse) Get() *TestResultResponse {
	return v.value
}

func (v *NullableTestResultResponse) Set(val *TestResultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultResponse(val *TestResultResponse) *NullableTestResultResponse {
	return &NullableTestResultResponse{value: val, isSet: true}
}

func (v NullableTestResultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


