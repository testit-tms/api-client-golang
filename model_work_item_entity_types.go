/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// WorkItemEntityTypes the model 'WorkItemEntityTypes'
type WorkItemEntityTypes string

// List of WorkItemEntityTypes
const (
	WORKITEMENTITYTYPES_TEST_CASES WorkItemEntityTypes = "TestCases"
	WORKITEMENTITYTYPES_CHECK_LISTS WorkItemEntityTypes = "CheckLists"
	WORKITEMENTITYTYPES_SHARED_STEPS WorkItemEntityTypes = "SharedSteps"
)

// All allowed values of WorkItemEntityTypes enum
var AllowedWorkItemEntityTypesEnumValues = []WorkItemEntityTypes{
	"TestCases",
	"CheckLists",
	"SharedSteps",
}

func (v *WorkItemEntityTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkItemEntityTypes(value)
	for _, existing := range AllowedWorkItemEntityTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkItemEntityTypes", value)
}

// NewWorkItemEntityTypesFromValue returns a pointer to a valid WorkItemEntityTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkItemEntityTypesFromValue(v string) (*WorkItemEntityTypes, error) {
	ev := WorkItemEntityTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkItemEntityTypes: valid values are %v", v, AllowedWorkItemEntityTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkItemEntityTypes) IsValid() bool {
	for _, existing := range AllowedWorkItemEntityTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkItemEntityTypes value
func (v WorkItemEntityTypes) Ptr() *WorkItemEntityTypes {
	return &v
}

type NullableWorkItemEntityTypes struct {
	value *WorkItemEntityTypes
	isSet bool
}

func (v NullableWorkItemEntityTypes) Get() *WorkItemEntityTypes {
	return v.value
}

func (v *NullableWorkItemEntityTypes) Set(val *WorkItemEntityTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkItemEntityTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkItemEntityTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkItemEntityTypes(val *WorkItemEntityTypes) *NullableWorkItemEntityTypes {
	return &NullableWorkItemEntityTypes{value: val, isSet: true}
}

func (v NullableWorkItemEntityTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkItemEntityTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

