/*
API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tmsclient

import (
	"encoding/json"
	"fmt"
)

// TestPointStatus the model 'TestPointStatus'
type TestPointStatus string

// List of TestPointStatus
const (
	TESTPOINTSTATUS_IN_PROGRESS TestPointStatus = "InProgress"
	TESTPOINTSTATUS_PASSED TestPointStatus = "Passed"
	TESTPOINTSTATUS_FAILED TestPointStatus = "Failed"
	TESTPOINTSTATUS_SKIPPED TestPointStatus = "Skipped"
	TESTPOINTSTATUS_BLOCKED TestPointStatus = "Blocked"
	TESTPOINTSTATUS_NO_RESULTS TestPointStatus = "NoResults"
)

// All allowed values of TestPointStatus enum
var AllowedTestPointStatusEnumValues = []TestPointStatus{
	"InProgress",
	"Passed",
	"Failed",
	"Skipped",
	"Blocked",
	"NoResults",
}

func (v *TestPointStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestPointStatus(value)
	for _, existing := range AllowedTestPointStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestPointStatus", value)
}

// NewTestPointStatusFromValue returns a pointer to a valid TestPointStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestPointStatusFromValue(v string) (*TestPointStatus, error) {
	ev := TestPointStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestPointStatus: valid values are %v", v, AllowedTestPointStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestPointStatus) IsValid() bool {
	for _, existing := range AllowedTestPointStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestPointStatus value
func (v TestPointStatus) Ptr() *TestPointStatus {
	return &v
}

type NullableTestPointStatus struct {
	value *TestPointStatus
	isSet bool
}

func (v NullableTestPointStatus) Get() *TestPointStatus {
	return v.value
}

func (v *NullableTestPointStatus) Set(val *TestPointStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPointStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPointStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPointStatus(val *TestPointStatus) *NullableTestPointStatus {
	return &NullableTestPointStatus{value: val, isSet: true}
}

func (v NullableTestPointStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPointStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

